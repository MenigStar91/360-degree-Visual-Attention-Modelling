{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"final","provenance":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["# Connections and libraries"],"metadata":{"id":"qRo48Wph9039"}},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"qzlUboSlzVwn","executionInfo":{"status":"ok","timestamp":1639688921276,"user_tz":-330,"elapsed":2896,"user":{"displayName":"Diksha Jena (B20CS013)","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"03488940742474601522"}},"outputId":"cbe2b92f-6966-4b49-d7e8-33db633f5579"},"outputs":[{"output_type":"stream","name":"stdout","text":["Drive already mounted at /dir; to attempt to forcibly remount, call drive.mount(\"/dir\", force_remount=True).\n"]}],"source":["from google.colab import drive\n","drive.mount(\"/dir\")"]},{"cell_type":"code","source":["#import glob\n","import numpy as np\n","import pandas as pd\n","\n","import PIL\n","import matplotlib.pyplot as plt\n","\n","from scipy.ndimage import map_coordinates\n","import scipy.io\n","import scipy as sp\n","import sklearn.preprocessing\n","from skimage.transform import resize\n","import numpy.matlib\n","import math\n","\n","import cv2\n","import os,re, glob\n","from functools import partial\n","\n","EPSILON = np.finfo('float').eps\n","%matplotlib inline"],"metadata":{"id":"TLgaqZIJ3L6O"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#code required"],"metadata":{"id":"4M2PVW3S4HHo"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["#Functions for cubemap conversion"],"metadata":{"id":"UpyDnBWD8yrf"}},{"cell_type":"code","source":["def xyzcube(face_w):\n","    '''\n","    Return the xyz cordinates of the unit cube in [F R B L U D] format.\n","    '''\n","    out = np.zeros((face_w, face_w * 6, 3), np.float32)\n","    rng = np.linspace(-0.5, 0.5, num=face_w, dtype=np.float32)\n","    grid = np.stack(np.meshgrid(rng, -rng), -1)\n","\n","    # Front face (z = 0.5)\n","    out[:, 0*face_w:1*face_w, [0, 1]] = grid\n","    out[:, 0*face_w:1*face_w, 2] = 0.5\n","\n","    # Right face (x = 0.5)\n","    out[:, 1*face_w:2*face_w, [2, 1]] = grid\n","    out[:, 1*face_w:2*face_w, 0] = 0.5\n","\n","    # Back face (z = -0.5)\n","    out[:, 2*face_w:3*face_w, [0, 1]] = grid\n","    out[:, 2*face_w:3*face_w, 2] = -0.5\n","\n","    # Left face (x = -0.5)\n","    out[:, 3*face_w:4*face_w, [2, 1]] = grid\n","    out[:, 3*face_w:4*face_w, 0] = -0.5\n","\n","    # Up face (y = 0.5)\n","    out[:, 4*face_w:5*face_w, [0, 2]] = grid\n","    out[:, 4*face_w:5*face_w, 1] = 0.5\n","\n","    # Down face (y = -0.5)\n","    out[:, 5*face_w:6*face_w, [0, 2]] = grid\n","    out[:, 5*face_w:6*face_w, 1] = -0.5\n","\n","    return out"],"metadata":{"id":"hRcW9Mu85JoA"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def xyz2uv(xyz):\n","    x, y, z = np.split(xyz, 3, axis=-1)\n","    u = np.arctan2(x, z)\n","    c = np.sqrt(x**2 + z**2)\n","    v = np.arctan2(y, c)\n","    return np.concatenate([u, v], axis=-1)"],"metadata":{"id":"lAeo99RX5Kgg"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def uv2coor(uv, h, w):\n","    u, v = np.split(uv, 2, axis=-1)\n","    coor_x = (u / (2 * np.pi) + 0.5) * w - 0.5\n","    coor_y = (-v / np.pi + 0.5) * h - 0.5\n","    return np.concatenate([coor_x, coor_y], axis=-1)"],"metadata":{"id":"BJUGvdSW5MKH"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def sample_equirec(e_img, coor_xy):\n","    w = e_img.shape[1]\n","    coor_x, coor_y = np.split(coor_xy, 2, axis=-1)\n","    pad_u = np.roll(e_img[[0]], w // 2, 1)\n","    pad_d = np.roll(e_img[[-1]], w // 2, 1)\n","    e_img = np.concatenate([e_img, pad_d, pad_u], 0)\n","    return map_coordinates(e_img, [coor_y, coor_x], order=1, mode='wrap')[..., 0]"],"metadata":{"id":"WLWs1oDk5OFJ"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["#Functions for saliency output"],"metadata":{"id":"_S-NtD-p832H"}},{"cell_type":"code","source":["def getGaborKernel(gaborparams, angle, phase):\n","    gp = gaborparams\n","    major_sd = gp['stddev']\n","    minor_sd = major_sd * gp['elongation']\n","    max_sd = max(major_sd, minor_sd)\n","\n","    sz = gp['filterSize']\n","    if sz == -1:\n","        sz = math.ceil(max_sd * math.sqrt(10))\n","    else:\n","        sz = math.floor(sz / 2)\n","\n","    psi = np.pi / 180 * phase\n","    rtDeg = np.pi / 180 * angle\n","\n","    omega = 2 * np.pi / gp['filterPeriod']\n","    co = math.cos(rtDeg)\n","    si = -math.sin(rtDeg)\n","    major_sigq = 2 * pow(major_sd, 2)\n","    minor_sigq = 2 * pow(minor_sd, 2)\n","\n","    vec = range(-int(sz), int(sz) + 1)\n","    vlen = len(vec)\n","    vco = [i * co for i in vec]\n","    vsi = [i * si for i in vec]\n","\n","    a = np.tile(np.asarray(vco).transpose(), (vlen, 1)).transpose()\n","    b = np.matlib.repmat(vsi, vlen, 1)\n","    major = a + b\n","    major2 = np.power(major, 2)\n","\n","    a = np.tile(np.asarray(vsi).transpose(), (vlen, 1)).transpose()\n","    b = np.matlib.repmat(vco, vlen, 1)\n","    minor = a + b\n","    minor2 = np.power(minor, 2)\n","\n","    a = np.cos(omega * major + psi)\n","    b = np.exp(-major2 / major_sigq - minor2 / minor_sigq)\n","    result = np.multiply(a, b)\n","\n","    filter1 = np.subtract(result, np.mean(result.reshape(-1)))\n","    filter1 = np.divide(filter1, np.sqrt(np.sum(np.power(filter1.reshape(-1), 2))))\n","    return filter1"],"metadata":{"id":"NYOqgfBl54wP"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def getGaborKernels(gaborparams, thetas):\n","    gaborKernels = {}\n","    for th in thetas:\n","        gaborKernels[th] = {}\n","        gaborKernels[th]['0'] = getGaborKernel(gaborparams, th, 0)\n","        gaborKernels[th]['90'] = getGaborKernel(gaborparams, th, 90)\n","\n","    return gaborKernels"],"metadata":{"id":"Lu_J8vya597u"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def compute(r, g, b, L):\n","    min_rg = np.minimum(r, g)\n","    b_min_rg = np.abs(np.subtract(b, min_rg))\n","    CBY = np.divide(b_min_rg, L, out=np.zeros_like(L), where=L != 0)\n","\n","    r_g = np.abs(np.subtract(r,g))\n","    CRG = np.divide(r_g, L, out=np.zeros_like(L), where=L != 0)\n","\n","    featMaps = {}\n","    featMaps['CBY'] = CBY\n","    featMaps['CRG'] = CRG\n","    featMaps['L'] = L\n","    return featMaps"],"metadata":{"id":"O527nOHN6DE8"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def orientcompute(L, gaborparams, thetas):\n","    kernels = getGaborKernels(gaborparams, thetas)\n","    featMaps = []\n","    for th in thetas:\n","        kernel_0  = kernels[th]['0']\n","        kernel_90 = kernels[th]['90']\n","        o1 = cv2.filter2D(L, -1, kernel_0, borderType=cv2.BORDER_REPLICATE)\n","        o2 = cv2.filter2D(L, -1, kernel_90, borderType=cv2.BORDER_REPLICATE)\n","        o = np.add(abs(o1), abs(o2))\n","        featMaps.append(o)\n","\n","    return featMaps"],"metadata":{"id":"U6zKULAG6FVJ"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def loadGraphDistanceMatrixFor28x32():\n","    f = scipy.io.loadmat(\"/dir/My Drive/Design_Credit/Additional Files/28__32__m__2.mat\")\n","    distanceMat = np.array(f['grframe'])[0][0][0]\n","    lx = np.array(f['grframe'])[0][0][1]\n","    dim = np.array(f['grframe'])[0][0][2]\n","    return [distanceMat, lx, dim]"],"metadata":{"id":"_IZkftbb6HTQ"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def solve(mat, tolerance):\n","    w,h = mat.shape\n","    diff = 1\n","    v = np.divide(np.ones((w, 1), dtype=np.float32), w)\n","    oldv = v\n","    oldoldv = v\n","\n","    while diff > tolerance :\n","        oldv = v\n","        oldoldv = oldv\n","        v = np.dot(mat,v)\n","        diff = np.linalg.norm(oldv - v, ord=2)\n","        s = sum(v)\n","        if s>=0 and s< np.inf:\n","            continue\n","        else:\n","            v = oldoldv\n","            break\n","\n","    v = np.divide(v, sum(v))\n","\n","    return v"],"metadata":{"id":"Xv_KLkHh6J9j"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def getPyramids(image, max_level):\n","    imagePyr = [cv2.pyrDown(image)]\n","    for i in range(1, max_level):\n","        # imagePyr.append(cv2.resize(p, (32, 28), interpolation=cv2.INTER_CUBIC))\n","        imagePyr.append(cv2.pyrDown(imagePyr[i-1]))\n","    return imagePyr[1:]"],"metadata":{"id":"F2D794iP69wG"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def calculateFeatureMaps(r, g, b, L, params):\n","    colorMaps = compute(r, g, b, L)\n","    orientationMaps = orientcompute(L, params['gaborparams'], params['thetas'])\n","    allFeatureMaps = {\n","        0: colorMaps['CBY'],\n","        1: colorMaps['CRG'],\n","        2: colorMaps['L'],\n","        3: orientationMaps\n","    }\n","    return allFeatureMaps"],"metadata":{"id":"jAxtYwJg6LxD"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def calculate(map, sigma):\n","    [distanceMat, _, _] = loadGraphDistanceMatrixFor28x32()\n","    denom = 2 * pow(sigma, 2)\n","    expr = -np.divide(distanceMat, denom)\n","    Fab = np.exp(expr)\n","\n","    map_linear = np.ravel(map, order='F')  # column major\n","\n","    state_transition_matrix = Fab * np.abs(\n","        (np.zeros((distanceMat.shape[0], distanceMat.shape[1])) + map_linear).T - map_linear).T\n","\n","    norm_STM = sklearn.preprocessing.normalize(state_transition_matrix, axis=0, norm='l1')\n","\n","    eVec = solve(norm_STM, 0.0001)\n","    processed_reshaped = np.reshape(eVec, map.shape, order='F')\n","\n","    return processed_reshaped"],"metadata":{"id":"g-l05PeR6VjB"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def normalize(map, sigma):\n","    [distanceMat, _, _] = loadGraphDistanceMatrixFor28x32()\n","    denom = 2 * pow(sigma, 2)\n","    expr = -np.divide(distanceMat, denom)\n","    Fab = np.exp(expr)\n","\n","    map_linear = np.ravel(map, order='F')\n","    state_transition_matrix = (Fab.T * np.abs(map_linear)).T\n","\n","    norm_STM = sklearn.preprocessing.normalize(state_transition_matrix, axis=0, norm='l1')\n","\n","    eVec = solve(norm_STM, 0.0001)\n","    processed_reshaped = np.reshape(eVec, map.shape, order='F')\n","\n","    return processed_reshaped"],"metadata":{"id":"cSnOG9Bt6WRD"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def run(image, params):\n","    b = image[:,:,0]\n","    g = image[:,:,1]\n","    r = image[:,:,2]\n","    L = np.maximum(np.maximum(r, g), b)\n","\n","    b_pyr = getPyramids(b, params['max_level'])\n","    g_pyr = getPyramids(g, params['max_level'])\n","    r_pyr = getPyramids(r, params['max_level'])\n","    L_pyr = getPyramids(L, params['max_level'])\n","\n","    featMaps = {\n","        0: [],\n","        1: [],\n","        2: [],\n","        3: []\n","    }\n","\n","    for i in range(0, len(b_pyr)):\n","        p_r = r_pyr[i]\n","        p_g = g_pyr[i]\n","        p_b = b_pyr[i]\n","        p_L = L_pyr[i]\n","\n","        maps = calculateFeatureMaps(p_r, p_g, p_b, p_L, params)\n","\n","        for i in range(0,3):\n","            resized_m = cv2.resize(maps[i], (32, 28), interpolation=cv2.INTER_CUBIC)\n","            featMaps[i].append(resized_m)\n","\n","        for m in maps[3]:\n","            resized_m = cv2.resize(m, (32, 28), interpolation=cv2.INTER_CUBIC)\n","            featMaps[3].append(resized_m)\n","\n","    activationMaps = []\n","    activation_sigma = params['sigma_frac_act']*np.mean([32, 28])\n","\n","    for i in range(0,4):\n","        for map in featMaps[i]:\n","            activationMaps.append(calculate(map, activation_sigma))\n","\n","    normalisedActivationMaps = []\n","    normalisation_sigma = params['sigma_frac_norm']*np.mean([32, 28])\n","\n","    for map in activationMaps:\n","        normalisedActivationMaps.append(normalize(map, normalisation_sigma))\n","\n","    mastermap = normalisedActivationMaps[0]\n","    for i in range(1, len(normalisedActivationMaps)):\n","        mastermap = np.add(normalisedActivationMaps[i], mastermap)\n","\n","    gray = cv2.normalize(mastermap, None, alpha=0, beta=1, norm_type=cv2.NORM_MINMAX, dtype=cv2.CV_32F)\n","    mastermap_res = cv2.resize(gray, (image.shape[1], image.shape[0]), interpolation=cv2.INTER_CUBIC)\n","\n","    return mastermap_res"],"metadata":{"id":"02_cEtqN6YbJ"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def NormalizeData(data):\n","    return ((data - np.min(data)) / (np.max(data) - np.min(data)))"],"metadata":{"id":"PTgR3TUQ6_j3"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def saliency(image, params):\n","  return NormalizeData(run(image/255.0, params))"],"metadata":{"id":"rGPYJmNk6_u_"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["#Reverse mapping"],"metadata":{"id":"JO4txdAj9J35"}},{"cell_type":"code","source":["def cube_dice2h(cube_dice):\n","    w = cube_dice.shape[0] // 3\n","    #assert cube_dice.shape[0] == w * 3 and cube_dice.shape[1] == w * 4\n","    cube_h = np.zeros((w, w * 6, cube_dice.shape[2]), dtype=cube_dice.dtype)\n","    # Order: F R B L U D\n","    sxy = [(1, 1), (2, 1), (3, 1), (0, 1), (1, 0), (1, 2)]\n","    for i, (sx, sy) in enumerate(sxy):\n","        face = cube_dice[sy*w:(sy+1)*w, sx*w:(sx+1)*w]\n","        if i in [1, 2]:\n","            face = np.flip(face, axis=1)\n","        if i == 4:\n","            face = np.flip(face, axis=0)\n","        cube_h[:, i*w:(i+1)*w] = face\n","    return cube_h"],"metadata":{"id":"njVDxtqu77fY"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def equirect_uvgrid(h, w):\n","    u = np.linspace(-np.pi, np.pi, num=w, dtype=np.float32)\n","    v = np.linspace(np.pi, -np.pi, num=h, dtype=np.float32) / 2\n","\n","    return np.stack(np.meshgrid(u, v), axis=-1)"],"metadata":{"id":"6vS55-0w7841"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def equirect_facetype(h, w):\n","    tp = np.roll(np.arange(4).repeat(w // 4)[None, :].repeat(h, 0), 3 * w // 8, 1)\n","\n","    # Prepare ceil mask\n","    mask = np.zeros((h, w // 4), np.bool)\n","    idx = np.linspace(-np.pi, np.pi, w // 4) / 4\n","    idx = h // 2 - np.round(np.arctan(np.cos(idx)) * h / np.pi).astype(int)\n","    for i, j in enumerate(idx):\n","        mask[:j, i] = 1\n","    mask = np.roll(np.concatenate([mask] * 4, 1), 3 * w // 8, 1)\n","\n","    tp[mask] = 4\n","    tp[np.flip(mask, 0)] = 5\n","\n","    return tp.astype(np.int32)"],"metadata":{"id":"y62WPmW777ix"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def sample_cubefaces(cube_faces, tp, coor_y, coor_x):\n","    cube_faces = cube_faces.copy()\n","    cube_faces[1] = np.flip(cube_faces[1], 1)\n","    cube_faces[2] = np.flip(cube_faces[2], 1)\n","    cube_faces[4] = np.flip(cube_faces[4], 0)\n","\n","    # Pad up down\n","    pad_ud = np.zeros((6, 2, cube_faces.shape[2]))\n","    pad_ud[0, 0] = cube_faces[5, 0, :]\n","    pad_ud[0, 1] = cube_faces[4, -1, :]\n","    pad_ud[1, 0] = cube_faces[5, :, -1]\n","    pad_ud[1, 1] = cube_faces[4, ::-1, -1]\n","    pad_ud[2, 0] = cube_faces[5, -1, ::-1]\n","    pad_ud[2, 1] = cube_faces[4, 0, ::-1]\n","    pad_ud[3, 0] = cube_faces[5, ::-1, 0]\n","    pad_ud[3, 1] = cube_faces[4, :, 0]\n","    pad_ud[4, 0] = cube_faces[0, 0, :]\n","    pad_ud[4, 1] = cube_faces[2, 0, ::-1]\n","    pad_ud[5, 0] = cube_faces[2, -1, ::-1]\n","    pad_ud[5, 1] = cube_faces[0, -1, :]\n","    cube_faces = np.concatenate([cube_faces, pad_ud], 1)\n","\n","    # Pad left right\n","    pad_lr = np.zeros((6, cube_faces.shape[1], 2))\n","    pad_lr[0, :, 0] = cube_faces[1, :, 0]\n","    pad_lr[0, :, 1] = cube_faces[3, :, -1]\n","    pad_lr[1, :, 0] = cube_faces[2, :, 0]\n","    pad_lr[1, :, 1] = cube_faces[0, :, -1]\n","    pad_lr[2, :, 0] = cube_faces[3, :, 0]\n","    pad_lr[2, :, 1] = cube_faces[1, :, -1]\n","    pad_lr[3, :, 0] = cube_faces[0, :, 0]\n","    pad_lr[3, :, 1] = cube_faces[2, :, -1]\n","    pad_lr[4, 1:-1, 0] = cube_faces[1, 0, ::-1]\n","    pad_lr[4, 1:-1, 1] = cube_faces[3, 0, :]\n","    pad_lr[5, 1:-1, 0] = cube_faces[1, -2, :]\n","    pad_lr[5, 1:-1, 1] = cube_faces[3, -2, ::-1]\n","    cube_faces = np.concatenate([cube_faces, pad_lr], 2)\n","\n","    return map_coordinates(cube_faces, [tp, coor_y, coor_x], order=1, mode='wrap')"],"metadata":{"id":"Lkox-OwN8BZ1"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def c2e(cubemap, h, w, mode='bilinear', cube_format='dice'):\n","    if mode == 'bilinear':\n","        order = 1\n","    elif mode == 'nearest':\n","        order = 0\n","    else:\n","        raise NotImplementedError('unknown mode')\n","\n","    if cube_format == 'horizon':\n","        pass\n","    elif cube_format == 'dice':\n","        cubemap = cube_dice2h(cubemap)\n","    else:\n","        raise NotImplementedError('unknown cube_format')\n","    assert len(cubemap.shape) == 3\n","    assert cubemap.shape[0] * 6 == cubemap.shape[1]\n","    assert w % 8 == 0\n","    face_w = cubemap.shape[0]\n","\n","    uv = equirect_uvgrid(h, w)\n","    u, v = np.split(uv, 2, axis=-1)\n","    u = u[..., 0]\n","    v = v[..., 0]\n","    cube_faces = np.stack(np.split(cubemap, 6, 1), 0)\n","\n","    # Get face id to each pixel: 0F 1R 2B 3L 4U 5D\n","    tp = equirect_facetype(h, w)\n","    coor_x = np.zeros((h, w))\n","    coor_y = np.zeros((h, w))\n","\n","    for i in range(4):\n","        mask = (tp == i)\n","        coor_x[mask] = 0.5 * np.tan(u[mask] - np.pi * i / 2)\n","        coor_y[mask] = -0.5 * np.tan(v[mask]) / np.cos(u[mask] - np.pi * i / 2)\n","\n","    mask = (tp == 4)\n","    c = 0.5 * np.tan(np.pi / 2 - v[mask])\n","    coor_x[mask] = c * np.sin(u[mask])\n","    coor_y[mask] = c * np.cos(u[mask])\n","\n","    mask = (tp == 5)\n","    c = 0.5 * np.tan(np.pi / 2 - np.abs(v[mask]))\n","    coor_x[mask] = c * np.sin(u[mask])\n","    coor_y[mask] = -c * np.cos(u[mask])\n","\n","    # Final renormalize\n","    coor_x = (np.clip(coor_x, -0.5, 0.5) + 0.5) * face_w\n","    coor_y = (np.clip(coor_y, -0.5, 0.5) + 0.5) * face_w\n","\n","    equirec = np.stack([sample_cubefaces(cube_faces[..., i], tp, coor_y, coor_x) for i in range(cube_faces.shape[3]) ], axis=-1)\n","\n","    return equirec"],"metadata":{"id":"Q_FarVJI8ERM"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def cube_h2list(cube_h):\n","    assert cube_h.shape[0] * 6 == cube_h.shape[1]\n","    return np.split(cube_h, 6, axis=1)"],"metadata":{"id":"wdjPph0i8GUt"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def cube_h2dice(cube_h):\n","    assert cube_h.shape[0] * 6 == cube_h.shape[1]\n","    w = cube_h.shape[0]\n","    if(len(cube_h.shape)==3):\n","      cube_dice = np.zeros((w * 3, w * 4, cube_h.shape[2]), dtype=cube_h.dtype)\n","    else:\n","      cube_dice = np.zeros((w * 3, w * 4), dtype=cube_h.dtype)\n","    cube_list = cube_h2list(cube_h)\n","    # Order: F R B L U D\n","    sxy = [(1, 1), (2, 1), (3, 1), (0, 1), (1, 0), (1, 2)]\n","    for i, (sx, sy) in enumerate(sxy):\n","        face = cube_list[i]\n","        if i in [1, 2]:\n","            face = np.flip(face, axis=1)\n","        if i == 4:\n","            face = np.flip(face, axis=0)\n","        cube_dice[sy*w:(sy+1)*w, sx*w:(sx+1)*w] = face\n","    return cube_dice"],"metadata":{"id":"Z7jo48hK8LtT"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["#Functions for comparisions"],"metadata":{"id":"kV-wbROn9XxD"}},{"cell_type":"code","source":["def normalize_metric(x, method='standard', axis=None):\n","\tx = np.array(x, copy=False)\n","\tif axis is not None:\n","\t\ty = np.rollaxis(x, axis).reshape([x.shape[axis], -1])\n","\t\tshape = np.ones(len(x.shape))\n","\t\tshape[axis] = x.shape[axis]\n","\t\tif method == 'standard':\n","\t\t\tres = (x - np.mean(y, axis=1).reshape(shape)) / np.std(y, axis=1).reshape(shape)\n","\t\telif method == 'range':\n","\t\t\tres = (x - np.min(y, axis=1).reshape(shape)) / (np.max(y, axis=1) - np.min(y, axis=1)).reshape(shape)\n","\t\telif method == 'sum':\n","\t\t\tres = x / np.float_(np.sum(y, axis=1).reshape(shape))\n","\t\telse:\n","\t\t\traise ValueError('method not in {\"standard\", \"range\", \"sum\"}')\n","\telse:\n","\t\tif method == 'standard':\n","\t\t\tres = (x - np.mean(x)) / np.std(x)\n","\t\telif method == 'range':\n","\t\t\tres = (x - np.min(x)) / (np.max(x) - np.min(x))\n","\t\telif method == 'sum':\n","\t\t\tres = x / float(np.sum(x))\n","\t\telse:\n","\t\t\traise ValueError('method not in {\"standard\", \"range\", \"sum\"}')\n","\treturn res"],"metadata":{"id":"jNWWq0AY8OKA"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def KLD(p, q):\n","\tp = normalize_metric(p, method='sum')\n","\tq = normalize_metric(q, method='sum')\n","\treturn np.sum(np.where(p != 0, p * np.log((p+EPSILON) / (q+EPSILON)), 0))"],"metadata":{"id":"IrxB8DjY8T-B"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def CC(saliency_map1, saliency_map2):\n","\tmap1 = np.array(saliency_map1, copy=False)\n","\tmap2 = np.array(saliency_map2, copy=False)\n","\tif map1.shape != map2.shape:\n","\t\tmap1 = resize(map1, map2.shape, order=3, mode='constant') \n","\tmap1 = normalize_metric(map1, method='standard')\n","\tmap2 = normalize_metric(map2, method='standard')\n","\treturn np.corrcoef(map1.ravel(), map2.ravel())[0,1]"],"metadata":{"id":"SR5jWksY8Vvy"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def SIM(saliency_map1, saliency_map2):\n","\tmap1 = np.array(saliency_map1, copy=False)\n","\tmap2 = np.array(saliency_map2, copy=False)\n","\tif map1.shape != map2.shape:\n","\t\tmap1 = resize(map1, map2.shape, order=3, mode='constant') \n","\tmap1 = normalize_metric(map1, method='range')\n","\tmap2 = normalize_metric(map2, method='range')\n","\tmap1 = normalize_metric(map1, method='sum')\n","\tmap2 = normalize_metric(map2, method='sum')\n","\tintersection = np.minimum(map1, map2)\n","\treturn np.sum(intersection)"],"metadata":{"id":"QagwZ1gP8Y6S"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def jsd(p, q, base=np.e):\n","\treturn sp.spatial.distance.jensenshannon(p.flatten(),q.flatten())"],"metadata":{"id":"isdLlCG78Zhy"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["#Main function"],"metadata":{"id":"it7DZWy69ezb"}},{"cell_type":"code","source":["gaborparams = {\n","        'stddev': 2,\n","        'elongation': 2,\n","        'filterSize': -1,\n","        'filterPeriod': np.pi\n","}\n","\n","params = {\n","        'gaborparams': gaborparams,\n","        'sigma_frac_act': 0.15,\n","        'sigma_frac_norm': 0.06,\n","        'max_level': 4,\n","        'thetas': [0, 45, 90, 135]\n","}"],"metadata":{"id":"DINqgmM554nW"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def function(image, compare, params=params ,height=1024, width=2048):\n","\n","  var=xyzcube(256)\n","  var=xyz2uv(var)\n","  coor_xy = uv2coor(var, height, width)\n","  cubemap = np.stack([sample_equirec(image[..., i], coor_xy) for i in range(3)], axis=-1)\n","  front, right, bottom, left, up, down =np.split(cubemap, 6, axis=1)\n","\n","  l=[ [front, \"Front\"] , [right, 'Right'] , [bottom, \"Bottom\"] , [left, \"Left\"] , [up, \"Up\"] , [down, \"Down\"] ]\n","  eqr=image\n","  \n","  flip=np.zeros([height, width, 3])\n","  flip[:,0:width//2,:] = eqr[:, width//2:,:]\n","  flip[:,width//2:,:] = eqr[:,0:width//2,:]\n","\n","  eqr_s=saliency(eqr, params)\n","\n","  temp=saliency(flip, params)\n","  flip_s=np.zeros([height, width])\n","  flip_s[:,0:width//2] = temp[:, width//2:]\n","  flip_s[:,width//2:] = temp[:,0:width//2]\n","\n","  face_weight=[0.55, 0.2, 0.01, 0.2, 0.02, 0.02]\n","  l_s=[ [\"\", \"Front\"] , [\"\", \"Right\"] , [\"\", \"Bottom\"] , [\"\", \"Left\"] , [\"\", \"Up\"] , [\"\", \"Down\"] ]\n","  for i in range(6):\n","    l_s[i][0]=saliency(l[i][0], params)*face_weight[i]\n","\n","  for i in l_s:\n","    i[0]=i[0][..., np.newaxis]\n","\n","    cube_list=[l_s[i][0] for i in range(6)]\n","\n","  cube_sal=np.concatenate(cube_list, axis=1)\n","  cmpsal = cube_h2dice(cube_sal)\n","  face_s=NormalizeData(c2e(cmpsal,height,width,'bilinear','dice'))\n","  output1=np.squeeze(face_s,axis=(2,))\n","  output2=flip_s\n","  output3=eqr_s\n","\n","  output=np.zeros([height, width])\n","  for i in range(height):\n","    for j in range(width):\n","      output[i][j]=max(output1[i][j], output2[i][j], output2[i][j])\n","\n","  return (KLD(output,compare),CC(output,compare),SIM(output,compare),jsd(output,compare))\n"],"metadata":{"id":"1d9lDnxu5RnP"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# Processing"],"metadata":{"id":"T8A7l03r99_n"}},{"cell_type":"code","source":["dataset_url = \"/dir/My Drive/Design_Credit/Data_Set/Sorted_Stimuli/*\"\n","salmap_url = \"/dir/My Drive/Design_Credit/Data_Set/Sorted_SalMap/*.png\""],"metadata":{"id":"UTRdZ8pW3O3g"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["col1=[img for img in glob.glob(dataset_url) ]\n","col2=[map for map in glob.glob(salmap_url) ]\n","col1.sort()\n","col2.sort()"],"metadata":{"id":"HyDymXXD-JqS"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["height=1024\n","width=2048"],"metadata":{"id":"lzvEUAHL-K0h"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":[""],"metadata":{"id":"HoA89xkQCwlN"}},{"cell_type":"code","source":["#train_data=[]\n","for i in range(85):\n","  image=np.asarray(PIL.Image.open(col1[i]))\n","  salMap=np.asarray(PIL.Image.open(col2[i]))\n","  array_input=((image - np.min(image)) / (np.max(image) - np.min(image)))\n","\n","  image=cv2.resize(array_input, dsize=(width, height))\n","  compare=cv2.cvtColor(salMap,cv2.COLOR_BGR2GRAY)\n","  result=function(image,compare, params)\n","\n","  print(\"KLD = \",result[0],end='\\t')\n","  print(\"CC = \",result[1],end='\\t')\n","  print(\"SIM = \",result[2],end='\\t')\n","  print(\"jsd = \",result[3],end='\\t')\n","  print()\n","\n","  #train_data.append([cv2.resize(array_input, dsize=(width, height), interpolation=cv2.INTER_CUBIC), cv2.cvtColor(salMap,cv2.COLOR_BGR2GRAY)])\n","#train_data=pd.DataFrame(train_data, columns=['image', 'output'], index=None)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"j4EgglI0-NVh","executionInfo":{"status":"ok","timestamp":1639692759097,"user_tz":-330,"elapsed":1892607,"user":{"displayName":"Diksha Jena (B20CS013)","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"03488940742474601522"}},"outputId":"3e50edbf-78dc-492d-fd25-803f77e88998"},"execution_count":null,"outputs":[{"metadata":{"tags":null},"name":"stdout","output_type":"stream","text":["KLD =  0.2515997204099646\tCC =  0.5416557170444298\tSIM =  0.5786829501597085\tjsd =  0.25677205972735706\t\n","KLD =  0.3363584911128308\tCC =  0.5053652279434303\tSIM =  0.580541087163092\tjsd =  0.2918740782606503\t\n","KLD =  0.32460739069713873\tCC =  0.7752385081775707\tSIM =  0.6665937431929212\tjsd =  0.29672582951761506\t\n","KLD =  0.23618430397782414\tCC =  0.6539022562455418\tSIM =  0.6244693651608643\tjsd =  0.2491223296177307\t\n","KLD =  0.21581088302091653\tCC =  0.5022634948330336\tSIM =  0.6116182475034025\tjsd =  0.23704739009393408\t\n","KLD =  0.2881291513508895\tCC =  0.18973786620877234\tSIM =  0.5732244827993374\tjsd =  0.2692320854014854\t\n","KLD =  0.3136145872047702\tCC =  0.7058554813304649\tSIM =  0.6627507313060593\tjsd =  0.28884773975435196\t\n","KLD =  0.1826621221041062\tCC =  0.4454288792805057\tSIM =  0.6716518638889674\tjsd =  0.2185074161919199\t\n","KLD =  0.17394804104759073\tCC =  0.7159817157775028\tSIM =  0.6299249842411061\tjsd =  0.21510211078110192\t\n","KLD =  0.2561611666974785\tCC =  0.7244186212347546\tSIM =  0.7175206854564674\tjsd =  0.2610387659744457\t\n","KLD =  0.22663061687896283\tCC =  0.4900116737605108\tSIM =  0.5442414146654924\tjsd =  0.24658107385488362\t\n","KLD =  0.27561758841330736\tCC =  0.5044041098672658\tSIM =  0.5684334220063135\tjsd =  0.25797228871518474\t\n","KLD =  0.189255050432373\tCC =  0.21750279977800135\tSIM =  0.5990136013373626\tjsd =  0.2256907372918167\t\n","KLD =  0.16374349037618507\tCC =  0.6053742436877408\tSIM =  0.6786584155613191\tjsd =  0.2082013332475367\t\n","KLD =  0.18370903770054897\tCC =  0.7742471698958197\tSIM =  0.6044180973620075\tjsd =  0.22363315580074117\t\n","KLD =  0.30293780505362955\tCC =  0.7144946520449795\tSIM =  0.5997898268519748\tjsd =  0.287419244677654\t\n"]},{"metadata":{"tags":null},"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.7/dist-packages/PIL/Image.py:2800: DecompressionBombWarning: Image size (128000000 pixels) exceeds limit of 89478485 pixels, could be decompression bomb DOS attack.\n","  DecompressionBombWarning,\n"]},{"output_type":"stream","name":"stdout","text":["KLD =  0.10768820352068044\tCC =  0.5062072143603144\tSIM =  0.6885797433452256\tjsd =  0.16564447077947456\t\n","KLD =  0.16828137896968817\tCC =  0.6395790924466807\tSIM =  0.6650119141709752\tjsd =  0.21096109590624085\t\n","KLD =  0.2292080557478847\tCC =  0.7512021538081807\tSIM =  0.660951433451051\tjsd =  0.24745499932451961\t\n","KLD =  0.2871132171084712\tCC =  0.6966576852594696\tSIM =  0.7021949613875941\tjsd =  0.2751689833132215\t\n","KLD =  0.1969977281939478\tCC =  0.6097316125082991\tSIM =  0.5870053323636016\tjsd =  0.23029740943432409\t\n","KLD =  0.28972708293359556\tCC =  0.6890052921127371\tSIM =  0.6781910063031633\tjsd =  0.2739323693355491\t\n","KLD =  0.20091526809425123\tCC =  0.29249408522383585\tSIM =  0.619337256951954\tjsd =  0.2280320989702262\t\n","KLD =  0.14243975793356842\tCC =  0.6902666029218605\tSIM =  0.6951400102102584\tjsd =  0.19631429451129287\t\n","KLD =  0.2521120696129928\tCC =  0.48333944401678436\tSIM =  0.5523332552098579\tjsd =  0.2555179293639254\t\n","KLD =  0.16900208393453636\tCC =  0.4862586151479774\tSIM =  0.688649084885397\tjsd =  0.20788295750628288\t\n","KLD =  0.33970461066149493\tCC =  0.735741179098501\tSIM =  0.665276012585815\tjsd =  0.3007535150227026\t\n","KLD =  0.2306848497240721\tCC =  0.7010945417793587\tSIM =  0.6502144085211017\tjsd =  0.2473276355650487\t\n","KLD =  0.2968741803821165\tCC =  0.6100162735216643\tSIM =  0.6246968372580507\tjsd =  0.27752596354442377\t\n","KLD =  0.22513115809253273\tCC =  0.7568601884873193\tSIM =  0.6066422987033142\tjsd =  0.24397675826799847\t\n","KLD =  0.22054674992405748\tCC =  0.7209018280181729\tSIM =  0.6202139770155936\tjsd =  0.23811386755980032\t\n","KLD =  0.33078208959914307\tCC =  0.7018094759310216\tSIM =  0.6044566147076134\tjsd =  0.29293747787927793\t\n","KLD =  0.23356302885380292\tCC =  0.5217718055953859\tSIM =  0.5895648771674301\tjsd =  0.24469063496005056\t\n","KLD =  0.26890668404375917\tCC =  0.6846855162691319\tSIM =  0.6893065113380616\tjsd =  0.2704987470191787\t\n","KLD =  0.18641301094836726\tCC =  0.5384770940607964\tSIM =  0.6684381278946632\tjsd =  0.22002214555591387\t\n","KLD =  0.2933099752574179\tCC =  0.36757244947091544\tSIM =  0.6047813299690251\tjsd =  0.264474523697727\t\n","KLD =  0.27649809552878063\tCC =  0.6728665178995665\tSIM =  0.6766563225558274\tjsd =  0.263539315485011\t\n","KLD =  0.1441955254347226\tCC =  0.49231078571169645\tSIM =  0.5863914191985672\tjsd =  0.195018538243299\t\n","KLD =  0.20385696895345226\tCC =  0.6750795004206525\tSIM =  0.6872479580537297\tjsd =  0.2409018036835968\t\n","KLD =  0.3046506182392259\tCC =  0.6145124491673988\tSIM =  0.6295003293865091\tjsd =  0.28329380077575006\t\n","KLD =  0.16776236022065988\tCC =  0.5872496583272705\tSIM =  0.6544889388601897\tjsd =  0.20975250874632426\t\n","KLD =  0.21360416429816378\tCC =  0.7089812842575244\tSIM =  0.7081520589279602\tjsd =  0.24154696807004963\t\n","KLD =  0.24076530463045578\tCC =  0.5596272155152561\tSIM =  0.5788349330757677\tjsd =  0.24631106737640276\t\n","KLD =  0.17918909608921615\tCC =  0.7002466769851288\tSIM =  0.712440386462763\tjsd =  0.2204975087032257\t\n","KLD =  0.2843418398197189\tCC =  0.5404303188946734\tSIM =  0.6248937105415578\tjsd =  0.2713592332177928\t\n","KLD =  0.13896435087156903\tCC =  0.37070255648255496\tSIM =  0.6296435911588488\tjsd =  0.18726685797898524\t\n","KLD =  0.23135978585204842\tCC =  0.4669400869072593\tSIM =  0.6232276050644247\tjsd =  0.25240230875219805\t\n","KLD =  0.1942279839198831\tCC =  0.3816806697401631\tSIM =  0.5501257896068931\tjsd =  0.2248305038254587\t\n","KLD =  0.17926676388610613\tCC =  0.683217289408785\tSIM =  0.6074194872542915\tjsd =  0.2214561754918809\t\n","KLD =  0.199744184766767\tCC =  0.5206295763714031\tSIM =  0.6932580166188332\tjsd =  0.23030789426442852\t\n","KLD =  0.2417311258097959\tCC =  0.755738981377733\tSIM =  0.656778233523726\tjsd =  0.25566685768257125\t\n","KLD =  0.1772886513976979\tCC =  0.665022812599899\tSIM =  0.6875658327454668\tjsd =  0.21552384624929283\t\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/PIL/Image.py:2800: DecompressionBombWarning: Image size (168031112 pixels) exceeds limit of 89478485 pixels, could be decompression bomb DOS attack.\n","  DecompressionBombWarning,\n"]},{"output_type":"stream","name":"stdout","text":["KLD =  0.25309921584041584\tCC =  0.8125338016270207\tSIM =  0.6597782604267131\tjsd =  0.26552627470427975\t\n","KLD =  0.1714683388269122\tCC =  0.6510556676181464\tSIM =  0.7498724646141155\tjsd =  0.21077681024231723\t\n","KLD =  0.1710178162205424\tCC =  0.6826537179637631\tSIM =  0.7107175111348144\tjsd =  0.21524058132631094\t\n","KLD =  0.28010639266517345\tCC =  0.650122278425766\tSIM =  0.6183538788557844\tjsd =  0.27400667102693854\t\n","KLD =  0.28957384832015187\tCC =  0.747036104175748\tSIM =  0.6601768680723757\tjsd =  0.2776498860892188\t\n","KLD =  0.17384099422857865\tCC =  0.5617527678462713\tSIM =  0.6380891668309409\tjsd =  0.2125257806943773\t\n","KLD =  0.25373944309829816\tCC =  0.6821652196872567\tSIM =  0.6664112637505245\tjsd =  0.261060389836186\t\n","KLD =  0.17580096959993888\tCC =  0.6479008379507365\tSIM =  0.7048940842967902\tjsd =  0.21514575403721584\t\n","KLD =  0.1867409829250872\tCC =  0.562453065257261\tSIM =  0.6463042478027821\tjsd =  0.22299053892414428\t\n","KLD =  0.21053046080084903\tCC =  0.5031039285886606\tSIM =  0.659942612564561\tjsd =  0.23758342796786874\t\n","KLD =  0.21891752105544895\tCC =  0.6958951410930437\tSIM =  0.6652874370441688\tjsd =  0.24394187554259036\t\n","KLD =  0.15994238157364823\tCC =  0.4677687811380235\tSIM =  0.6037281539897401\tjsd =  0.2009789721490153\t\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/PIL/Image.py:2800: DecompressionBombWarning: Image size (166786848 pixels) exceeds limit of 89478485 pixels, could be decompression bomb DOS attack.\n","  DecompressionBombWarning,\n"]},{"output_type":"stream","name":"stdout","text":["KLD =  0.22863435568891297\tCC =  0.7067625085751248\tSIM =  0.7087195078182984\tjsd =  0.24641878182204252\t\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/PIL/Image.py:2800: DecompressionBombWarning: Image size (166348800 pixels) exceeds limit of 89478485 pixels, could be decompression bomb DOS attack.\n","  DecompressionBombWarning,\n"]},{"output_type":"stream","name":"stdout","text":["KLD =  0.2911105657548717\tCC =  0.6656376953229569\tSIM =  0.6459233238261745\tjsd =  0.2737187935764097\t\n","KLD =  0.17281405423692822\tCC =  0.5435437748923099\tSIM =  0.5477113837742826\tjsd =  0.21181736985567406\t\n","KLD =  0.2811308330517933\tCC =  0.7535803920579918\tSIM =  0.659901740538079\tjsd =  0.2712165355295079\t\n","KLD =  0.32081308884173176\tCC =  0.740116803134723\tSIM =  0.648039038158039\tjsd =  0.2895095187301145\t\n","KLD =  0.21559692273803607\tCC =  0.5605437256503545\tSIM =  0.642542907259144\tjsd =  0.23446025987717806\t\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/PIL/Image.py:2800: DecompressionBombWarning: Image size (134217728 pixels) exceeds limit of 89478485 pixels, could be decompression bomb DOS attack.\n","  DecompressionBombWarning,\n"]},{"output_type":"stream","name":"stdout","text":["KLD =  0.21276230194240128\tCC =  0.7246467264036541\tSIM =  0.5889541685816017\tjsd =  0.2399435687043652\t\n","KLD =  0.14463588234578428\tCC =  0.6957835034315888\tSIM =  0.5679753604458685\tjsd =  0.19564601650686908\t\n","KLD =  0.1907266297745675\tCC =  0.6488612243146948\tSIM =  0.6484075290752374\tjsd =  0.22274343786450249\t\n","KLD =  0.15526250507184228\tCC =  0.620888205206333\tSIM =  0.6959480794554501\tjsd =  0.20372448322707148\t\n","KLD =  0.27215724700522304\tCC =  0.6201225857740701\tSIM =  0.6446380772426207\tjsd =  0.2705479072338894\t\n","KLD =  0.1928117887605435\tCC =  0.6279587914273926\tSIM =  0.6699413440745174\tjsd =  0.22371023030625953\t\n","KLD =  0.31020516592023256\tCC =  0.5474924043609739\tSIM =  0.6246930239119227\tjsd =  0.2851675109548171\t\n","KLD =  0.18663386452909805\tCC =  0.3880023121107406\tSIM =  0.5893686942545192\tjsd =  0.22177466413866057\t\n","KLD =  0.22262783654851598\tCC =  0.6198196294486209\tSIM =  0.6300448831258829\tjsd =  0.24629209848483635\t\n","KLD =  0.20527600916629762\tCC =  0.40363519163650624\tSIM =  0.5537539549225344\tjsd =  0.22924604542430624\t\n","KLD =  0.26987570539750033\tCC =  0.7712365050341696\tSIM =  0.6720739811588519\tjsd =  0.27028253933144236\t\n","KLD =  0.1808580354871502\tCC =  0.5877833894358897\tSIM =  0.6283814802595608\tjsd =  0.2177636285679497\t\n","KLD =  0.2685680267850545\tCC =  0.7033377173380065\tSIM =  0.6643323856685441\tjsd =  0.2746827517129679\t\n","KLD =  0.19717442266281682\tCC =  0.6159756465942493\tSIM =  0.6658482927406585\tjsd =  0.22533119413886837\t\n","KLD =  0.26992298220043354\tCC =  0.2539393304709299\tSIM =  0.5902111915878792\tjsd =  0.26050425302829777\t\n"]}]},{"cell_type":"code","source":["'''for index in train_data.index:\n","    result=function(train_data['image'][index], train_data['output'][index], params)\n","    print(\"KLD = \",result[0],end='\\t')\n","    print(\"CC = \",result[1],end='\\t')\n","    print(\"SIM = \",result[2],end='\\t')\n","    print(\"jsd = \",result[3],end='\\t')\n","    print()\n","'''"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"mPRlCPKd-Xxl","executionInfo":{"status":"ok","timestamp":1639692759100,"user_tz":-330,"elapsed":7,"user":{"displayName":"Diksha Jena (B20CS013)","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"03488940742474601522"}},"outputId":"6305966c-3ba1-4536-b047-08b1261ac7e6"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"},"text/plain":["'for index in train_data.index:\\n    result=function(train_data[\\'image\\'][index], train_data[\\'output\\'][index], params)\\n    print(\"KLD = \",result[0],end=\\'\\t\\')\\n    print(\"CC = \",result[1],end=\\'\\t\\')\\n    print(\"SIM = \",result[2],end=\\'\\t\\')\\n    print(\"jsd = \",result[3],end=\\'\\t\\')\\n    print()\\n'"]},"metadata":{},"execution_count":39}]},{"cell_type":"code","source":[""],"metadata":{"id":"twc8dT8Z_Hio"},"execution_count":null,"outputs":[]}]}