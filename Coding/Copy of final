{"cells":[{"cell_type":"markdown","metadata":{"id":"qRo48Wph9039"},"source":["# Connections and libraries"]},{"cell_type":"code","execution_count":1,"metadata":{"id":"qzlUboSlzVwn","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1640965852081,"user_tz":-330,"elapsed":3533,"user":{"displayName":"Diksha Jena (B20CS013)","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"03488940742474601522"}},"outputId":"3c386147-4299-4ce6-c4e4-995310ff756b"},"outputs":[{"output_type":"stream","name":"stdout","text":["Drive already mounted at /dir; to attempt to forcibly remount, call drive.mount(\"/dir\", force_remount=True).\n"]}],"source":["from google.colab import drive\n","drive.mount(\"/dir\")"]},{"cell_type":"code","execution_count":41,"metadata":{"id":"AHOZE7qrWXqz","executionInfo":{"status":"ok","timestamp":1640969639886,"user_tz":-330,"elapsed":1653,"user":{"displayName":"Diksha Jena (B20CS013)","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"03488940742474601522"}}},"outputs":[],"source":["from google.colab import auth\n","auth.authenticate_user()\n","\n","import gspread\n","from oauth2client.client import GoogleCredentials\n","\n","gc = gspread.authorize(GoogleCredentials.get_application_default())\n","\n","#sh = gc.create('Result')\n","\n","# Open our new sheet and add some data.\n","worksheet = gc.open('Result').sheet1"]},{"cell_type":"code","execution_count":3,"metadata":{"id":"TLgaqZIJ3L6O","executionInfo":{"status":"ok","timestamp":1640965853766,"user_tz":-330,"elapsed":465,"user":{"displayName":"Diksha Jena (B20CS013)","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"03488940742474601522"}}},"outputs":[],"source":["#import glob\n","import numpy as np\n","import pandas as pd\n","\n","import PIL\n","import matplotlib.pyplot as plt\n","\n","from scipy.ndimage import map_coordinates\n","import scipy.io\n","import scipy as sp\n","import sklearn.preprocessing\n","from skimage.transform import resize\n","import numpy.matlib\n","import math\n","\n","import cv2\n","import os,re, glob\n","from functools import partial\n","\n","EPSILON = np.finfo('float').eps\n","%matplotlib inline"]},{"cell_type":"code","execution_count":4,"metadata":{"id":"4M2PVW3S4HHo","executionInfo":{"status":"ok","timestamp":1640965853767,"user_tz":-330,"elapsed":6,"user":{"displayName":"Diksha Jena (B20CS013)","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"03488940742474601522"}}},"outputs":[],"source":["#code required"]},{"cell_type":"markdown","metadata":{"id":"UpyDnBWD8yrf"},"source":["#Functions for cubemap conversion"]},{"cell_type":"code","execution_count":5,"metadata":{"id":"hRcW9Mu85JoA","executionInfo":{"status":"ok","timestamp":1640965854470,"user_tz":-330,"elapsed":708,"user":{"displayName":"Diksha Jena (B20CS013)","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"03488940742474601522"}}},"outputs":[],"source":["def xyzcube(face_w):\n","    '''\n","    Return the xyz cordinates of the unit cube in [F R B L U D] format.\n","    '''\n","    out = np.zeros((face_w, face_w * 6, 3), np.float32)\n","    rng = np.linspace(-0.5, 0.5, num=face_w, dtype=np.float32)\n","    grid = np.stack(np.meshgrid(rng, -rng), -1)\n","\n","    # Front face (z = 0.5)\n","    out[:, 0*face_w:1*face_w, [0, 1]] = grid\n","    out[:, 0*face_w:1*face_w, 2] = 0.5\n","\n","    # Right face (x = 0.5)\n","    out[:, 1*face_w:2*face_w, [2, 1]] = grid\n","    out[:, 1*face_w:2*face_w, 0] = 0.5\n","\n","    # Back face (z = -0.5)\n","    out[:, 2*face_w:3*face_w, [0, 1]] = grid\n","    out[:, 2*face_w:3*face_w, 2] = -0.5\n","\n","    # Left face (x = -0.5)\n","    out[:, 3*face_w:4*face_w, [2, 1]] = grid\n","    out[:, 3*face_w:4*face_w, 0] = -0.5\n","\n","    # Up face (y = 0.5)\n","    out[:, 4*face_w:5*face_w, [0, 2]] = grid\n","    out[:, 4*face_w:5*face_w, 1] = 0.5\n","\n","    # Down face (y = -0.5)\n","    out[:, 5*face_w:6*face_w, [0, 2]] = grid\n","    out[:, 5*face_w:6*face_w, 1] = -0.5\n","\n","    return out"]},{"cell_type":"code","execution_count":6,"metadata":{"id":"lAeo99RX5Kgg","executionInfo":{"status":"ok","timestamp":1640965854471,"user_tz":-330,"elapsed":14,"user":{"displayName":"Diksha Jena (B20CS013)","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"03488940742474601522"}}},"outputs":[],"source":["def xyz2uv(xyz):\n","    x, y, z = np.split(xyz, 3, axis=-1)\n","    u = np.arctan2(x, z)\n","    c = np.sqrt(x**2 + z**2)\n","    v = np.arctan2(y, c)\n","    return np.concatenate([u, v], axis=-1)"]},{"cell_type":"code","execution_count":7,"metadata":{"id":"BJUGvdSW5MKH","executionInfo":{"status":"ok","timestamp":1640965854472,"user_tz":-330,"elapsed":14,"user":{"displayName":"Diksha Jena (B20CS013)","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"03488940742474601522"}}},"outputs":[],"source":["def uv2coor(uv, h, w):\n","    u, v = np.split(uv, 2, axis=-1)\n","    coor_x = (u / (2 * np.pi) + 0.5) * w - 0.5\n","    coor_y = (-v / np.pi + 0.5) * h - 0.5\n","    return np.concatenate([coor_x, coor_y], axis=-1)"]},{"cell_type":"code","execution_count":8,"metadata":{"id":"WLWs1oDk5OFJ","executionInfo":{"status":"ok","timestamp":1640965854472,"user_tz":-330,"elapsed":13,"user":{"displayName":"Diksha Jena (B20CS013)","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"03488940742474601522"}}},"outputs":[],"source":["def sample_equirec(e_img, coor_xy):\n","    w = e_img.shape[1]\n","    coor_x, coor_y = np.split(coor_xy, 2, axis=-1)\n","    pad_u = np.roll(e_img[[0]], w // 2, 1)\n","    pad_d = np.roll(e_img[[-1]], w // 2, 1)\n","    e_img = np.concatenate([e_img, pad_d, pad_u], 0)\n","    return map_coordinates(e_img, [coor_y, coor_x], order=1, mode='wrap')[..., 0]"]},{"cell_type":"markdown","metadata":{"id":"_S-NtD-p832H"},"source":["#Functions for saliency output"]},{"cell_type":"code","execution_count":9,"metadata":{"id":"NYOqgfBl54wP","executionInfo":{"status":"ok","timestamp":1640965854473,"user_tz":-330,"elapsed":13,"user":{"displayName":"Diksha Jena (B20CS013)","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"03488940742474601522"}}},"outputs":[],"source":["def getGaborKernel(gaborparams, angle, phase):\n","    gp = gaborparams\n","    major_sd = gp['stddev']\n","    minor_sd = major_sd * gp['elongation']\n","    max_sd = max(major_sd, minor_sd)\n","\n","    sz = gp['filterSize']\n","    if sz == -1:\n","        sz = math.ceil(max_sd * math.sqrt(10))\n","    else:\n","        sz = math.floor(sz / 2)\n","\n","    psi = np.pi / 180 * phase\n","    rtDeg = np.pi / 180 * angle\n","\n","    omega = 2 * np.pi / gp['filterPeriod']\n","    co = math.cos(rtDeg)\n","    si = -math.sin(rtDeg)\n","    major_sigq = 2 * pow(major_sd, 2)\n","    minor_sigq = 2 * pow(minor_sd, 2)\n","\n","    vec = range(-int(sz), int(sz) + 1)\n","    vlen = len(vec)\n","    vco = [i * co for i in vec]\n","    vsi = [i * si for i in vec]\n","\n","    a = np.tile(np.asarray(vco).transpose(), (vlen, 1)).transpose()\n","    b = np.matlib.repmat(vsi, vlen, 1)\n","    major = a + b\n","    major2 = np.power(major, 2)\n","\n","    a = np.tile(np.asarray(vsi).transpose(), (vlen, 1)).transpose()\n","    b = np.matlib.repmat(vco, vlen, 1)\n","    minor = a + b\n","    minor2 = np.power(minor, 2)\n","\n","    a = np.cos(omega * major + psi)\n","    b = np.exp(-major2 / major_sigq - minor2 / minor_sigq)\n","    result = np.multiply(a, b)\n","\n","    filter1 = np.subtract(result, np.mean(result.reshape(-1)))\n","    filter1 = np.divide(filter1, np.sqrt(np.sum(np.power(filter1.reshape(-1), 2))))\n","    return filter1"]},{"cell_type":"code","execution_count":10,"metadata":{"id":"Lu_J8vya597u","executionInfo":{"status":"ok","timestamp":1640965854474,"user_tz":-330,"elapsed":14,"user":{"displayName":"Diksha Jena (B20CS013)","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"03488940742474601522"}}},"outputs":[],"source":["def getGaborKernels(gaborparams, thetas):\n","    gaborKernels = {}\n","    for th in thetas:\n","        gaborKernels[th] = {}\n","        gaborKernels[th]['0'] = getGaborKernel(gaborparams, th, 0)\n","        gaborKernels[th]['90'] = getGaborKernel(gaborparams, th, 90)\n","\n","    return gaborKernels"]},{"cell_type":"code","execution_count":11,"metadata":{"id":"O527nOHN6DE8","executionInfo":{"status":"ok","timestamp":1640965854474,"user_tz":-330,"elapsed":13,"user":{"displayName":"Diksha Jena (B20CS013)","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"03488940742474601522"}}},"outputs":[],"source":["def compute(r, g, b, L):\n","    min_rg = np.minimum(r, g)\n","    b_min_rg = np.abs(np.subtract(b, min_rg))\n","    CBY = np.divide(b_min_rg, L, out=np.zeros_like(L), where=L != 0)\n","\n","    r_g = np.abs(np.subtract(r,g))\n","    CRG = np.divide(r_g, L, out=np.zeros_like(L), where=L != 0)\n","\n","    featMaps = {}\n","    featMaps['CBY'] = CBY\n","    featMaps['CRG'] = CRG\n","    featMaps['L'] = L\n","    return featMaps"]},{"cell_type":"code","execution_count":12,"metadata":{"id":"U6zKULAG6FVJ","executionInfo":{"status":"ok","timestamp":1640965854475,"user_tz":-330,"elapsed":14,"user":{"displayName":"Diksha Jena (B20CS013)","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"03488940742474601522"}}},"outputs":[],"source":["def orientcompute(L, gaborparams, thetas):\n","    kernels = getGaborKernels(gaborparams, thetas)\n","    featMaps = []\n","    for th in thetas:\n","        kernel_0  = kernels[th]['0']\n","        kernel_90 = kernels[th]['90']\n","        o1 = cv2.filter2D(L, -1, kernel_0, borderType=cv2.BORDER_REPLICATE)\n","        o2 = cv2.filter2D(L, -1, kernel_90, borderType=cv2.BORDER_REPLICATE)\n","        o = np.add(abs(o1), abs(o2))\n","        featMaps.append(o)\n","\n","    return featMaps"]},{"cell_type":"code","execution_count":13,"metadata":{"id":"_IZkftbb6HTQ","executionInfo":{"status":"ok","timestamp":1640965854475,"user_tz":-330,"elapsed":13,"user":{"displayName":"Diksha Jena (B20CS013)","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"03488940742474601522"}}},"outputs":[],"source":["def loadGraphDistanceMatrixFor28x32():\n","    f = scipy.io.loadmat(\"/dir/My Drive/Design_Credit/Additional Files/28__32__m__2.mat\")\n","    distanceMat = np.array(f['grframe'])[0][0][0]\n","    lx = np.array(f['grframe'])[0][0][1]\n","    dim = np.array(f['grframe'])[0][0][2]\n","    return [distanceMat, lx, dim]"]},{"cell_type":"code","execution_count":14,"metadata":{"id":"Xv_KLkHh6J9j","executionInfo":{"status":"ok","timestamp":1640965854476,"user_tz":-330,"elapsed":14,"user":{"displayName":"Diksha Jena (B20CS013)","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"03488940742474601522"}}},"outputs":[],"source":["def solve(mat, tolerance):\n","    w,h = mat.shape\n","    diff = 1\n","    v = np.divide(np.ones((w, 1), dtype=np.float32), w)\n","    oldv = v\n","    oldoldv = v\n","\n","    while diff > tolerance :\n","        oldv = v\n","        oldoldv = oldv\n","        v = np.dot(mat,v)\n","        diff = np.linalg.norm(oldv - v, ord=2)\n","        s = sum(v)\n","        if s>=0 and s< np.inf:\n","            continue\n","        else:\n","            v = oldoldv\n","            break\n","\n","    v = np.divide(v, sum(v))\n","\n","    return v"]},{"cell_type":"code","execution_count":15,"metadata":{"id":"F2D794iP69wG","executionInfo":{"status":"ok","timestamp":1640965854477,"user_tz":-330,"elapsed":15,"user":{"displayName":"Diksha Jena (B20CS013)","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"03488940742474601522"}}},"outputs":[],"source":["def getPyramids(image, max_level):\n","    imagePyr = [cv2.pyrDown(image)]\n","    for i in range(1, max_level):\n","        # imagePyr.append(cv2.resize(p, (32, 28), interpolation=cv2.INTER_CUBIC))\n","        imagePyr.append(cv2.pyrDown(imagePyr[i-1]))\n","    return imagePyr[1:]"]},{"cell_type":"code","execution_count":16,"metadata":{"id":"jAxtYwJg6LxD","executionInfo":{"status":"ok","timestamp":1640965854478,"user_tz":-330,"elapsed":15,"user":{"displayName":"Diksha Jena (B20CS013)","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"03488940742474601522"}}},"outputs":[],"source":["def calculateFeatureMaps(r, g, b, L, params):\n","    colorMaps = compute(r, g, b, L)\n","    orientationMaps = orientcompute(L, params['gaborparams'], params['thetas'])\n","    allFeatureMaps = {\n","        0: colorMaps['CBY'],\n","        1: colorMaps['CRG'],\n","        2: colorMaps['L'],\n","        3: orientationMaps\n","    }\n","    return allFeatureMaps"]},{"cell_type":"code","execution_count":17,"metadata":{"id":"g-l05PeR6VjB","executionInfo":{"status":"ok","timestamp":1640965854900,"user_tz":-330,"elapsed":437,"user":{"displayName":"Diksha Jena (B20CS013)","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"03488940742474601522"}}},"outputs":[],"source":["def calculate(map, sigma):\n","    [distanceMat, _, _] = loadGraphDistanceMatrixFor28x32()\n","    denom = 2 * pow(sigma, 2)\n","    expr = -np.divide(distanceMat, denom)\n","    Fab = np.exp(expr)\n","\n","    map_linear = np.ravel(map, order='F')  # column major\n","\n","    state_transition_matrix = Fab * np.abs(\n","        (np.zeros((distanceMat.shape[0], distanceMat.shape[1])) + map_linear).T - map_linear).T\n","\n","    norm_STM = sklearn.preprocessing.normalize(state_transition_matrix, axis=0, norm='l1')\n","\n","    eVec = solve(norm_STM, 0.0001)\n","    processed_reshaped = np.reshape(eVec, map.shape, order='F')\n","\n","    return processed_reshaped"]},{"cell_type":"code","execution_count":18,"metadata":{"id":"cSnOG9Bt6WRD","executionInfo":{"status":"ok","timestamp":1640965854900,"user_tz":-330,"elapsed":17,"user":{"displayName":"Diksha Jena (B20CS013)","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"03488940742474601522"}}},"outputs":[],"source":["def normalize(map, sigma):\n","    [distanceMat, _, _] = loadGraphDistanceMatrixFor28x32()\n","    denom = 2 * pow(sigma, 2)\n","    expr = -np.divide(distanceMat, denom)\n","    Fab = np.exp(expr)\n","\n","    map_linear = np.ravel(map, order='F')\n","    state_transition_matrix = (Fab.T * np.abs(map_linear)).T\n","\n","    norm_STM = sklearn.preprocessing.normalize(state_transition_matrix, axis=0, norm='l1')\n","\n","    eVec = solve(norm_STM, 0.0001)\n","    processed_reshaped = np.reshape(eVec, map.shape, order='F')\n","\n","    return processed_reshaped"]},{"cell_type":"code","execution_count":19,"metadata":{"id":"02_cEtqN6YbJ","executionInfo":{"status":"ok","timestamp":1640965854901,"user_tz":-330,"elapsed":17,"user":{"displayName":"Diksha Jena (B20CS013)","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"03488940742474601522"}}},"outputs":[],"source":["def run(image, params):\n","    b = image[:,:,0]\n","    g = image[:,:,1]\n","    r = image[:,:,2]\n","    L = np.maximum(np.maximum(r, g), b)\n","\n","    b_pyr = getPyramids(b, params['max_level'])\n","    g_pyr = getPyramids(g, params['max_level'])\n","    r_pyr = getPyramids(r, params['max_level'])\n","    L_pyr = getPyramids(L, params['max_level'])\n","\n","    featMaps = {\n","        0: [],\n","        1: [],\n","        2: [],\n","        3: []\n","    }\n","\n","    for i in range(0, len(b_pyr)):\n","        p_r = r_pyr[i]\n","        p_g = g_pyr[i]\n","        p_b = b_pyr[i]\n","        p_L = L_pyr[i]\n","\n","        maps = calculateFeatureMaps(p_r, p_g, p_b, p_L, params)\n","\n","        for i in range(0,3):\n","            resized_m = cv2.resize(maps[i], (32, 28), interpolation=cv2.INTER_CUBIC)\n","            featMaps[i].append(resized_m)\n","\n","        for m in maps[3]:\n","            resized_m = cv2.resize(m, (32, 28), interpolation=cv2.INTER_CUBIC)\n","            featMaps[3].append(resized_m)\n","\n","    activationMaps = []\n","    activation_sigma = params['sigma_frac_act']*np.mean([32, 28])\n","\n","    for i in range(0,4):\n","        for map in featMaps[i]:\n","            activationMaps.append(calculate(map, activation_sigma))\n","\n","    normalisedActivationMaps = []\n","    normalisation_sigma = params['sigma_frac_norm']*np.mean([32, 28])\n","\n","    for map in activationMaps:\n","        normalisedActivationMaps.append(normalize(map, normalisation_sigma))\n","\n","    mastermap = normalisedActivationMaps[0]\n","    for i in range(1, len(normalisedActivationMaps)):\n","        mastermap = np.add(normalisedActivationMaps[i], mastermap)\n","\n","    gray = cv2.normalize(mastermap, None, alpha=0, beta=1, norm_type=cv2.NORM_MINMAX, dtype=cv2.CV_32F)\n","    mastermap_res = cv2.resize(gray, (image.shape[1], image.shape[0]), interpolation=cv2.INTER_CUBIC)\n","\n","    return mastermap_res"]},{"cell_type":"code","execution_count":20,"metadata":{"id":"PTgR3TUQ6_j3","executionInfo":{"status":"ok","timestamp":1640965854901,"user_tz":-330,"elapsed":17,"user":{"displayName":"Diksha Jena (B20CS013)","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"03488940742474601522"}}},"outputs":[],"source":["def NormalizeData(data):\n","  if(np.max(data)>255.0 or np.min(data)<0.0):\n","    return ((data - np.min(data)) / (np.max(data) - np.min(data)))\n","  else:\n","    return data"]},{"cell_type":"code","execution_count":21,"metadata":{"id":"rGPYJmNk6_u_","executionInfo":{"status":"ok","timestamp":1640965854902,"user_tz":-330,"elapsed":17,"user":{"displayName":"Diksha Jena (B20CS013)","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"03488940742474601522"}}},"outputs":[],"source":["def saliency(image, params):\n","  return NormalizeData(run(image/255.0, params))*255.0"]},{"cell_type":"markdown","metadata":{"id":"JO4txdAj9J35"},"source":["#Reverse mapping"]},{"cell_type":"code","execution_count":22,"metadata":{"id":"njVDxtqu77fY","executionInfo":{"status":"ok","timestamp":1640965854902,"user_tz":-330,"elapsed":17,"user":{"displayName":"Diksha Jena (B20CS013)","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"03488940742474601522"}}},"outputs":[],"source":["def cube_dice2h(cube_dice):\n","    w = cube_dice.shape[0] // 3\n","    #assert cube_dice.shape[0] == w * 3 and cube_dice.shape[1] == w * 4\n","    cube_h = np.zeros((w, w * 6, cube_dice.shape[2]), dtype=cube_dice.dtype)\n","    # Order: F R B L U D\n","    sxy = [(1, 1), (2, 1), (3, 1), (0, 1), (1, 0), (1, 2)]\n","    for i, (sx, sy) in enumerate(sxy):\n","        face = cube_dice[sy*w:(sy+1)*w, sx*w:(sx+1)*w]\n","        if i in [1, 2]:\n","            face = np.flip(face, axis=1)\n","        if i == 4:\n","            face = np.flip(face, axis=0)\n","        cube_h[:, i*w:(i+1)*w] = face\n","    return cube_h"]},{"cell_type":"code","execution_count":23,"metadata":{"id":"6vS55-0w7841","executionInfo":{"status":"ok","timestamp":1640965854903,"user_tz":-330,"elapsed":17,"user":{"displayName":"Diksha Jena (B20CS013)","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"03488940742474601522"}}},"outputs":[],"source":["def equirect_uvgrid(h, w):\n","    u = np.linspace(-np.pi, np.pi, num=w, dtype=np.float32)\n","    v = np.linspace(np.pi, -np.pi, num=h, dtype=np.float32) / 2\n","\n","    return np.stack(np.meshgrid(u, v), axis=-1)"]},{"cell_type":"code","execution_count":24,"metadata":{"id":"y62WPmW777ix","executionInfo":{"status":"ok","timestamp":1640965854903,"user_tz":-330,"elapsed":17,"user":{"displayName":"Diksha Jena (B20CS013)","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"03488940742474601522"}}},"outputs":[],"source":["def equirect_facetype(h, w):\n","    tp = np.roll(np.arange(4).repeat(w // 4)[None, :].repeat(h, 0), 3 * w // 8, 1)\n","\n","    # Prepare ceil mask\n","    mask = np.zeros((h, w // 4), np.bool)\n","    idx = np.linspace(-np.pi, np.pi, w // 4) / 4\n","    idx = h // 2 - np.round(np.arctan(np.cos(idx)) * h / np.pi).astype(int)\n","    for i, j in enumerate(idx):\n","        mask[:j, i] = 1\n","    mask = np.roll(np.concatenate([mask] * 4, 1), 3 * w // 8, 1)\n","\n","    tp[mask] = 4\n","    tp[np.flip(mask, 0)] = 5\n","\n","    return tp.astype(np.int32)"]},{"cell_type":"code","execution_count":25,"metadata":{"id":"Lkox-OwN8BZ1","executionInfo":{"status":"ok","timestamp":1640965854904,"user_tz":-330,"elapsed":17,"user":{"displayName":"Diksha Jena (B20CS013)","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"03488940742474601522"}}},"outputs":[],"source":["def sample_cubefaces(cube_faces, tp, coor_y, coor_x):\n","    cube_faces = cube_faces.copy()\n","    cube_faces[1] = np.flip(cube_faces[1], 1)\n","    cube_faces[2] = np.flip(cube_faces[2], 1)\n","    cube_faces[4] = np.flip(cube_faces[4], 0)\n","\n","    # Pad up down\n","    pad_ud = np.zeros((6, 2, cube_faces.shape[2]))\n","    pad_ud[0, 0] = cube_faces[5, 0, :]\n","    pad_ud[0, 1] = cube_faces[4, -1, :]\n","    pad_ud[1, 0] = cube_faces[5, :, -1]\n","    pad_ud[1, 1] = cube_faces[4, ::-1, -1]\n","    pad_ud[2, 0] = cube_faces[5, -1, ::-1]\n","    pad_ud[2, 1] = cube_faces[4, 0, ::-1]\n","    pad_ud[3, 0] = cube_faces[5, ::-1, 0]\n","    pad_ud[3, 1] = cube_faces[4, :, 0]\n","    pad_ud[4, 0] = cube_faces[0, 0, :]\n","    pad_ud[4, 1] = cube_faces[2, 0, ::-1]\n","    pad_ud[5, 0] = cube_faces[2, -1, ::-1]\n","    pad_ud[5, 1] = cube_faces[0, -1, :]\n","    cube_faces = np.concatenate([cube_faces, pad_ud], 1)\n","\n","    # Pad left right\n","    pad_lr = np.zeros((6, cube_faces.shape[1], 2))\n","    pad_lr[0, :, 0] = cube_faces[1, :, 0]\n","    pad_lr[0, :, 1] = cube_faces[3, :, -1]\n","    pad_lr[1, :, 0] = cube_faces[2, :, 0]\n","    pad_lr[1, :, 1] = cube_faces[0, :, -1]\n","    pad_lr[2, :, 0] = cube_faces[3, :, 0]\n","    pad_lr[2, :, 1] = cube_faces[1, :, -1]\n","    pad_lr[3, :, 0] = cube_faces[0, :, 0]\n","    pad_lr[3, :, 1] = cube_faces[2, :, -1]\n","    pad_lr[4, 1:-1, 0] = cube_faces[1, 0, ::-1]\n","    pad_lr[4, 1:-1, 1] = cube_faces[3, 0, :]\n","    pad_lr[5, 1:-1, 0] = cube_faces[1, -2, :]\n","    pad_lr[5, 1:-1, 1] = cube_faces[3, -2, ::-1]\n","    cube_faces = np.concatenate([cube_faces, pad_lr], 2)\n","\n","    return map_coordinates(cube_faces, [tp, coor_y, coor_x], order=1, mode='wrap')"]},{"cell_type":"code","execution_count":26,"metadata":{"id":"Q_FarVJI8ERM","executionInfo":{"status":"ok","timestamp":1640965854904,"user_tz":-330,"elapsed":17,"user":{"displayName":"Diksha Jena (B20CS013)","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"03488940742474601522"}}},"outputs":[],"source":["def c2e(cubemap, h, w, mode='bilinear', cube_format='dice'):\n","    if mode == 'bilinear':\n","        order = 1\n","    elif mode == 'nearest':\n","        order = 0\n","    else:\n","        raise NotImplementedError('unknown mode')\n","\n","    if cube_format == 'horizon':\n","        pass\n","    elif cube_format == 'dice':\n","        cubemap = cube_dice2h(cubemap)\n","    else:\n","        raise NotImplementedError('unknown cube_format')\n","    assert len(cubemap.shape) == 3\n","    assert cubemap.shape[0] * 6 == cubemap.shape[1]\n","    assert w % 8 == 0\n","    face_w = cubemap.shape[0]\n","\n","    uv = equirect_uvgrid(h, w)\n","    u, v = np.split(uv, 2, axis=-1)\n","    u = u[..., 0]\n","    v = v[..., 0]\n","    cube_faces = np.stack(np.split(cubemap, 6, 1), 0)\n","\n","    # Get face id to each pixel: 0F 1R 2B 3L 4U 5D\n","    tp = equirect_facetype(h, w)\n","    coor_x = np.zeros((h, w))\n","    coor_y = np.zeros((h, w))\n","\n","    for i in range(4):\n","        mask = (tp == i)\n","        coor_x[mask] = 0.5 * np.tan(u[mask] - np.pi * i / 2)\n","        coor_y[mask] = -0.5 * np.tan(v[mask]) / np.cos(u[mask] - np.pi * i / 2)\n","\n","    mask = (tp == 4)\n","    c = 0.5 * np.tan(np.pi / 2 - v[mask])\n","    coor_x[mask] = c * np.sin(u[mask])\n","    coor_y[mask] = c * np.cos(u[mask])\n","\n","    mask = (tp == 5)\n","    c = 0.5 * np.tan(np.pi / 2 - np.abs(v[mask]))\n","    coor_x[mask] = c * np.sin(u[mask])\n","    coor_y[mask] = -c * np.cos(u[mask])\n","\n","    # Final renormalize\n","    coor_x = (np.clip(coor_x, -0.5, 0.5) + 0.5) * face_w\n","    coor_y = (np.clip(coor_y, -0.5, 0.5) + 0.5) * face_w\n","\n","    equirec = np.stack([sample_cubefaces(cube_faces[..., i], tp, coor_y, coor_x) for i in range(cube_faces.shape[3]) ], axis=-1)\n","\n","    return equirec"]},{"cell_type":"code","execution_count":27,"metadata":{"id":"wdjPph0i8GUt","executionInfo":{"status":"ok","timestamp":1640965854905,"user_tz":-330,"elapsed":17,"user":{"displayName":"Diksha Jena (B20CS013)","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"03488940742474601522"}}},"outputs":[],"source":["def cube_h2list(cube_h):\n","    assert cube_h.shape[0] * 6 == cube_h.shape[1]\n","    return np.split(cube_h, 6, axis=1)"]},{"cell_type":"code","execution_count":28,"metadata":{"id":"Z7jo48hK8LtT","executionInfo":{"status":"ok","timestamp":1640965854906,"user_tz":-330,"elapsed":18,"user":{"displayName":"Diksha Jena (B20CS013)","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"03488940742474601522"}}},"outputs":[],"source":["def cube_h2dice(cube_h):\n","    assert cube_h.shape[0] * 6 == cube_h.shape[1]\n","    w = cube_h.shape[0]\n","    if(len(cube_h.shape)==3):\n","      cube_dice = np.zeros((w * 3, w * 4, cube_h.shape[2]), dtype=cube_h.dtype)\n","    else:\n","      cube_dice = np.zeros((w * 3, w * 4), dtype=cube_h.dtype)\n","    cube_list = cube_h2list(cube_h)\n","    # Order: F R B L U D\n","    sxy = [(1, 1), (2, 1), (3, 1), (0, 1), (1, 0), (1, 2)]\n","    for i, (sx, sy) in enumerate(sxy):\n","        face = cube_list[i]\n","        if i in [1, 2]:\n","            face = np.flip(face, axis=1)\n","        if i == 4:\n","            face = np.flip(face, axis=0)\n","        cube_dice[sy*w:(sy+1)*w, sx*w:(sx+1)*w] = face\n","    return cube_dice"]},{"cell_type":"markdown","metadata":{"id":"kV-wbROn9XxD"},"source":["#Functions for comparisions"]},{"cell_type":"code","execution_count":29,"metadata":{"id":"jNWWq0AY8OKA","executionInfo":{"status":"ok","timestamp":1640965854908,"user_tz":-330,"elapsed":19,"user":{"displayName":"Diksha Jena (B20CS013)","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"03488940742474601522"}}},"outputs":[],"source":["def normalize_metric(x, method='standard', axis=None):\n","\tx = np.array(x, copy=False)\n","\tif axis is not None:\n","\t\ty = np.rollaxis(x, axis).reshape([x.shape[axis], -1])\n","\t\tshape = np.ones(len(x.shape))\n","\t\tshape[axis] = x.shape[axis]\n","\t\tif method == 'standard':\n","\t\t\tres = (x - np.mean(y, axis=1).reshape(shape)) / np.std(y, axis=1).reshape(shape)\n","\t\telif method == 'range':\n","\t\t\tres = (x - np.min(y, axis=1).reshape(shape)) / (np.max(y, axis=1) - np.min(y, axis=1)).reshape(shape)\n","\t\telif method == 'sum':\n","\t\t\tres = x / np.float_(np.sum(y, axis=1).reshape(shape))\n","\t\telse:\n","\t\t\traise ValueError('method not in {\"standard\", \"range\", \"sum\"}')\n","\telse:\n","\t\tif method == 'standard':\n","\t\t\tres = (x - np.mean(x)) / np.std(x)\n","\t\telif method == 'range':\n","\t\t\tres = (x - np.min(x)) / (np.max(x) - np.min(x))\n","\t\telif method == 'sum':\n","\t\t\tres = x / float(np.sum(x))\n","\t\telse:\n","\t\t\traise ValueError('method not in {\"standard\", \"range\", \"sum\"}')\n","\treturn res"]},{"cell_type":"code","execution_count":30,"metadata":{"id":"IrxB8DjY8T-B","executionInfo":{"status":"ok","timestamp":1640965854909,"user_tz":-330,"elapsed":20,"user":{"displayName":"Diksha Jena (B20CS013)","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"03488940742474601522"}}},"outputs":[],"source":["def KLD(p, q):\n","\tp = normalize_metric(p, method='sum')\n","\tq = normalize_metric(q, method='sum')\n","\treturn np.sum(np.where(p != 0, p * np.log((p+EPSILON) / (q+EPSILON)), 0))"]},{"cell_type":"code","execution_count":31,"metadata":{"id":"SR5jWksY8Vvy","executionInfo":{"status":"ok","timestamp":1640965854909,"user_tz":-330,"elapsed":20,"user":{"displayName":"Diksha Jena (B20CS013)","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"03488940742474601522"}}},"outputs":[],"source":["def CC(saliency_map1, saliency_map2):\n","\tmap1 = np.array(saliency_map1, copy=False)\n","\tmap2 = np.array(saliency_map2, copy=False)\n","\tif map1.shape != map2.shape:\n","\t\tmap1 = resize(map1, map2.shape, order=3, mode='constant') \n","\tmap1 = normalize_metric(map1, method='standard')\n","\tmap2 = normalize_metric(map2, method='standard')\n","\treturn np.corrcoef(map1.ravel(), map2.ravel())[0,1]"]},{"cell_type":"code","execution_count":32,"metadata":{"id":"QagwZ1gP8Y6S","executionInfo":{"status":"ok","timestamp":1640965855480,"user_tz":-330,"elapsed":590,"user":{"displayName":"Diksha Jena (B20CS013)","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"03488940742474601522"}}},"outputs":[],"source":["def SIM(saliency_map1, saliency_map2):\n","\tmap1 = np.array(saliency_map1, copy=False)\n","\tmap2 = np.array(saliency_map2, copy=False)\n","\tif map1.shape != map2.shape:\n","\t\tmap1 = resize(map1, map2.shape, order=3, mode='constant') \n","\tmap1 = normalize_metric(map1, method='range')\n","\tmap2 = normalize_metric(map2, method='range')\n","\tmap1 = normalize_metric(map1, method='sum')\n","\tmap2 = normalize_metric(map2, method='sum')\n","\tintersection = np.minimum(map1, map2)\n","\treturn np.sum(intersection)"]},{"cell_type":"code","execution_count":33,"metadata":{"id":"isdLlCG78Zhy","executionInfo":{"status":"ok","timestamp":1640965855481,"user_tz":-330,"elapsed":11,"user":{"displayName":"Diksha Jena (B20CS013)","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"03488940742474601522"}}},"outputs":[],"source":["def jsd(p, q, base=np.e):\n","\treturn sp.spatial.distance.jensenshannon(p.flatten(),q.flatten())"]},{"cell_type":"markdown","metadata":{"id":"it7DZWy69ezb"},"source":["#Main function"]},{"cell_type":"code","execution_count":34,"metadata":{"id":"DINqgmM554nW","executionInfo":{"status":"ok","timestamp":1640965855481,"user_tz":-330,"elapsed":10,"user":{"displayName":"Diksha Jena (B20CS013)","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"03488940742474601522"}}},"outputs":[],"source":["gaborparams = {\n","        'stddev': 2,\n","        'elongation': 2,\n","        'filterSize': -1,\n","        'filterPeriod': np.pi\n","}\n","\n","params = {\n","        'gaborparams': gaborparams,\n","        'sigma_frac_act': 0.15,\n","        'sigma_frac_norm': 0.06,\n","        'max_level': 4,\n","        'thetas': [0, 45, 90, 135]\n","}"]},{"cell_type":"code","execution_count":35,"metadata":{"id":"1d9lDnxu5RnP","executionInfo":{"status":"ok","timestamp":1640965855482,"user_tz":-330,"elapsed":11,"user":{"displayName":"Diksha Jena (B20CS013)","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"03488940742474601522"}}},"outputs":[],"source":["def function(image, compare, params=params ,height=1024, width=2048):\n","\n","  var=xyzcube(256)\n","  var=xyz2uv(var)\n","  coor_xy = uv2coor(var, height, width)\n","  cubemap = np.stack([sample_equirec(image[..., i], coor_xy) for i in range(3)], axis=-1)\n","  front, right, bottom, left, up, down =np.split(cubemap, 6, axis=1)\n","\n","  l=[ [front, \"Front\"] , [right, 'Right'] , [bottom, \"Bottom\"] , [left, \"Left\"] , [up, \"Up\"] , [down, \"Down\"] ]\n","  eqr=image\n","  \n","  flip=np.zeros([height, width, 3])\n","  flip[:,0:width//2,:] = eqr[:, width//2:,:]\n","  flip[:,width//2:,:] = eqr[:,0:width//2,:]\n","\n","  eqr_s=saliency(eqr, params)\n","\n","  temp=saliency(flip, params)\n","  flip_s=np.zeros([height, width])\n","  flip_s[:,0:width//2] = temp[:, width//2:]\n","  flip_s[:,width//2:] = temp[:,0:width//2]\n","\n","  face_weight=[0.70, 0.1, 0.015, 0.1, 0.08, 0.005]\n","  l_s=[ [\"\", \"Front\"] , [\"\", \"Right\"] , [\"\", \"Bottom\"] , [\"\", \"Left\"] , [\"\", \"Up\"] , [\"\", \"Down\"] ]\n","  for i in range(6):\n","    l_s[i][0]=saliency(l[i][0], params)*face_weight[i]\n","\n","  for i in l_s:\n","    i[0]=i[0][..., np.newaxis]\n","\n","    cube_list=[l_s[i][0] for i in range(6)]\n","\n","  cube_sal=np.concatenate(cube_list, axis=1)\n","  cmpsal = cube_h2dice(cube_sal)\n","  face_s=NormalizeData(c2e(cmpsal,height,width,'bilinear','dice'))\n","  output1=np.squeeze(face_s,axis=(2,))\n","  output2=flip_s\n","  output3=eqr_s\n","\n","  output=np.zeros([height, width])\n","  for i in range(height):\n","    for j in range(width):\n","      output[i][j]=max(output1[i][j], output2[i][j], output2[i][j])\n","\n","  return (KLD(output,compare),CC(output,compare),SIM(output,compare),jsd(output,compare))\n"]},{"cell_type":"markdown","metadata":{"id":"T8A7l03r99_n"},"source":["# Processing"]},{"cell_type":"code","execution_count":36,"metadata":{"id":"UTRdZ8pW3O3g","executionInfo":{"status":"ok","timestamp":1640965855483,"user_tz":-330,"elapsed":12,"user":{"displayName":"Diksha Jena (B20CS013)","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"03488940742474601522"}}},"outputs":[],"source":["dataset_url = \"/dir/My Drive/Design_Credit/Data_Set/Sorted_Stimuli/*\"\n","salmap_url = \"/dir/My Drive/Design_Credit/Data_Set/Sorted_SalMap/*.png\""]},{"cell_type":"code","execution_count":37,"metadata":{"id":"HyDymXXD-JqS","executionInfo":{"status":"ok","timestamp":1640965855483,"user_tz":-330,"elapsed":11,"user":{"displayName":"Diksha Jena (B20CS013)","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"03488940742474601522"}}},"outputs":[],"source":["col1=[img for img in glob.glob(dataset_url) ]\n","col2=[map for map in glob.glob(salmap_url) ]\n","col1.sort()\n","col2.sort()"]},{"cell_type":"code","execution_count":38,"metadata":{"id":"lzvEUAHL-K0h","executionInfo":{"status":"ok","timestamp":1640965855484,"user_tz":-330,"elapsed":10,"user":{"displayName":"Diksha Jena (B20CS013)","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"03488940742474601522"}}},"outputs":[],"source":["height=1024\n","width=2048"]},{"cell_type":"code","execution_count":39,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"j4EgglI0-NVh","outputId":"a204be7a-f7cf-472f-fc61-5fafdb70e08d","executionInfo":{"status":"ok","timestamp":1640969616551,"user_tz":-330,"elapsed":3761076,"user":{"displayName":"Diksha Jena (B20CS013)","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"03488940742474601522"}}},"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/PIL/Image.py:2800: DecompressionBombWarning: Image size (128000000 pixels) exceeds limit of 89478485 pixels, could be decompression bomb DOS attack.\n","  DecompressionBombWarning,\n","/usr/local/lib/python3.7/dist-packages/PIL/Image.py:2800: DecompressionBombWarning: Image size (168031112 pixels) exceeds limit of 89478485 pixels, could be decompression bomb DOS attack.\n","  DecompressionBombWarning,\n","/usr/local/lib/python3.7/dist-packages/PIL/Image.py:2800: DecompressionBombWarning: Image size (166786848 pixels) exceeds limit of 89478485 pixels, could be decompression bomb DOS attack.\n","  DecompressionBombWarning,\n","/usr/local/lib/python3.7/dist-packages/PIL/Image.py:2800: DecompressionBombWarning: Image size (166348800 pixels) exceeds limit of 89478485 pixels, could be decompression bomb DOS attack.\n","  DecompressionBombWarning,\n","/usr/local/lib/python3.7/dist-packages/PIL/Image.py:2800: DecompressionBombWarning: Image size (134217728 pixels) exceeds limit of 89478485 pixels, could be decompression bomb DOS attack.\n","  DecompressionBombWarning,\n"]}],"source":["output=[]\n","for i in range(85):\n","  image=np.asarray(PIL.Image.open(col1[i]))\n","  salMap=np.asarray(PIL.Image.open(col2[i]))\n","  array_input=((image - np.min(image)) / (np.max(image) - np.min(image)))\n","\n","  image=cv2.resize(array_input, dsize=(width, height))\n","  compare=cv2.cvtColor(salMap,cv2.COLOR_BGR2GRAY)\n","  result=function(image,compare, params)\n","  output.append(result)\n","  #print(\"KLD = \",result[0],end='\\t')\n","  #print(\"CC = \",result[1],end='\\t')\n","  #print(\"SIM = \",result[2],end='\\t')\n","  #print(\"jsd = \",result[3],end='\\t')\n","  #print()\n","\n","  #train_data.append([cv2.resize(array_input, dsize=(width, height), interpolation=cv2.INTER_CUBIC), cv2.cvtColor(salMap,cv2.COLOR_BGR2GRAY)])\n","#train_data=pd.DataFrame(train_data, columns=['image', 'output'], index=None)"]},{"cell_type":"code","execution_count":42,"metadata":{"id":"ML4eXwuCT3v4","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1640969645096,"user_tz":-330,"elapsed":1032,"user":{"displayName":"Diksha Jena (B20CS013)","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"03488940742474601522"}},"outputId":"15ce47be-12bd-47c5-9d41-653644e11227"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["{'spreadsheetId': '1lWUE_Kptg8gz8ksQ60NGrDKnA9H-dkKUe0gfeB-pbmk',\n"," 'updatedCells': 340,\n"," 'updatedColumns': 4,\n"," 'updatedRange': 'Sheet1!A1:D85',\n"," 'updatedRows': 85}"]},"metadata":{},"execution_count":42}],"source":["cell_list = worksheet.range('A1:D85')\n","i=0\n","j=0\n","for cell in cell_list:\n","  cell.value = output[i][j]\n","  j+=1\n","  if(j==4):\n","    i+=1\n","    j=0\n","  \n","worksheet.update_cells(cell_list)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"V1inhB8ZU1ok","executionInfo":{"status":"aborted","timestamp":1640969617313,"user_tz":-330,"elapsed":769,"user":{"displayName":"Diksha Jena (B20CS013)","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"03488940742474601522"}}},"outputs":[],"source":["#end of it :)"]}],"metadata":{"colab":{"collapsed_sections":["UpyDnBWD8yrf","_S-NtD-p832H","JO4txdAj9J35","kV-wbROn9XxD","it7DZWy69ezb"],"name":"Copy of final","provenance":[{"file_id":"1pCrD0VkJlY52KwR3INgZhrNGant7x1BV","timestamp":1639689214894}],"authorship_tag":"ABX9TyNOn0FWjx5/nXDHLjqZsRq1"},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}