{"cells":[{"cell_type":"markdown","metadata":{"id":"xP7dIWS-Dtek"},"source":["###Connections and Libraries"]},{"cell_type":"code","execution_count":1,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":3264,"status":"ok","timestamp":1640590888322,"user":{"displayName":"Diksha Jena (B20CS013)","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"03488940742474601522"},"user_tz":-330},"id":"2GQ_RpmbDq-w","outputId":"da056fb8-8409-4a38-8abc-08a4c57b8a6a"},"outputs":[{"name":"stdout","output_type":"stream","text":["Drive already mounted at /dir; to attempt to forcibly remount, call drive.mount(\"/dir\", force_remount=True).\n"]}],"source":["from google.colab import drive\n","drive.mount(\"/dir\")"]},{"cell_type":"code","execution_count":2,"metadata":{"executionInfo":{"elapsed":2775,"status":"ok","timestamp":1640590891093,"user":{"displayName":"Diksha Jena (B20CS013)","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"03488940742474601522"},"user_tz":-330},"id":"p87exalkD3K2"},"outputs":[],"source":["from google.colab import auth\n","auth.authenticate_user()\n","\n","import gspread\n","from oauth2client.client import GoogleCredentials\n","\n","gc = gspread.authorize(GoogleCredentials.get_application_default())\n","\n","sh = gc.create('cut out - itti koch Result')\n","\n","# Open our new sheet and add some data.\n","worksheet = gc.open('cut out - itti koch Result').sheet1"]},{"cell_type":"code","execution_count":3,"metadata":{"executionInfo":{"elapsed":681,"status":"ok","timestamp":1640590891768,"user":{"displayName":"Diksha Jena (B20CS013)","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"03488940742474601522"},"user_tz":-330},"id":"sbOF1oR1D_Pj"},"outputs":[],"source":["#import glob\n","import numpy as np\n","import pandas as pd\n","\n","import PIL\n","import matplotlib.pyplot as plt\n","\n","from scipy.ndimage import map_coordinates\n","import scipy.io\n","import scipy as sp\n","import sklearn.preprocessing\n","from skimage.transform import resize\n","import numpy.matlib\n","import math\n","\n","import cv2\n","import os,re, glob\n","from functools import partial\n","\n","EPSILON = np.finfo('float').eps\n","%matplotlib inline"]},{"cell_type":"code","execution_count":4,"metadata":{"executionInfo":{"elapsed":5,"status":"ok","timestamp":1640590891769,"user":{"displayName":"Diksha Jena (B20CS013)","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"03488940742474601522"},"user_tz":-330},"id":"LA2RKOA_EBpz"},"outputs":[],"source":["#code required"]},{"cell_type":"markdown","metadata":{"id":"xujq9_YmEDbh"},"source":["### Functions for cubemap conversions"]},{"cell_type":"code","execution_count":5,"metadata":{"executionInfo":{"elapsed":2731,"status":"ok","timestamp":1640590894496,"user":{"displayName":"Diksha Jena (B20CS013)","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"03488940742474601522"},"user_tz":-330},"id":"jxMInr_NEJLC"},"outputs":[],"source":["def xyzcube(face_w):\n","    '''\n","    Return the xyz cordinates of the unit cube in [F R B L U D] format.\n","    '''\n","    out = np.zeros((face_w, face_w * 6, 3), np.float32)\n","    rng = np.linspace(-0.5, 0.5, num=face_w, dtype=np.float32)\n","    grid = np.stack(np.meshgrid(rng, -rng), -1)\n","\n","    # Front face (z = 0.5)\n","    out[:, 0*face_w:1*face_w, [0, 1]] = grid\n","    out[:, 0*face_w:1*face_w, 2] = 0.5\n","\n","    # Right face (x = 0.5)\n","    out[:, 1*face_w:2*face_w, [2, 1]] = grid\n","    out[:, 1*face_w:2*face_w, 0] = 0.5\n","\n","    # Back face (z = -0.5)\n","    out[:, 2*face_w:3*face_w, [0, 1]] = grid\n","    out[:, 2*face_w:3*face_w, 2] = -0.5\n","\n","    # Left face (x = -0.5)\n","    out[:, 3*face_w:4*face_w, [2, 1]] = grid\n","    out[:, 3*face_w:4*face_w, 0] = -0.5\n","\n","    # Up face (y = 0.5)\n","    out[:, 4*face_w:5*face_w, [0, 2]] = grid\n","    out[:, 4*face_w:5*face_w, 1] = 0.5\n","\n","    # Down face (y = -0.5)\n","    out[:, 5*face_w:6*face_w, [0, 2]] = grid\n","    out[:, 5*face_w:6*face_w, 1] = -0.5\n","\n","    return out\n","\n","\n","def equirect_uvgrid(h, w):\n","    u = np.linspace(-np.pi, np.pi, num=w, dtype=np.float32)\n","    v = np.linspace(np.pi, -np.pi, num=h, dtype=np.float32) / 2\n","\n","    return np.stack(np.meshgrid(u, v), axis=-1)\n","\n","\n","def equirect_facetype(h, w):\n","    '''\n","    0F 1R 2B 3L 4U 5D\n","    '''\n","    tp = np.roll(np.arange(4).repeat(w // 4)[None, :].repeat(h, 0), 3 * w // 8, 1)\n","\n","    # Prepare ceil mask\n","    mask = np.zeros((h, w // 4), np.bool)\n","    idx = np.linspace(-np.pi, np.pi, w // 4) / 4\n","    idx = h // 2 - np.round(np.arctan(np.cos(idx)) * h / np.pi).astype(int)\n","    for i, j in enumerate(idx):\n","        mask[:j, i] = 1\n","    mask = np.roll(np.concatenate([mask] * 4, 1), 3 * w // 8, 1)\n","\n","    tp[mask] = 4\n","    tp[np.flip(mask, 0)] = 5\n","\n","    return tp.astype(np.int32)\n","\n","\n","def xyzpers(h_fov, v_fov, u, v, out_hw, in_rot):\n","    out = np.ones((*out_hw, 3), np.float32)\n","\n","    x_max = np.tan(h_fov / 2)\n","    y_max = np.tan(v_fov / 2)\n","    x_rng = np.linspace(-x_max, x_max, num=out_hw[1], dtype=np.float32)\n","    y_rng = np.linspace(-y_max, y_max, num=out_hw[0], dtype=np.float32)\n","    out[..., :2] = np.stack(np.meshgrid(x_rng, -y_rng), -1)\n","    Rx = rotation_matrix(v, [1, 0, 0])\n","    Ry = rotation_matrix(u, [0, 1, 0])\n","    Ri = rotation_matrix(in_rot, np.array([0, 0, 1.0]).dot(Rx).dot(Ry))\n","\n","    return out.dot(Rx).dot(Ry).dot(Ri)\n","\n","\n","def xyz2uv(xyz):\n","    '''\n","    xyz: ndarray in shape of [..., 3]\n","    '''\n","    x, y, z = np.split(xyz, 3, axis=-1)\n","    u = np.arctan2(x, z)\n","    c = np.sqrt(x**2 + z**2)\n","    v = np.arctan2(y, c)\n","\n","    return np.concatenate([u, v], axis=-1)\n","\n","\n","def uv2unitxyz(uv):\n","    u, v = np.split(uv, 2, axis=-1)\n","    y = np.sin(v)\n","    c = np.cos(v)\n","    x = c * np.sin(u)\n","    z = c * np.cos(u)\n","\n","    return np.concatenate([x, y, z], axis=-1)\n","\n","\n","def uv2coor(uv, h, w):\n","    '''\n","    uv: ndarray in shape of [..., 2]\n","    h: int, height of the equirectangular image\n","    w: int, width of the equirectangular image\n","    '''\n","    u, v = np.split(uv, 2, axis=-1)\n","    coor_x = (u / (2 * np.pi) + 0.5) * w - 0.5\n","    coor_y = (-v / np.pi + 0.5) * h - 0.5\n","\n","    return np.concatenate([coor_x, coor_y], axis=-1)\n","\n","\n","def coor2uv(coorxy, h, w):\n","    coor_x, coor_y = np.split(coorxy, 2, axis=-1)\n","    u = ((coor_x + 0.5) / w - 0.5) * 2 * np.pi\n","    v = -((coor_y + 0.5) / h - 0.5) * np.pi\n","\n","    return np.concatenate([u, v], axis=-1)\n","\n","\n","def sample_equirec(e_img, coor_xy, order):\n","    w = e_img.shape[1]\n","    coor_x, coor_y = np.split(coor_xy, 2, axis=-1)\n","    pad_u = np.roll(e_img[[0]], w // 2, 1)\n","    pad_d = np.roll(e_img[[-1]], w // 2, 1)\n","    e_img = np.concatenate([e_img, pad_d, pad_u], 0)\n","    return map_coordinates(e_img, [coor_y, coor_x],\n","                           order=order, mode='wrap')[..., 0]\n","\n","\n","def sample_cubefaces(cube_faces, tp, coor_y, coor_x, order):\n","    cube_faces = cube_faces.copy()\n","    cube_faces[1] = np.flip(cube_faces[1], 1)\n","    cube_faces[2] = np.flip(cube_faces[2], 1)\n","    cube_faces[4] = np.flip(cube_faces[4], 0)\n","\n","    # Pad up down\n","    pad_ud = np.zeros((6, 2, cube_faces.shape[2]))\n","    pad_ud[0, 0] = cube_faces[5, 0, :]\n","    pad_ud[0, 1] = cube_faces[4, -1, :]\n","    pad_ud[1, 0] = cube_faces[5, :, -1]\n","    pad_ud[1, 1] = cube_faces[4, ::-1, -1]\n","    pad_ud[2, 0] = cube_faces[5, -1, ::-1]\n","    pad_ud[2, 1] = cube_faces[4, 0, ::-1]\n","    pad_ud[3, 0] = cube_faces[5, ::-1, 0]\n","    pad_ud[3, 1] = cube_faces[4, :, 0]\n","    pad_ud[4, 0] = cube_faces[0, 0, :]\n","    pad_ud[4, 1] = cube_faces[2, 0, ::-1]\n","    pad_ud[5, 0] = cube_faces[2, -1, ::-1]\n","    pad_ud[5, 1] = cube_faces[0, -1, :]\n","    cube_faces = np.concatenate([cube_faces, pad_ud], 1)\n","\n","    # Pad left right\n","    pad_lr = np.zeros((6, cube_faces.shape[1], 2))\n","    pad_lr[0, :, 0] = cube_faces[1, :, 0]\n","    pad_lr[0, :, 1] = cube_faces[3, :, -1]\n","    pad_lr[1, :, 0] = cube_faces[2, :, 0]\n","    pad_lr[1, :, 1] = cube_faces[0, :, -1]\n","    pad_lr[2, :, 0] = cube_faces[3, :, 0]\n","    pad_lr[2, :, 1] = cube_faces[1, :, -1]\n","    pad_lr[3, :, 0] = cube_faces[0, :, 0]\n","    pad_lr[3, :, 1] = cube_faces[2, :, -1]\n","    pad_lr[4, 1:-1, 0] = cube_faces[1, 0, ::-1]\n","    pad_lr[4, 1:-1, 1] = cube_faces[3, 0, :]\n","    pad_lr[5, 1:-1, 0] = cube_faces[1, -2, :]\n","    pad_lr[5, 1:-1, 1] = cube_faces[3, -2, ::-1]\n","    cube_faces = np.concatenate([cube_faces, pad_lr], 2)\n","\n","    return map_coordinates(cube_faces, [tp, coor_y, coor_x], order=order, mode='wrap')\n","\n","\n","def cube_h2list(cube_h):\n","    assert cube_h.shape[0] * 6 == cube_h.shape[1]\n","    return np.split(cube_h, 6, axis=1)\n","\n","\n","def cube_list2h(cube_list):\n","    assert len(cube_list) == 6\n","    assert sum(face.shape == cube_list[0].shape for face in cube_list) == 6\n","    return np.concatenate(cube_list, axis=1)\n","\n","\n","def cube_h2dict(cube_h):\n","    cube_list = cube_h2list(cube_h)\n","    return dict([(k, cube_list[i])\n","                 for i, k in enumerate(['F', 'R', 'B', 'L', 'U', 'D'])])\n","\n","\n","def cube_dict2h(cube_dict, face_k=['F', 'R', 'B', 'L', 'U', 'D']):\n","    assert len(face_k) == 6\n","    return cube_list2h([cube_dict[k] for k in face_k])\n","\n","\n","def cube_h2cutout(cube_h):\n","    assert cube_h.shape[0] * 6 == cube_h.shape[1]\n","    w=cube_h.shape[0]\n","    cube_cutout= np.zeros((w*5, w*6, cube_h.shape[2]), dtype=cube_h.dtype)\n","    cube_list= cube_h2list(cube_h)\n","    # order : F R B L U D\n","    sxy = [(0,2,2) , (1,1,4) , (1,2,4) , (1,3,4) , (1,4,4) , (2,0,2) , (2,1,3) , (2,2,0) , (2,3,1) , (2,4,2) , (2,5,3) , (3,1,5) , (3,2,5) , (3,3,5) , (3,4,5) , (4,2,2)]\n","    for (sy,sx,i) in sxy:\n","\n","      face= cube_list[i]\n","\n","      if i in [1, 2]:\n","          face = np.flip(face, axis=1)\n","      if i == 4:\n","          face = np.flip(face, axis=0)\n","\n","      if sx == 1:\n","          if sy == 1 :\n","              face=cv2.rotate(face, cv2.cv2.ROTATE_90_CLOCKWISE)\n","              face=cv2.rotate(face, cv2.cv2.ROTATE_90_CLOCKWISE)\n","              face=cv2.rotate(face, cv2.cv2.ROTATE_90_CLOCKWISE)\n","          if sy == 3 :\n","              face=cv2.rotate(face, cv2.cv2.ROTATE_90_CLOCKWISE)\n","          if sy == 4 :\n","              face=cv2.rotate(face, cv2.cv2.ROTATE_90_CLOCKWISE)\n","              face=cv2.rotate(face, cv2.cv2.ROTATE_90_CLOCKWISE)\n","      if sx == 3:\n","          if sy == 1 :\n","              face=cv2.rotate(face, cv2.cv2.ROTATE_90_CLOCKWISE)\n","          if sy == 3 :\n","              face=cv2.rotate(face, cv2.cv2.ROTATE_90_CLOCKWISE)\n","              face=cv2.rotate(face, cv2.cv2.ROTATE_90_CLOCKWISE)\n","              face=cv2.rotate(face, cv2.cv2.ROTATE_90_CLOCKWISE)\n","          if sy == 4 : \n","              face=cv2.rotate(face, cv2.cv2.ROTATE_90_CLOCKWISE)\n","              face=cv2.rotate(face, cv2.cv2.ROTATE_90_CLOCKWISE)\n","      if sx == 0 or sx == 4 :\n","          face=cv2.rotate(face, cv2.cv2.ROTATE_90_CLOCKWISE)\n","          face=cv2.rotate(face, cv2.cv2.ROTATE_90_CLOCKWISE)\n","\n","      cube_cutout[sy*w:(sy+1)*w , sx*w:(sx+1)*w] = face\n","     \n","    return cube_cutout\n","\n","\n","def cube_h2dice(cube_h):\n","    assert cube_h.shape[0] * 6 == cube_h.shape[1]\n","    w = cube_h.shape[0]\n","    cube_dice = np.zeros((w * 3, w * 4, cube_h.shape[2]), dtype=cube_h.dtype)\n","    cube_list = cube_h2list(cube_h)\n","    # Order: F R B L U D\n","    sxy = [(1, 1), (2, 1), (3, 1), (0, 1), (1, 0), (1, 2)]\n","    for i, (sx, sy) in enumerate(sxy):\n","        face = cube_list[i]\n","        if i in [1, 2]:\n","            face = np.flip(face, axis=1)\n","        if i == 4:\n","            face = np.flip(face, axis=0)\n","        cube_dice[sy*w:(sy+1)*w, sx*w:(sx+1)*w] = face\n","    return cube_dice\n","\n","\n","def cube_dice2h(cube_dice):\n","    w = cube_dice.shape[0] // 3\n","    assert cube_dice.shape[0] == w * 3 and cube_dice.shape[1] == w * 4\n","    cube_h = np.zeros((w, w * 6, cube_dice.shape[2]), dtype=cube_dice.dtype)\n","    # Order: F R B L U D\n","    sxy = [(1, 1), (2, 1), (3, 1), (0, 1), (1, 0), (1, 2)]\n","    for i, (sx, sy) in enumerate(sxy):\n","        face = cube_dice[sy*w:(sy+1)*w, sx*w:(sx+1)*w]\n","        if i in [1, 2]:\n","            face = np.flip(face, axis=1)\n","        if i == 4:\n","            face = np.flip(face, axis=0)\n","        cube_h[:, i*w:(i+1)*w] = face\n","    return cube_h\n","\n","\n","def rotation_matrix(rad, ax):\n","    ax = np.array(ax)\n","    assert len(ax.shape) == 1 and ax.shape[0] == 3\n","    ax = ax / np.sqrt((ax**2).sum())\n","    R = np.diag([np.cos(rad)] * 3)\n","    R = R + np.outer(ax, ax) * (1.0 - np.cos(rad))\n","\n","    ax = ax * np.sin(rad)\n","    R = R + np.array([[0, -ax[2], ax[1]],\n","                      [ax[2], 0, -ax[0]],\n","                      [-ax[1], ax[0], 0]])\n","\n","    return R"]},{"cell_type":"code","execution_count":6,"metadata":{"executionInfo":{"elapsed":15,"status":"ok","timestamp":1640590894498,"user":{"displayName":"Diksha Jena (B20CS013)","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"03488940742474601522"},"user_tz":-330},"id":"RTe_4Xn0ESZ0"},"outputs":[],"source":["def e2c(e_img, face_w=256, mode='bilinear', cube_format='dice'):\n","    '''\n","    e_img:  ndarray in shape of [H, W, *]\n","    face_w: int, the length of each face of the cubemap\n","    '''\n","    assert len(e_img.shape) == 3\n","    h, w = e_img.shape[:2]\n","    if mode == 'bilinear':\n","        order = 1\n","    elif mode == 'nearest':\n","        order = 0\n","    else:\n","        raise NotImplementedError('unknown mode')\n","\n","    xyz = xyzcube(face_w)\n","    uv = xyz2uv(xyz)\n","    coor_xy = uv2coor(uv, h, w)\n","\n","    cubemap = np.stack([\n","        sample_equirec(e_img[..., i], coor_xy, order=order)\n","        for i in range(e_img.shape[2])\n","    ], axis=-1)\n","\n","    if cube_format == 'horizon':\n","        pass\n","    elif cube_format == 'list':\n","        cubemap = cube_h2list(cubemap)\n","    elif cube_format == 'dict':\n","        cubemap = cube_h2dict(cubemap)\n","    elif cube_format == 'extended_cutout':\n","        cubemap = cube_h2cutout(cubemap)\n","    elif cube_format == 'dice':\n","        cubemap = cube_h2dice(cubemap)\n","    else:\n","        raise NotImplementedError()\n","\n","    return cubemap"]},{"cell_type":"markdown","metadata":{"id":"wgQABUTpEcnO"},"source":["### Functions for saliency output"]},{"cell_type":"code","execution_count":7,"metadata":{"executionInfo":{"elapsed":14,"status":"ok","timestamp":1640590894499,"user":{"displayName":"Diksha Jena (B20CS013)","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"03488940742474601522"},"user_tz":-330},"id":"OoSykGpyxA3o"},"outputs":[],"source":["def rgb_to_gray(img):\n","  r, g, b = img[:,:,0], img[:,:,1], img[:,:,2]\n","  gray =  (1/3) * r + (1/3) * g + (1/3) * b\n","\n","  return gray"]},{"cell_type":"code","execution_count":8,"metadata":{"executionInfo":{"elapsed":14,"status":"ok","timestamp":1640590894500,"user":{"displayName":"Diksha Jena (B20CS013)","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"03488940742474601522"},"user_tz":-330},"id":"m4obpZAjEgmR"},"outputs":[],"source":["def getGaborKernel(gaborparams, angle, phase):\n","    gp = gaborparams\n","    major_sd = gp['stddev']\n","    minor_sd = major_sd * gp['elongation']\n","    max_sd = max(major_sd, minor_sd)\n","\n","    sz = gp['filterSize']\n","    if sz == -1:\n","        sz = math.ceil(max_sd * math.sqrt(10))\n","    else:\n","        sz = math.floor(sz / 2)\n","\n","    psi = np.pi / 180 * phase\n","    rtDeg = np.pi / 180 * angle\n","\n","    omega = 2 * np.pi / gp['filterPeriod']\n","    co = math.cos(rtDeg)\n","    si = -math.sin(rtDeg)\n","    major_sigq = 2 * pow(major_sd, 2)\n","    minor_sigq = 2 * pow(minor_sd, 2)\n","\n","    vec = range(-int(sz), int(sz) + 1)\n","    vlen = len(vec)\n","    vco = [i * co for i in vec]\n","    vsi = [i * si for i in vec]\n","\n","    # major = np.matlib.repmat(np.asarray(vco).transpose(), 1, vlen) + np.matlib.repmat(vsi, vlen, 1)\n","    a = np.tile(np.asarray(vco).transpose(), (vlen, 1)).transpose()\n","    b = np.matlib.repmat(vsi, vlen, 1)\n","    major = a + b\n","    major2 = np.power(major, 2)\n","\n","    # minor = np.matlib.repmat(np.asarray(vsi).transpose(), 1, vlen) - np.matlib.repmat(vco, vlen, 1)\n","    a = np.tile(np.asarray(vsi).transpose(), (vlen, 1)).transpose()\n","    b = np.matlib.repmat(vco, vlen, 1)\n","    minor = a + b\n","    minor2 = np.power(minor, 2)\n","\n","    a = np.cos(omega * major + psi)\n","    b = np.exp(-major2 / major_sigq - minor2 / minor_sigq)\n","    # result = np.cos(omega * major + psi) * exp(-major2/major_sigq - minor2/minor_sigq)\n","    result = np.multiply(a, b)\n","\n","    filter1 = np.subtract(result, np.mean(result.reshape(-1)))\n","    filter1 = np.divide(filter1, np.sqrt(np.sum(np.power(filter1.reshape(-1), 2))))\n","    return filter1"]},{"cell_type":"code","execution_count":9,"metadata":{"executionInfo":{"elapsed":14,"status":"ok","timestamp":1640590894501,"user":{"displayName":"Diksha Jena (B20CS013)","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"03488940742474601522"},"user_tz":-330},"id":"UD9wCSMJElf3"},"outputs":[],"source":["def getGaborKernels(gaborparams, thetas):\n","    gaborKernels = {}\n","    for th in thetas:\n","        gaborKernels[th] = {}\n","        gaborKernels[th]['0'] = getGaborKernel(gaborparams, th, 0)\n","        gaborKernels[th]['90'] = getGaborKernel(gaborparams, th, 90)\n","\n","    return gaborKernels"]},{"cell_type":"code","execution_count":10,"metadata":{"executionInfo":{"elapsed":14,"status":"ok","timestamp":1640590894502,"user":{"displayName":"Diksha Jena (B20CS013)","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"03488940742474601522"},"user_tz":-330},"id":"OHbWrc6IEnRk"},"outputs":[],"source":["def compute(r, g, b, I):\n","    # intensity I is (r+g+b)/3\n","\n","    max_I = I.max()\n","    # normalisation, for decoupling hue from intensity #ittikoch98pami\n","    r = np.divide(r, I, out=np.zeros_like(r), where=I\u003emax_I/10.)\n","    g = np.divide(g, I, out=np.zeros_like(g), where=I\u003emax_I/10.)\n","    b = np.divide(b, I, out=np.zeros_like(b), where=I\u003emax_I/10.)\n","\n","    # calculating broadly-tuned  color channels\n","    R = r - (g+b)/2.\n","    R = R*(R\u003e=0)\n","\n","    G = g - (r+b)/2.\n","    G = G*(G\u003e=0)\n","\n","    B = b - (r+g)/2.\n","    B = B*(B\u003e=0)\n","\n","    Y = (r+g)/2 - cv2.absdiff(r, g)/2. - b\n","    Y = Y*(Y\u003e=0)\n","\n","    RG = cv2.absdiff(R, G)\n","    BY = cv2.absdiff(B, Y)\n","\n","    featMaps = {\n","        0: RG,\n","        1: BY,\n","        2: I\n","    }\n","    return featMaps"]},{"cell_type":"code","execution_count":11,"metadata":{"executionInfo":{"elapsed":14,"status":"ok","timestamp":1640590894502,"user":{"displayName":"Diksha Jena (B20CS013)","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"03488940742474601522"},"user_tz":-330},"id":"vZDIUnnzEo4k"},"outputs":[],"source":["def localmaximas_calculate(mat, thresh):\n","    (w,h) = mat.shape\n","    sum_local_max = mat[0][0]\n","    count_local_max = 0\n","    global_max = mat[0][0]\n","    for i in range(1, w-1):\n","        for j in range(1, h-1):\n","            if mat[i][j] \u003e max(mat[i-1][j-1],mat[i-1][j],mat[i-1][j+1],\n","                               mat[i][j-1],              mat[i][j+1],\n","                               mat[i+1][j-1],mat[i+1][j],mat[i+1][j+1]) and mat[i,j]\u003ethresh:\n","                if mat[i][j] \u003e global_max:\n","                    global_max = mat[i][j]\n","\n","                sum_local_max += mat[i][j]\n","                count_local_max +=1\n","\n","    if count_local_max \u003e 0:\n","        local_max_avg = float(sum_local_max)/float(count_local_max)\n","    else:\n","        local_max_avg = 0.0\n","    return global_max, count_local_max, local_max_avg\n","\n","def processNormalization(mat):\n","    M = 10\n","    thresh  = M/10\n","    mat = cv2.normalize(mat, None, alpha=0, beta=1, norm_type=cv2.NORM_MINMAX, dtype=cv2.CV_32F)\n","    mat = mat*M\n","    g_max, c_max, l_max_avg = localmaximas_calculate(mat, thresh)\n","    # print g_max, c_max, l_max_avg\n","    if c_max\u003e1:\n","        res = mat* (M-l_max_avg)**2\n","    elif c_max == 1:\n","        res = mat * M**2\n","    else:\n","        res = mat\n","\n","    return res\n","\n","def process2(mat):\n","     M = 8.0 # an arbitrary global maxima for which the image is scaled\n","     mat = cv2.convertScaleAbs(mat, alpha=M/mat.max(), beta = 0.0)\n","     w, h = mat.shape\n","     maxima = maximum_filter(mat, size=(1, 1))\n","     maxima = (mat == maxima)\n","     mnum = maxima.sum()\n","     maxima = np.multiply(maxima, mat)\n","     mbar = float(maxima.sum()) / mnum\n","     return mat * (M-mbar)**2"]},{"cell_type":"code","execution_count":12,"metadata":{"executionInfo":{"elapsed":14,"status":"ok","timestamp":1640590894503,"user":{"displayName":"Diksha Jena (B20CS013)","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"03488940742474601522"},"user_tz":-330},"id":"fLuNZF45EqXD"},"outputs":[],"source":["def pyramid(feature_pyramids):\n","    center_levels = [2, 3, 4]\n","    delta = [2, 3]\n","    Ccs_array = {\n","        0:[], 1:[]\n","    }\n","    Ics_array =[]\n","    Ocs_array = []\n","    for c in center_levels:\n","        for d in delta:\n","            s = c+d\n","            for i in range(0,2): # For calculating RG and BY channels\n","                Cc = feature_pyramids[c][i]\n","                Cs = -feature_pyramids[s][i]\n","                # to allow for chromatic opponency\n","\n","                Cs_scaled = cv2.resize(Cs, (Cc.shape[1], Cc.shape[0]), interpolation=cv2.INTER_CUBIC)\n","                Ccs = (Cc - Cs_scaled) ** 2\n","                Ccs_array[i].append(Ccs)\n","\n","            Ic = feature_pyramids[c][2]\n","            Is = feature_pyramids[s][2]\n","\n","            Is_scaled = cv2.resize(Is, (Ic.shape[1], Ic.shape[0]), interpolation=cv2.INTER_CUBIC)\n","            Ics = (Ic - Is_scaled)**2\n","            Ics_array.append(Ics)\n","\n","            for idx in range(0, len(feature_pyramids[c][3])):\n","                Oc = feature_pyramids[c][3][idx]\n","                Os = feature_pyramids[s][3][idx]\n","\n","                Os_scaled = cv2.resize(Os, (Oc.shape[1], Oc.shape[0]), interpolation=cv2.INTER_CUBIC)\n","                Ocs = (Oc - Os_scaled) ** 2\n","                Ocs_array.append(Ocs)\n","\n","    final_Feature_Array = {\n","        0:Ccs_array[0],\n","        1:Ccs_array[1],\n","        2:Ics_array,\n","        3:Ocs_array\n","    }\n","    return final_Feature_Array"]},{"cell_type":"code","execution_count":13,"metadata":{"executionInfo":{"elapsed":14,"status":"ok","timestamp":1640590894503,"user":{"displayName":"Diksha Jena (B20CS013)","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"03488940742474601522"},"user_tz":-330},"id":"qIx1z266EsQb"},"outputs":[],"source":["def orientcompute(L, gaborparams, thetas):\n","    # L = Intensity Map\n","    # L = np.maximum(np.maximum(r, g), b)\n","\n","    kernels = getGaborKernels(gaborparams, thetas)\n","    featMaps = []\n","    for th in thetas:\n","        kernel_0  = kernels[th]['0']\n","        kernel_90 = kernels[th]['90']\n","        o1 = cv2.filter2D(L, -1, kernel_0, borderType=cv2.BORDER_REPLICATE)\n","        o2 = cv2.filter2D(L, -1, kernel_90, borderType=cv2.BORDER_REPLICATE)\n","        o = np.add(abs(o1), abs(o2))\n","        featMaps.append(o)\n","\n","    return featMaps"]},{"cell_type":"code","execution_count":14,"metadata":{"executionInfo":{"elapsed":694,"status":"ok","timestamp":1640590895183,"user":{"displayName":"Diksha Jena (B20CS013)","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"03488940742474601522"},"user_tz":-330},"id":"5-fWoSw0EueL"},"outputs":[],"source":["def norm01(mat):\n","    return cv2.normalize(mat, None, alpha=0., beta=1., norm_type=cv2.NORM_MINMAX, dtype=cv2.CV_32F)\n","\n","\n","def calculateFeatureMaps(r, g, b, L, params):\n","    colorMaps = compute(r, g, b, L)\n","    orientationMaps = orientcompute(L, params['gaborparams'], params['thetas'])\n","    allFeatureMaps = {\n","        0: colorMaps[0],\n","        1: colorMaps[1],\n","        2: colorMaps[2],\n","        3: orientationMaps\n","    }\n","    return allFeatureMaps\n","\n","def getPyramid(image, max_level):\n","    imagePyramid = {\n","        0: image\n","    } # scale zero = 1:1\n","\n","    for i in range(1, max_level):\n","        imagePyramid[i] = cv2.pyrDown(imagePyramid[i-1])\n","\n","    return imagePyramid\n","\n","def run(image, params):\n","    b = image[:,:,0]/255.\n","    g = image[:,:,1]/255.\n","    r = image[:,:,2]/255.\n","    I = rgb_to_gray(image)/255.0\n","\n","    b_pyr = getPyramid(b, params['max_level'])\n","    g_pyr = getPyramid(g, params['max_level'])\n","    r_pyr = getPyramid(r, params['max_level'])\n","    I_pyr = getPyramid(I, params['max_level'])\n","\n","    # calculating scale-wise feature maps\n","    scaledFeaturePyramids = {}\n","\n","    for i in range(2, len(b_pyr)):\n","        p_r = r_pyr[i]\n","        p_g = g_pyr[i]\n","        p_b = b_pyr[i]\n","        p_L = I_pyr[i]\n","\n","        maps = calculateFeatureMaps(p_r, p_g, p_b, p_L, params)\n","\n","        scaledFeaturePyramids[i]=maps\n","\n","\n","    # calculating center surround feature maps\n","    centerSurroundFeatureMaps = pyramid(scaledFeaturePyramids)\n","\n","\n","    # normalizing activation maps\n","    normalised_maps =[]\n","    norm_maps = centerSurroundFeatureMaps.copy()\n","    for i in range(0,4):\n","        for mat in norm_maps[i]:\n","            # Resizing to sigma = 4 maps\n","            nmap = processNormalization(mat)\n","            nmap = cv2.resize(nmap, (b_pyr[4].shape[1], b_pyr[4].shape[0]), interpolation=cv2.INTER_CUBIC)\n","            normalised_maps.append(nmap)\n","\n","\n","    # combine normalised maps\n","    comb_maps = []\n","    cfn = len(norm_maps[0])+len(norm_maps[1])\n","    ifn = len(norm_maps[2])\n","    ofn = len(norm_maps[3])\n","\n","    comb_maps.append(normalised_maps[0])\n","    for i in range(1, cfn):\n","        comb_maps[0] = np.add(comb_maps[0], normalised_maps[i])\n","\n","    comb_maps.append(normalised_maps[cfn])\n","    for i in range(cfn+1, cfn + ifn):\n","        comb_maps[1] = np.add(comb_maps[1], normalised_maps[i])\n","\n","    comb_maps.append(normalised_maps[cfn + ifn])\n","    for i in range(cfn + ifn + 1, cfn + ifn + ofn):\n","        comb_maps[2] = np.add(comb_maps[2], normalised_maps[i])\n","\n","\n","    # normlaise top channle maps\n","    ntcmaps = [None]*3\n","    for i in range(0,3):\n","        ntcmaps[i] = processNormalization(comb_maps[i])\n","\n","    # add all of them\n","    mastermap = (ntcmaps[0] + ntcmaps[1] + ntcmaps[2])/3.0\n","\n","    #post processing\n","    gray = norm01(mastermap)\n","    # blurred = cv2.GaussianBlur(gray,(3,3), 4)\n","    # gray = norm01(blurred)\n","    mastermap_res = cv2.resize(gray, (image.shape[1], image.shape[0]), interpolation=cv2.INTER_CUBIC)\n","\n","\n","    return mastermap_res"]},{"cell_type":"code","execution_count":15,"metadata":{"executionInfo":{"elapsed":10,"status":"ok","timestamp":1640590895184,"user":{"displayName":"Diksha Jena (B20CS013)","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"03488940742474601522"},"user_tz":-330},"id":"JF4DIW6BE5cf"},"outputs":[],"source":["def NormalizeData(data):\n","  if(np.max(data)\u003e255.0 or np.min(data)\u003c0.0)  :\n","    return ((data - np.min(data)) / (np.max(data) - np.min(data)))*255.0\n","  else:\n","    return data"]},{"cell_type":"code","execution_count":16,"metadata":{"executionInfo":{"elapsed":9,"status":"ok","timestamp":1640590895184,"user":{"displayName":"Diksha Jena (B20CS013)","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"03488940742474601522"},"user_tz":-330},"id":"ytlSgVYqE7FO"},"outputs":[],"source":["def saliency(image, params):\n","  return NormalizeData(run(image/255.0, params))"]},{"cell_type":"markdown","metadata":{"id":"DmQVlzIZE8xx"},"source":["### Reverse Mapping"]},{"cell_type":"code","execution_count":17,"metadata":{"executionInfo":{"elapsed":9,"status":"ok","timestamp":1640590895184,"user":{"displayName":"Diksha Jena (B20CS013)","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"03488940742474601522"},"user_tz":-330},"id":"lqHuvBXEE-5J"},"outputs":[],"source":["def c2e(cubemap, h, w, mode='bilinear', cube_format='dice'):\n","    if mode == 'bilinear':\n","        order = 1\n","    elif mode == 'nearest':\n","        order = 0\n","    else:\n","        raise NotImplementedError('unknown mode')\n","\n","    if cube_format == 'horizon':\n","        pass\n","    elif cube_format == 'list':\n","        cubemap = cube_list2h(cubemap)\n","    elif cube_format == 'dict':\n","        cubemap = cube_dict2h(cubemap)\n","    elif cube_format == 'dice':\n","        cubemap = cube_dice2h(cubemap)\n","    else:\n","        raise NotImplementedError('unknown cube_format')\n","    assert len(cubemap.shape) == 3\n","    assert cubemap.shape[0] * 6 == cubemap.shape[1]\n","    assert w % 8 == 0\n","    face_w = cubemap.shape[0]\n","\n","    uv = equirect_uvgrid(h, w)\n","    u, v = np.split(uv, 2, axis=-1)\n","    u = u[..., 0]\n","    v = v[..., 0]\n","    cube_faces = np.stack(np.split(cubemap, 6, 1), 0)\n","\n","    # Get face id to each pixel: 0F 1R 2B 3L 4U 5D\n","    tp = equirect_facetype(h, w)\n","    coor_x = np.zeros((h, w))\n","    coor_y = np.zeros((h, w))\n","\n","    for i in range(4):\n","        mask = (tp == i)\n","        coor_x[mask] = 0.5 * np.tan(u[mask] - np.pi * i / 2)\n","        coor_y[mask] = -0.5 * np.tan(v[mask]) / np.cos(u[mask] - np.pi * i / 2)\n","\n","    mask = (tp == 4)\n","    c = 0.5 * np.tan(np.pi / 2 - v[mask])\n","    coor_x[mask] = c * np.sin(u[mask])\n","    coor_y[mask] = c * np.cos(u[mask])\n","\n","    mask = (tp == 5)\n","    c = 0.5 * np.tan(np.pi / 2 - np.abs(v[mask]))\n","    coor_x[mask] = c * np.sin(u[mask])\n","    coor_y[mask] = -c * np.cos(u[mask])\n","\n","    # Final renormalize\n","    coor_x = (np.clip(coor_x, -0.5, 0.5) + 0.5) * face_w\n","    coor_y = (np.clip(coor_y, -0.5, 0.5) + 0.5) * face_w\n","\n","    equirec = np.stack([\n","        sample_cubefaces(cube_faces[..., i], tp, coor_y, coor_x, order=order)\n","        for i in range(cube_faces.shape[3])\n","    ], axis=-1)\n","\n","    return equirec"]},{"cell_type":"markdown","metadata":{"id":"Aqk_Y8u0FFQZ"},"source":["### Functions for Comparisions"]},{"cell_type":"code","execution_count":18,"metadata":{"executionInfo":{"elapsed":10,"status":"ok","timestamp":1640590895185,"user":{"displayName":"Diksha Jena (B20CS013)","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"03488940742474601522"},"user_tz":-330},"id":"OMyloae6FIvK"},"outputs":[],"source":["def normalize_metric(x, method='standard', axis=None):\n","\tx = np.array(x, copy=False)\n","\tif axis is not None:\n","\t\ty = np.rollaxis(x, axis).reshape([x.shape[axis], -1])\n","\t\tshape = np.ones(len(x.shape))\n","\t\tshape[axis] = x.shape[axis]\n","\t\tif method == 'standard':\n","\t\t\tres = (x - np.mean(y, axis=1).reshape(shape)) / np.std(y, axis=1).reshape(shape)\n","\t\telif method == 'range':\n","\t\t\tres = (x - np.min(y, axis=1).reshape(shape)) / (np.max(y, axis=1) - np.min(y, axis=1)).reshape(shape)\n","\t\telif method == 'sum':\n","\t\t\tres = x / np.float_(np.sum(y, axis=1).reshape(shape))\n","\t\telse:\n","\t\t\traise ValueError('method not in {\"standard\", \"range\", \"sum\"}')\n","\telse:\n","\t\tif method == 'standard':\n","\t\t\tres = (x - np.mean(x)) / np.std(x)\n","\t\telif method == 'range':\n","\t\t\tres = (x - np.min(x)) / (np.max(x) - np.min(x))\n","\t\telif method == 'sum':\n","\t\t\tres = x / float(np.sum(x))\n","\t\telse:\n","\t\t\traise ValueError('method not in {\"standard\", \"range\", \"sum\"}')\n","\treturn res"]},{"cell_type":"code","execution_count":19,"metadata":{"executionInfo":{"elapsed":9,"status":"ok","timestamp":1640590895185,"user":{"displayName":"Diksha Jena (B20CS013)","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"03488940742474601522"},"user_tz":-330},"id":"7gFOWFL2FQds"},"outputs":[],"source":["def KLD(p, q):\n","\tp = normalize_metric(p, method='sum')\n","\tq = normalize_metric(q, method='sum')\n","\treturn np.sum(np.where(p != 0, p * np.log((p+EPSILON) / (q+EPSILON)), 0))"]},{"cell_type":"code","execution_count":20,"metadata":{"executionInfo":{"elapsed":10,"status":"ok","timestamp":1640590895186,"user":{"displayName":"Diksha Jena (B20CS013)","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"03488940742474601522"},"user_tz":-330},"id":"itLvMxFMFSLO"},"outputs":[],"source":["def CC(saliency_map1, saliency_map2):\n","\tmap1 = np.array(saliency_map1, copy=False)\n","\tmap2 = np.array(saliency_map2, copy=False)\n","\tif map1.shape != map2.shape:\n","\t\tmap1 = resize(map1, map2.shape, order=3, mode='constant') \n","\tmap1 = normalize_metric(map1, method='standard')\n","\tmap2 = normalize_metric(map2, method='standard')\n","\treturn np.corrcoef(map1.ravel(), map2.ravel())[0,1]"]},{"cell_type":"code","execution_count":21,"metadata":{"executionInfo":{"elapsed":10,"status":"ok","timestamp":1640590895186,"user":{"displayName":"Diksha Jena (B20CS013)","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"03488940742474601522"},"user_tz":-330},"id":"YssA1TV0FTtU"},"outputs":[],"source":["def SIM(saliency_map1, saliency_map2):\n","\tmap1 = np.array(saliency_map1, copy=False)\n","\tmap2 = np.array(saliency_map2, copy=False)\n","\tif map1.shape != map2.shape:\n","\t\tmap1 = resize(map1, map2.shape, order=3, mode='constant') \n","\tmap1 = normalize_metric(map1, method='range')\n","\tmap2 = normalize_metric(map2, method='range')\n","\tmap1 = normalize_metric(map1, method='sum')\n","\tmap2 = normalize_metric(map2, method='sum')\n","\tintersection = np.minimum(map1, map2)\n","\treturn np.sum(intersection)"]},{"cell_type":"code","execution_count":22,"metadata":{"executionInfo":{"elapsed":9,"status":"ok","timestamp":1640590895186,"user":{"displayName":"Diksha Jena (B20CS013)","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"03488940742474601522"},"user_tz":-330},"id":"yGSTrp5zFVNF"},"outputs":[],"source":["def jsd(p, q, base=np.e):\n","\treturn sp.spatial.distance.jensenshannon(p.flatten(),q.flatten())"]},{"cell_type":"markdown","metadata":{"id":"cd9liCtRFXcQ"},"source":["### Main Function"]},{"cell_type":"code","execution_count":23,"metadata":{"executionInfo":{"elapsed":10,"status":"ok","timestamp":1640590895187,"user":{"displayName":"Diksha Jena (B20CS013)","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"03488940742474601522"},"user_tz":-330},"id":"OBskhbDQFY9W"},"outputs":[],"source":["gaborparams = {\n","        'stddev': 2,\n","        'elongation': 2,\n","        'filterSize': -1,\n","        'filterPeriod': np.pi\n","}\n","\n","params = {\n","        'gaborparams': gaborparams,\n","        'sigma_frac_act': 0.15,\n","        'sigma_frac_norm': 0.06,\n","        'max_level': 9,\n","        'thetas': [0, 45, 90, 135]\n","}"]},{"cell_type":"code","execution_count":24,"metadata":{"executionInfo":{"elapsed":11,"status":"ok","timestamp":1640590895188,"user":{"displayName":"Diksha Jena (B20CS013)","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"03488940742474601522"},"user_tz":-330},"id":"MckU9NL5FbS7"},"outputs":[],"source":["def function(image, compare, params=params ,height=1024, width=2048):\n","  cubemap = e2c(image,cube_format='extended_cutout')\n","  cube_s=saliency(cubemap, params)\n","\n","  cube_s=cube_s[..., np.newaxis]\n","  w=256\n","  cube_dice= np.zeros((w*3, w*4, cube_s.shape[2]), dtype=cube_s.dtype)\n","  # order : F R B L U D\n","  sxy = [(1,2, 0,1), (2,1 ,1,0), (2,2 ,1,1), (2,3 ,1,2), (2,4 ,1,3), (3,2 ,2,1)]\n","  for (sy,sx,cy,cx) in sxy:\n","      cube_dice[cy*w:(cy+1)*w , cx*w:(cx+1)*w] = cube_s[sy*w:(sy+1)*w, sx*w:(sx+1)*w]\n","\n","  out=NormalizeData(c2e(cube_dice,height,width,'bilinear','dice'))\n","  output=np.squeeze(out,axis=(2,))\n","\n","  return (KLD(output,compare),CC(output,compare),SIM(output,compare),jsd(output,compare))\n"]},{"cell_type":"markdown","metadata":{"id":"q1cTjbB4FdPU"},"source":["###Processing"]},{"cell_type":"code","execution_count":25,"metadata":{"executionInfo":{"elapsed":10,"status":"ok","timestamp":1640590895188,"user":{"displayName":"Diksha Jena (B20CS013)","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"03488940742474601522"},"user_tz":-330},"id":"fDA90v1zFfyd"},"outputs":[],"source":["dataset_url = \"/dir/My Drive/Design_Credit/Data_Set/Sorted_Stimuli/*\"\n","salmap_url = \"/dir/My Drive/Design_Credit/Data_Set/Sorted_SalMap/*.png\""]},{"cell_type":"code","execution_count":26,"metadata":{"executionInfo":{"elapsed":10,"status":"ok","timestamp":1640590895188,"user":{"displayName":"Diksha Jena (B20CS013)","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"03488940742474601522"},"user_tz":-330},"id":"_lmlXD5cFigh"},"outputs":[],"source":["col1=[img for img in glob.glob(dataset_url) ]\n","col2=[map for map in glob.glob(salmap_url) ]\n","col1.sort()\n","col2.sort()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true,"base_uri":"https://localhost:8080/"},"id":"muiwh_n5FlIa"},"outputs":[{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.7/dist-packages/PIL/Image.py:2800: DecompressionBombWarning: Image size (128000000 pixels) exceeds limit of 89478485 pixels, could be decompression bomb DOS attack.\n","  DecompressionBombWarning,\n","/usr/local/lib/python3.7/dist-packages/PIL/Image.py:2800: DecompressionBombWarning: Image size (168031112 pixels) exceeds limit of 89478485 pixels, could be decompression bomb DOS attack.\n","  DecompressionBombWarning,\n","/usr/local/lib/python3.7/dist-packages/PIL/Image.py:2800: DecompressionBombWarning: Image size (166786848 pixels) exceeds limit of 89478485 pixels, could be decompression bomb DOS attack.\n","  DecompressionBombWarning,\n","/usr/local/lib/python3.7/dist-packages/PIL/Image.py:2800: DecompressionBombWarning: Image size (166348800 pixels) exceeds limit of 89478485 pixels, could be decompression bomb DOS attack.\n","  DecompressionBombWarning,\n","/usr/local/lib/python3.7/dist-packages/PIL/Image.py:2800: DecompressionBombWarning: Image size (134217728 pixels) exceeds limit of 89478485 pixels, could be decompression bomb DOS attack.\n","  DecompressionBombWarning,\n"]}],"source":["output=[]\n","for i in range(85):\n","  image=np.asarray(PIL.Image.open(col1[i]))\n","  salMap=np.asarray(PIL.Image.open(col2[i]))\n","  height, width= salMap.shape[:2]\n","\n","  array_input=((image - np.min(image)) / (np.max(image) - np.min(image)))\n","\n","  image=cv2.resize(array_input, dsize=(width, height))\n","  compare=cv2.cvtColor(salMap,cv2.COLOR_BGR2GRAY)\n","  result=function(image,compare, params)\n","  output.append(result)\n","  #print(\"KLD = \",result[0],end='\\t')\n","  #print(\"CC = \",result[1],end='\\t')\n","  #print(\"SIM = \",result[2],end='\\t')\n","  #print(\"jsd = \",result[3],end='\\t')\n","  #print()\n","\n","  #train_data.append([cv2.resize(array_input, dsize=(width, height), interpolation=cv2.INTER_CUBIC), cv2.cvtColor(salMap,cv2.COLOR_BGR2GRAY)])\n","#train_data=pd.DataFrame(train_data, columns=['image', 'output'], index=None)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"UYZP283zFnhR"},"outputs":[{"data":{"text/plain":["{'spreadsheetId': '1ekw6_wc-A1ikZr0fRjqHWZUXYRwGgEhUiKXFP--7waY',\n"," 'updatedCells': 340,\n"," 'updatedColumns': 4,\n"," 'updatedRange': 'Sheet1!A1:D85',\n"," 'updatedRows': 85}"]},"execution_count":null,"metadata":{},"output_type":"execute_result"}],"source":["cell_list = worksheet.range('A1:D85')\n","i=0\n","j=0\n","for cell in cell_list:\n","  cell.value = output[i][j]\n","  j+=1\n","  if(j==4):\n","    i+=1\n","    j=0\n","  \n","worksheet.update_cells(cell_list)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"D4oylg2zFpKj"},"outputs":[],"source":["#end of it :)"]}],"metadata":{"colab":{"collapsed_sections":[],"name":"itti koch extended cutout","provenance":[{"file_id":"1kJuBlfrRN3TdFhj-anwygOfTDoENJKLn","timestamp":1640539273887}],"version":""},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}