{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"test","provenance":[{"file_id":"1kJuBlfrRN3TdFhj-anwygOfTDoENJKLn","timestamp":1640686742648}],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["###Connections and Libraries"],"metadata":{"id":"xP7dIWS-Dtek"}},{"cell_type":"code","execution_count":1,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"2GQ_RpmbDq-w","executionInfo":{"status":"ok","timestamp":1640719901897,"user_tz":-330,"elapsed":3429,"user":{"displayName":"Diksha Jena (B20CS013)","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"03488940742474601522"}},"outputId":"3e9cef4a-32a4-460b-f84c-642229920a67"},"outputs":[{"output_type":"stream","name":"stdout","text":["Drive already mounted at /dir; to attempt to forcibly remount, call drive.mount(\"/dir\", force_remount=True).\n"]}],"source":["from google.colab import drive\n","drive.mount(\"/dir\")"]},{"cell_type":"code","source":["from google.colab import auth\n","auth.authenticate_user()\n","\n","import gspread\n","from oauth2client.client import GoogleCredentials\n","\n","gc = gspread.authorize(GoogleCredentials.get_application_default())\n","\n","sh = gc.create('testing')\n","\n","# Open our new sheet and add some data.\n","worksheet = gc.open('testing').sheet1"],"metadata":{"id":"p87exalkD3K2","executionInfo":{"status":"ok","timestamp":1640724244490,"user_tz":-330,"elapsed":2707,"user":{"displayName":"Diksha Jena (B20CS013)","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"03488940742474601522"}}},"execution_count":35,"outputs":[]},{"cell_type":"code","source":["#import glob\n","import numpy as np\n","import pandas as pd\n","\n","import PIL\n","import matplotlib.pyplot as plt\n","\n","from scipy.ndimage import map_coordinates\n","import scipy.io\n","import scipy as sp\n","import sklearn.preprocessing\n","from skimage.transform import resize\n","import numpy.matlib\n","import math\n","\n","import cv2\n","import os,re, glob\n","from functools import partial\n","\n","EPSILON = np.finfo('float').eps\n","%matplotlib inline"],"metadata":{"id":"sbOF1oR1D_Pj","executionInfo":{"status":"ok","timestamp":1640719923870,"user_tz":-330,"elapsed":678,"user":{"displayName":"Diksha Jena (B20CS013)","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"03488940742474601522"}}},"execution_count":3,"outputs":[]},{"cell_type":"code","source":["#code required"],"metadata":{"id":"LA2RKOA_EBpz","executionInfo":{"status":"ok","timestamp":1640719923870,"user_tz":-330,"elapsed":5,"user":{"displayName":"Diksha Jena (B20CS013)","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"03488940742474601522"}}},"execution_count":4,"outputs":[]},{"cell_type":"markdown","source":["### Functions for cubemap conversions"],"metadata":{"id":"xujq9_YmEDbh"}},{"cell_type":"code","source":["def xyzcube(face_w):\n","    '''\n","    Return the xyz cordinates of the unit cube in [F R B L U D] format.\n","    '''\n","    out = np.zeros((face_w, face_w * 6, 3), np.float32)\n","    rng = np.linspace(-0.5, 0.5, num=face_w, dtype=np.float32)\n","    grid = np.stack(np.meshgrid(rng, -rng), -1)\n","\n","    # Front face (z = 0.5)\n","    out[:, 0*face_w:1*face_w, [0, 1]] = grid\n","    out[:, 0*face_w:1*face_w, 2] = 0.5\n","\n","    # Right face (x = 0.5)\n","    out[:, 1*face_w:2*face_w, [2, 1]] = grid\n","    out[:, 1*face_w:2*face_w, 0] = 0.5\n","\n","    # Back face (z = -0.5)\n","    out[:, 2*face_w:3*face_w, [0, 1]] = grid\n","    out[:, 2*face_w:3*face_w, 2] = -0.5\n","\n","    # Left face (x = -0.5)\n","    out[:, 3*face_w:4*face_w, [2, 1]] = grid\n","    out[:, 3*face_w:4*face_w, 0] = -0.5\n","\n","    # Up face (y = 0.5)\n","    out[:, 4*face_w:5*face_w, [0, 2]] = grid\n","    out[:, 4*face_w:5*face_w, 1] = 0.5\n","\n","    # Down face (y = -0.5)\n","    out[:, 5*face_w:6*face_w, [0, 2]] = grid\n","    out[:, 5*face_w:6*face_w, 1] = -0.5\n","\n","    return out\n","\n","\n","def equirect_uvgrid(h, w):\n","    u = np.linspace(-np.pi, np.pi, num=w, dtype=np.float32)\n","    v = np.linspace(np.pi, -np.pi, num=h, dtype=np.float32) / 2\n","\n","    return np.stack(np.meshgrid(u, v), axis=-1)\n","\n","\n","def equirect_facetype(h, w):\n","    '''\n","    0F 1R 2B 3L 4U 5D\n","    '''\n","    tp = np.roll(np.arange(4).repeat(w // 4)[None, :].repeat(h, 0), 3 * w // 8, 1)\n","\n","    # Prepare ceil mask\n","    mask = np.zeros((h, w // 4), np.bool)\n","    idx = np.linspace(-np.pi, np.pi, w // 4) / 4\n","    idx = h // 2 - np.round(np.arctan(np.cos(idx)) * h / np.pi).astype(int)\n","    for i, j in enumerate(idx):\n","        mask[:j, i] = 1\n","    mask = np.roll(np.concatenate([mask] * 4, 1), 3 * w // 8, 1)\n","\n","    tp[mask] = 4\n","    tp[np.flip(mask, 0)] = 5\n","\n","    return tp.astype(np.int32)\n","\n","\n","def xyzpers(h_fov, v_fov, u, v, out_hw, in_rot):\n","    out = np.ones((*out_hw, 3), np.float32)\n","\n","    x_max = np.tan(h_fov / 2)\n","    y_max = np.tan(v_fov / 2)\n","    x_rng = np.linspace(-x_max, x_max, num=out_hw[1], dtype=np.float32)\n","    y_rng = np.linspace(-y_max, y_max, num=out_hw[0], dtype=np.float32)\n","    out[..., :2] = np.stack(np.meshgrid(x_rng, -y_rng), -1)\n","    Rx = rotation_matrix(v, [1, 0, 0])\n","    Ry = rotation_matrix(u, [0, 1, 0])\n","    Ri = rotation_matrix(in_rot, np.array([0, 0, 1.0]).dot(Rx).dot(Ry))\n","\n","    return out.dot(Rx).dot(Ry).dot(Ri)\n","\n","\n","def xyz2uv(xyz):\n","    '''\n","    xyz: ndarray in shape of [..., 3]\n","    '''\n","    x, y, z = np.split(xyz, 3, axis=-1)\n","    u = np.arctan2(x, z)\n","    c = np.sqrt(x**2 + z**2)\n","    v = np.arctan2(y, c)\n","\n","    return np.concatenate([u, v], axis=-1)\n","\n","\n","def uv2unitxyz(uv):\n","    u, v = np.split(uv, 2, axis=-1)\n","    y = np.sin(v)\n","    c = np.cos(v)\n","    x = c * np.sin(u)\n","    z = c * np.cos(u)\n","\n","    return np.concatenate([x, y, z], axis=-1)\n","\n","\n","def uv2coor(uv, h, w):\n","    '''\n","    uv: ndarray in shape of [..., 2]\n","    h: int, height of the equirectangular image\n","    w: int, width of the equirectangular image\n","    '''\n","    u, v = np.split(uv, 2, axis=-1)\n","    coor_x = (u / (2 * np.pi) + 0.5) * w - 0.5\n","    coor_y = (-v / np.pi + 0.5) * h - 0.5\n","\n","    return np.concatenate([coor_x, coor_y], axis=-1)\n","\n","\n","def coor2uv(coorxy, h, w):\n","    coor_x, coor_y = np.split(coorxy, 2, axis=-1)\n","    u = ((coor_x + 0.5) / w - 0.5) * 2 * np.pi\n","    v = -((coor_y + 0.5) / h - 0.5) * np.pi\n","\n","    return np.concatenate([u, v], axis=-1)\n","\n","\n","def sample_equirec(e_img, coor_xy, order):\n","    w = e_img.shape[1]\n","    coor_x, coor_y = np.split(coor_xy, 2, axis=-1)\n","    pad_u = np.roll(e_img[[0]], w // 2, 1)\n","    pad_d = np.roll(e_img[[-1]], w // 2, 1)\n","    e_img = np.concatenate([e_img, pad_d, pad_u], 0)\n","    return map_coordinates(e_img, [coor_y, coor_x],\n","                           order=order, mode='wrap')[..., 0]\n","\n","\n","def sample_cubefaces(cube_faces, tp, coor_y, coor_x, order):\n","    cube_faces = cube_faces.copy()\n","    cube_faces[1] = np.flip(cube_faces[1], 1)\n","    cube_faces[2] = np.flip(cube_faces[2], 1)\n","    cube_faces[4] = np.flip(cube_faces[4], 0)\n","\n","    # Pad up down\n","    pad_ud = np.zeros((6, 2, cube_faces.shape[2]))\n","    pad_ud[0, 0] = cube_faces[5, 0, :]\n","    pad_ud[0, 1] = cube_faces[4, -1, :]\n","    pad_ud[1, 0] = cube_faces[5, :, -1]\n","    pad_ud[1, 1] = cube_faces[4, ::-1, -1]\n","    pad_ud[2, 0] = cube_faces[5, -1, ::-1]\n","    pad_ud[2, 1] = cube_faces[4, 0, ::-1]\n","    pad_ud[3, 0] = cube_faces[5, ::-1, 0]\n","    pad_ud[3, 1] = cube_faces[4, :, 0]\n","    pad_ud[4, 0] = cube_faces[0, 0, :]\n","    pad_ud[4, 1] = cube_faces[2, 0, ::-1]\n","    pad_ud[5, 0] = cube_faces[2, -1, ::-1]\n","    pad_ud[5, 1] = cube_faces[0, -1, :]\n","    cube_faces = np.concatenate([cube_faces, pad_ud], 1)\n","\n","    # Pad left right\n","    pad_lr = np.zeros((6, cube_faces.shape[1], 2))\n","    pad_lr[0, :, 0] = cube_faces[1, :, 0]\n","    pad_lr[0, :, 1] = cube_faces[3, :, -1]\n","    pad_lr[1, :, 0] = cube_faces[2, :, 0]\n","    pad_lr[1, :, 1] = cube_faces[0, :, -1]\n","    pad_lr[2, :, 0] = cube_faces[3, :, 0]\n","    pad_lr[2, :, 1] = cube_faces[1, :, -1]\n","    pad_lr[3, :, 0] = cube_faces[0, :, 0]\n","    pad_lr[3, :, 1] = cube_faces[2, :, -1]\n","    pad_lr[4, 1:-1, 0] = cube_faces[1, 0, ::-1]\n","    pad_lr[4, 1:-1, 1] = cube_faces[3, 0, :]\n","    pad_lr[5, 1:-1, 0] = cube_faces[1, -2, :]\n","    pad_lr[5, 1:-1, 1] = cube_faces[3, -2, ::-1]\n","    cube_faces = np.concatenate([cube_faces, pad_lr], 2)\n","\n","    return map_coordinates(cube_faces, [tp, coor_y, coor_x], order=order, mode='wrap')\n","\n","\n","def cube_h2list(cube_h):\n","    assert cube_h.shape[0] * 6 == cube_h.shape[1]\n","    return np.split(cube_h, 6, axis=1)\n","\n","\n","def cube_list2h(cube_list):\n","    assert len(cube_list) == 6\n","    assert sum(face.shape == cube_list[0].shape for face in cube_list) == 6\n","    return np.concatenate(cube_list, axis=1)\n","\n","\n","def cube_h2dict(cube_h):\n","    cube_list = cube_h2list(cube_h)\n","    return dict([(k, cube_list[i])\n","                 for i, k in enumerate(['F', 'R', 'B', 'L', 'U', 'D'])])\n","\n","\n","def cube_dict2h(cube_dict, face_k=['F', 'R', 'B', 'L', 'U', 'D']):\n","    assert len(face_k) == 6\n","    return cube_list2h([cube_dict[k] for k in face_k])\n","\n","\n","def cube_h2cutout(cube_h):\n","    assert cube_h.shape[0] * 6 == cube_h.shape[1]\n","    w=cube_h.shape[0]\n","    cube_cutout= np.zeros((w*5, w*6, cube_h.shape[2]), dtype=cube_h.dtype)\n","    cube_list= cube_h2list(cube_h)\n","    # order : F R B L U D\n","    sxy = [(0,2,2) , (1,1,4) , (1,2,4) , (1,3,4) , (1,4,4) , (2,0,2) , (2,1,3) , (2,2,0) , (2,3,1) , (2,4,2) , (2,5,3) , (3,1,5) , (3,2,5) , (3,3,5) , (3,4,5) , (4,2,2)]\n","    for (sy,sx,i) in sxy:\n","\n","      face= cube_list[i]\n","\n","      if i in [1, 2]:\n","          face = np.flip(face, axis=1)\n","      if i == 4:\n","          face = np.flip(face, axis=0)\n","      \n","      if sx == 1:\n","          if sy == 1 :\n","              face=numpy.rot90(face, k=1, axes=(0, 1))\n","          if sy == 3 :\n","              face=numpy.rot90(face, k=1, axes=(1, 0))\n","          if sy == 4 :\n","              face=numpy.rot90(face, k=1, axes=(1, 0))\n","              face=numpy.rot90(face, k=1, axes=(1, 0))\n","      if sx == 3:\n","          if sy == 1 :\n","              face=numpy.rot90(face, k=1, axes=(1, 0))\n","          if sy == 3 :\n","              face=numpy.rot90(face, k=1, axes=(0, 1))\n","          if sy == 4 : \n","              face=numpy.rot90(face, k=1, axes=(1, 0))\n","              face=numpy.rot90(face, k=1, axes=(1, 0))\n","      if sx == 0 or sx == 4 :\n","          face=numpy.rot90(face, k=1, axes=(1, 0))\n","          face=numpy.rot90(face, k=1, axes=(1, 0))\n","          \n","      cube_cutout[sy*w:(sy+1)*w , sx*w:(sx+1)*w] = face\n","      \n","    return cube_cutout\n","\n","\n","def cube_h2dice(cube_h):\n","    assert cube_h.shape[0] * 6 == cube_h.shape[1]\n","    w = cube_h.shape[0]\n","    cube_dice = np.zeros((w * 3, w * 4, cube_h.shape[2]), dtype=cube_h.dtype)\n","    cube_list = cube_h2list(cube_h)\n","    # Order: F R B L U D\n","    sxy = [(1, 1), (2, 1), (3, 1), (0, 1), (1, 0), (1, 2)]\n","    for i, (sx, sy) in enumerate(sxy):\n","        face = cube_list[i]\n","        if i in [1, 2]:\n","            face = np.flip(face, axis=1)\n","        if i == 4:\n","            face = np.flip(face, axis=0)\n","        cube_dice[sy*w:(sy+1)*w, sx*w:(sx+1)*w] = face\n","    return cube_dice\n","\n","\n","def cube_dice2h(cube_dice):\n","    w = cube_dice.shape[0] // 3\n","    assert cube_dice.shape[0] == w * 3 and cube_dice.shape[1] == w * 4\n","    cube_h = np.zeros((w, w * 6, cube_dice.shape[2]), dtype=cube_dice.dtype)\n","    # Order: F R B L U D\n","    sxy = [(1, 1), (2, 1), (3, 1), (0, 1), (1, 0), (1, 2)]\n","    for i, (sx, sy) in enumerate(sxy):\n","        face = cube_dice[sy*w:(sy+1)*w, sx*w:(sx+1)*w]\n","        if i in [1, 2]:\n","            face = np.flip(face, axis=1)\n","        if i == 4:\n","            face = np.flip(face, axis=0)\n","        cube_h[:, i*w:(i+1)*w] = face\n","    return cube_h\n","\n","\n","def rotation_matrix(rad, ax):\n","    ax = np.array(ax)\n","    assert len(ax.shape) == 1 and ax.shape[0] == 3\n","    ax = ax / np.sqrt((ax**2).sum())\n","    R = np.diag([np.cos(rad)] * 3)\n","    R = R + np.outer(ax, ax) * (1.0 - np.cos(rad))\n","\n","    ax = ax * np.sin(rad)\n","    R = R + np.array([[0, -ax[2], ax[1]],\n","                      [ax[2], 0, -ax[0]],\n","                      [-ax[1], ax[0], 0]])\n","\n","    return R"],"metadata":{"id":"jxMInr_NEJLC","executionInfo":{"status":"ok","timestamp":1640719925294,"user_tz":-330,"elapsed":1428,"user":{"displayName":"Diksha Jena (B20CS013)","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"03488940742474601522"}}},"execution_count":5,"outputs":[]},{"cell_type":"code","source":["def e2c(e_img, face_w=256, mode='bilinear', cube_format='dice'):\n","    '''\n","    e_img:  ndarray in shape of [H, W, *]\n","    face_w: int, the length of each face of the cubemap\n","    '''\n","    assert len(e_img.shape) == 3\n","    h, w = e_img.shape[:2]\n","    if mode == 'bilinear':\n","        order = 1\n","    elif mode == 'nearest':\n","        order = 0\n","    else:\n","        raise NotImplementedError('unknown mode')\n","\n","    xyz = xyzcube(face_w)\n","    uv = xyz2uv(xyz)\n","    coor_xy = uv2coor(uv, h, w)\n","\n","    cubemap = np.stack([\n","        sample_equirec(e_img[..., i], coor_xy, order=order)\n","        for i in range(e_img.shape[2])\n","    ], axis=-1)\n","\n","    if cube_format == 'horizon':\n","        pass\n","    elif cube_format == 'list':\n","        cubemap = cube_h2list(cubemap)\n","    elif cube_format == 'dict':\n","        cubemap = cube_h2dict(cubemap)\n","    elif cube_format == 'extended_cutout':\n","        cubemap = cube_h2cutout(cubemap)\n","    elif cube_format == 'dice':\n","        cubemap = cube_h2dice(cubemap)\n","    else:\n","        raise NotImplementedError()\n","\n","    return cubemap"],"metadata":{"id":"RTe_4Xn0ESZ0","executionInfo":{"status":"ok","timestamp":1640719925295,"user_tz":-330,"elapsed":21,"user":{"displayName":"Diksha Jena (B20CS013)","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"03488940742474601522"}}},"execution_count":6,"outputs":[]},{"cell_type":"markdown","source":["### Functions for saliency output"],"metadata":{"id":"wgQABUTpEcnO"}},{"cell_type":"code","source":["def getGaborKernel(gaborparams, angle, phase):\n","    gp = gaborparams\n","    major_sd = gp['stddev']\n","    minor_sd = major_sd * gp['elongation']\n","    max_sd = max(major_sd, minor_sd)\n","\n","    sz = gp['filterSize']\n","    if sz == -1:\n","        sz = math.ceil(max_sd * math.sqrt(10))\n","    else:\n","        sz = math.floor(sz / 2)\n","\n","    psi = np.pi / 180 * phase\n","    rtDeg = np.pi / 180 * angle\n","\n","    omega = 2 * np.pi / gp['filterPeriod']\n","    co = math.cos(rtDeg)\n","    si = -math.sin(rtDeg)\n","    major_sigq = 2 * pow(major_sd, 2)\n","    minor_sigq = 2 * pow(minor_sd, 2)\n","\n","    vec = range(-int(sz), int(sz) + 1)\n","    vlen = len(vec)\n","    vco = [i * co for i in vec]\n","    vsi = [i * si for i in vec]\n","\n","    a = np.tile(np.asarray(vco).transpose(), (vlen, 1)).transpose()\n","    b = np.matlib.repmat(vsi, vlen, 1)\n","    major = a + b\n","    major2 = np.power(major, 2)\n","\n","    a = np.tile(np.asarray(vsi).transpose(), (vlen, 1)).transpose()\n","    b = np.matlib.repmat(vco, vlen, 1)\n","    minor = a + b\n","    minor2 = np.power(minor, 2)\n","\n","    a = np.cos(omega * major + psi)\n","    b = np.exp(-major2 / major_sigq - minor2 / minor_sigq)\n","    result = np.multiply(a, b)\n","\n","    filter1 = np.subtract(result, np.mean(result.reshape(-1)))\n","    filter1 = np.divide(filter1, np.sqrt(np.sum(np.power(filter1.reshape(-1), 2))))\n","    return filter1"],"metadata":{"id":"m4obpZAjEgmR","executionInfo":{"status":"ok","timestamp":1640719925296,"user_tz":-330,"elapsed":21,"user":{"displayName":"Diksha Jena (B20CS013)","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"03488940742474601522"}}},"execution_count":7,"outputs":[]},{"cell_type":"code","source":["def getGaborKernels(gaborparams, thetas):\n","    gaborKernels = {}\n","    for th in thetas:\n","        gaborKernels[th] = {}\n","        gaborKernels[th]['0'] = getGaborKernel(gaborparams, th, 0)\n","        gaborKernels[th]['90'] = getGaborKernel(gaborparams, th, 90)\n","\n","    return gaborKernels"],"metadata":{"id":"UD9wCSMJElf3","executionInfo":{"status":"ok","timestamp":1640719925296,"user_tz":-330,"elapsed":21,"user":{"displayName":"Diksha Jena (B20CS013)","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"03488940742474601522"}}},"execution_count":8,"outputs":[]},{"cell_type":"code","source":["def compute(r, g, b, L):\n","    min_rg = np.minimum(r, g)\n","    b_min_rg = np.abs(np.subtract(b, min_rg))\n","    CBY = np.divide(b_min_rg, L, out=np.zeros_like(L), where=L != 0)\n","\n","    r_g = np.abs(np.subtract(r,g))\n","    CRG = np.divide(r_g, L, out=np.zeros_like(L), where=L != 0)\n","\n","    featMaps = {}\n","    featMaps['CBY'] = CBY\n","    featMaps['CRG'] = CRG\n","    featMaps['L'] = L\n","    return featMaps"],"metadata":{"id":"OHbWrc6IEnRk","executionInfo":{"status":"ok","timestamp":1640719925296,"user_tz":-330,"elapsed":20,"user":{"displayName":"Diksha Jena (B20CS013)","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"03488940742474601522"}}},"execution_count":9,"outputs":[]},{"cell_type":"code","source":["def orientcompute(L, gaborparams, thetas):\n","    kernels = getGaborKernels(gaborparams, thetas)\n","    featMaps = []\n","    for th in thetas:\n","        kernel_0  = kernels[th]['0']\n","        kernel_90 = kernels[th]['90']\n","        o1 = cv2.filter2D(L, -1, kernel_0, borderType=cv2.BORDER_REPLICATE)\n","        o2 = cv2.filter2D(L, -1, kernel_90, borderType=cv2.BORDER_REPLICATE)\n","        o = np.add(abs(o1), abs(o2))\n","        featMaps.append(o)\n","\n","    return featMaps"],"metadata":{"id":"vZDIUnnzEo4k","executionInfo":{"status":"ok","timestamp":1640719925297,"user_tz":-330,"elapsed":21,"user":{"displayName":"Diksha Jena (B20CS013)","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"03488940742474601522"}}},"execution_count":10,"outputs":[]},{"cell_type":"code","source":["def loadGraphDistanceMatrixFor28x32():\n","    f = scipy.io.loadmat(\"/dir/My Drive/Design_Credit/Additional Files/28__32__m__2.mat\")\n","    distanceMat = np.array(f['grframe'])[0][0][0]\n","    lx = np.array(f['grframe'])[0][0][1]\n","    dim = np.array(f['grframe'])[0][0][2]\n","    return [distanceMat, lx, dim]"],"metadata":{"id":"fLuNZF45EqXD","executionInfo":{"status":"ok","timestamp":1640719925297,"user_tz":-330,"elapsed":21,"user":{"displayName":"Diksha Jena (B20CS013)","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"03488940742474601522"}}},"execution_count":11,"outputs":[]},{"cell_type":"code","source":["def solve(mat, tolerance):\n","    w,h = mat.shape\n","    diff = 1\n","    v = np.divide(np.ones((w, 1), dtype=np.float32), w)\n","    oldv = v\n","    oldoldv = v\n","\n","    while diff > tolerance :\n","        oldv = v\n","        oldoldv = oldv\n","        v = np.dot(mat,v)\n","        diff = np.linalg.norm(oldv - v, ord=2)\n","        s = sum(v)\n","        if s>=0 and s< np.inf:\n","            continue\n","        else:\n","            v = oldoldv\n","            break\n","\n","    v = np.divide(v, sum(v))\n","\n","    return v"],"metadata":{"id":"qIx1z266EsQb","executionInfo":{"status":"ok","timestamp":1640719925298,"user_tz":-330,"elapsed":22,"user":{"displayName":"Diksha Jena (B20CS013)","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"03488940742474601522"}}},"execution_count":12,"outputs":[]},{"cell_type":"code","source":["def getPyramids(image, max_level):\n","    imagePyr = [cv2.pyrDown(image)]\n","    for i in range(1, max_level):\n","        # imagePyr.append(cv2.resize(p, (32, 28), interpolation=cv2.INTER_CUBIC))\n","        imagePyr.append(cv2.pyrDown(imagePyr[i-1]))\n","    return imagePyr[1:]"],"metadata":{"id":"5-fWoSw0EueL","executionInfo":{"status":"ok","timestamp":1640719925298,"user_tz":-330,"elapsed":21,"user":{"displayName":"Diksha Jena (B20CS013)","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"03488940742474601522"}}},"execution_count":13,"outputs":[]},{"cell_type":"code","source":["def calculateFeatureMaps(r, g, b, L, params):\n","    colorMaps = compute(r, g, b, L)\n","    orientationMaps = orientcompute(L, params['gaborparams'], params['thetas'])\n","    allFeatureMaps = {\n","        0: colorMaps['CBY'],\n","        1: colorMaps['CRG'],\n","        2: colorMaps['L'],\n","        3: orientationMaps\n","    }\n","    return allFeatureMaps"],"metadata":{"id":"jAxtYwJg6LxD","executionInfo":{"status":"ok","timestamp":1640719925298,"user_tz":-330,"elapsed":21,"user":{"displayName":"Diksha Jena (B20CS013)","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"03488940742474601522"}}},"execution_count":14,"outputs":[]},{"cell_type":"code","source":["def calculate(map, sigma):\n","    [distanceMat, _, _] = loadGraphDistanceMatrixFor28x32()\n","    denom = 2 * pow(sigma, 2)\n","    expr = -np.divide(distanceMat, denom)\n","    Fab = np.exp(expr)\n","\n","    map_linear = np.ravel(map, order='F')  # column major\n","\n","    state_transition_matrix = Fab * np.abs(\n","        (np.zeros((distanceMat.shape[0], distanceMat.shape[1])) + map_linear).T - map_linear).T\n","\n","    norm_STM = sklearn.preprocessing.normalize(state_transition_matrix, axis=0, norm='l1')\n","\n","    eVec = solve(norm_STM, 0.0001)\n","    processed_reshaped = np.reshape(eVec, map.shape, order='F')\n","\n","    return processed_reshaped"],"metadata":{"id":"dAmiTORSEzaf","executionInfo":{"status":"ok","timestamp":1640719925299,"user_tz":-330,"elapsed":22,"user":{"displayName":"Diksha Jena (B20CS013)","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"03488940742474601522"}}},"execution_count":15,"outputs":[]},{"cell_type":"code","source":["def normalize(map, sigma):\n","    [distanceMat, _, _] = loadGraphDistanceMatrixFor28x32()\n","    denom = 2 * pow(sigma, 2)\n","    expr = -np.divide(distanceMat, denom)\n","    Fab = np.exp(expr)\n","\n","    map_linear = np.ravel(map, order='F')\n","    state_transition_matrix = (Fab.T * np.abs(map_linear)).T\n","\n","    norm_STM = sklearn.preprocessing.normalize(state_transition_matrix, axis=0, norm='l1')\n","\n","    eVec = solve(norm_STM, 0.0001)\n","    processed_reshaped = np.reshape(eVec, map.shape, order='F')\n","\n","    return processed_reshaped"],"metadata":{"id":"axUS04oVE0-S","executionInfo":{"status":"ok","timestamp":1640719925299,"user_tz":-330,"elapsed":21,"user":{"displayName":"Diksha Jena (B20CS013)","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"03488940742474601522"}}},"execution_count":16,"outputs":[]},{"cell_type":"code","source":["def run(image, params):\n","    b = image[:,:,0]\n","    g = image[:,:,1]\n","    r = image[:,:,2]\n","    L = np.maximum(np.maximum(r, g), b)\n","\n","    b_pyr = getPyramids(b, params['max_level'])\n","    g_pyr = getPyramids(g, params['max_level'])\n","    r_pyr = getPyramids(r, params['max_level'])\n","    L_pyr = getPyramids(L, params['max_level'])\n","\n","    featMaps = {\n","        0: [],\n","        1: [],\n","        2: [],\n","        3: []\n","    }\n","\n","    for i in range(0, len(b_pyr)):\n","        p_r = r_pyr[i]\n","        p_g = g_pyr[i]\n","        p_b = b_pyr[i]\n","        p_L = L_pyr[i]\n","\n","        maps = calculateFeatureMaps(p_r, p_g, p_b, p_L, params)\n","\n","        for i in range(0,3):\n","            resized_m = cv2.resize(maps[i], (32, 28), interpolation=cv2.INTER_CUBIC)\n","            featMaps[i].append(resized_m)\n","\n","        for m in maps[3]:\n","            resized_m = cv2.resize(m, (32, 28), interpolation=cv2.INTER_CUBIC)\n","            featMaps[3].append(resized_m)\n","\n","    activationMaps = []\n","    activation_sigma = params['sigma_frac_act']*np.mean([32, 28])\n","\n","    for i in range(0,4):\n","        for map in featMaps[i]:\n","            activationMaps.append(calculate(map, activation_sigma))\n","\n","    normalisedActivationMaps = []\n","    normalisation_sigma = params['sigma_frac_norm']*np.mean([32, 28])\n","\n","    for map in activationMaps:\n","        normalisedActivationMaps.append(normalize(map, normalisation_sigma))\n","\n","    mastermap = normalisedActivationMaps[0]\n","    for i in range(1, len(normalisedActivationMaps)):\n","        mastermap = np.add(normalisedActivationMaps[i], mastermap)\n","\n","    gray = cv2.normalize(mastermap, None, alpha=0, beta=1, norm_type=cv2.NORM_MINMAX, dtype=cv2.CV_32F)\n","    mastermap_res = cv2.resize(gray, (image.shape[1], image.shape[0]), interpolation=cv2.INTER_CUBIC)\n","\n","    return mastermap_res"],"metadata":{"id":"RRHT90_DE2x5","executionInfo":{"status":"ok","timestamp":1640719925300,"user_tz":-330,"elapsed":20,"user":{"displayName":"Diksha Jena (B20CS013)","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"03488940742474601522"}}},"execution_count":17,"outputs":[]},{"cell_type":"code","source":["def NormalizeData(data):\n","  if(np.max(data)>255.0 or np.min(data)<0.0)  :\n","    return ((data - np.min(data)) / (np.max(data) - np.min(data)))*255.0\n","  else:\n","    return data"],"metadata":{"id":"JF4DIW6BE5cf","executionInfo":{"status":"ok","timestamp":1640719925300,"user_tz":-330,"elapsed":20,"user":{"displayName":"Diksha Jena (B20CS013)","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"03488940742474601522"}}},"execution_count":18,"outputs":[]},{"cell_type":"code","source":["def saliency(image, params):\n","  return NormalizeData(run(image/255.0, params))"],"metadata":{"id":"ytlSgVYqE7FO","executionInfo":{"status":"ok","timestamp":1640719925300,"user_tz":-330,"elapsed":19,"user":{"displayName":"Diksha Jena (B20CS013)","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"03488940742474601522"}}},"execution_count":19,"outputs":[]},{"cell_type":"markdown","source":["### Reverse Mapping"],"metadata":{"id":"DmQVlzIZE8xx"}},{"cell_type":"code","source":["def c2e(cubemap, h, w, mode='bilinear', cube_format='dice'):\n","    if mode == 'bilinear':\n","        order = 1\n","    elif mode == 'nearest':\n","        order = 0\n","    else:\n","        raise NotImplementedError('unknown mode')\n","\n","    if cube_format == 'horizon':\n","        pass\n","    elif cube_format == 'list':\n","        cubemap = cube_list2h(cubemap)\n","    elif cube_format == 'dict':\n","        cubemap = cube_dict2h(cubemap)\n","    elif cube_format == 'dice':\n","        cubemap = cube_dice2h(cubemap)\n","    else:\n","        raise NotImplementedError('unknown cube_format')\n","    assert len(cubemap.shape) == 3\n","    assert cubemap.shape[0] * 6 == cubemap.shape[1]\n","    assert w % 8 == 0\n","    face_w = cubemap.shape[0]\n","\n","    uv = equirect_uvgrid(h, w)\n","    u, v = np.split(uv, 2, axis=-1)\n","    u = u[..., 0]\n","    v = v[..., 0]\n","    cube_faces = np.stack(np.split(cubemap, 6, 1), 0)\n","\n","    # Get face id to each pixel: 0F 1R 2B 3L 4U 5D\n","    tp = equirect_facetype(h, w)\n","    coor_x = np.zeros((h, w))\n","    coor_y = np.zeros((h, w))\n","\n","    for i in range(4):\n","        mask = (tp == i)\n","        coor_x[mask] = 0.5 * np.tan(u[mask] - np.pi * i / 2)\n","        coor_y[mask] = -0.5 * np.tan(v[mask]) / np.cos(u[mask] - np.pi * i / 2)\n","\n","    mask = (tp == 4)\n","    c = 0.5 * np.tan(np.pi / 2 - v[mask])\n","    coor_x[mask] = c * np.sin(u[mask])\n","    coor_y[mask] = c * np.cos(u[mask])\n","\n","    mask = (tp == 5)\n","    c = 0.5 * np.tan(np.pi / 2 - np.abs(v[mask]))\n","    coor_x[mask] = c * np.sin(u[mask])\n","    coor_y[mask] = -c * np.cos(u[mask])\n","\n","    # Final renormalize\n","    coor_x = (np.clip(coor_x, -0.5, 0.5) + 0.5) * face_w\n","    coor_y = (np.clip(coor_y, -0.5, 0.5) + 0.5) * face_w\n","\n","    equirec = np.stack([\n","        sample_cubefaces(cube_faces[..., i], tp, coor_y, coor_x, order=order)\n","        for i in range(cube_faces.shape[3])\n","    ], axis=-1)\n","\n","    return equirec"],"metadata":{"id":"lqHuvBXEE-5J","executionInfo":{"status":"ok","timestamp":1640719925301,"user_tz":-330,"elapsed":20,"user":{"displayName":"Diksha Jena (B20CS013)","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"03488940742474601522"}}},"execution_count":20,"outputs":[]},{"cell_type":"markdown","source":["### Functions for Comparisions"],"metadata":{"id":"Aqk_Y8u0FFQZ"}},{"cell_type":"code","source":["def normalize_metric(x, method='standard', axis=None):\n","\tx = np.array(x, copy=False)\n","\tif axis is not None:\n","\t\ty = np.rollaxis(x, axis).reshape([x.shape[axis], -1])\n","\t\tshape = np.ones(len(x.shape))\n","\t\tshape[axis] = x.shape[axis]\n","\t\tif method == 'standard':\n","\t\t\tres = (x - np.mean(y, axis=1).reshape(shape)) / np.std(y, axis=1).reshape(shape)\n","\t\telif method == 'range':\n","\t\t\tres = (x - np.min(y, axis=1).reshape(shape)) / (np.max(y, axis=1) - np.min(y, axis=1)).reshape(shape)\n","\t\telif method == 'sum':\n","\t\t\tres = x / np.float_(np.sum(y, axis=1).reshape(shape))\n","\t\telse:\n","\t\t\traise ValueError('method not in {\"standard\", \"range\", \"sum\"}')\n","\telse:\n","\t\tif method == 'standard':\n","\t\t\tres = (x - np.mean(x)) / np.std(x)\n","\t\telif method == 'range':\n","\t\t\tres = (x - np.min(x)) / (np.max(x) - np.min(x))\n","\t\telif method == 'sum':\n","\t\t\tres = x / float(np.sum(x))\n","\t\telse:\n","\t\t\traise ValueError('method not in {\"standard\", \"range\", \"sum\"}')\n","\treturn res"],"metadata":{"id":"OMyloae6FIvK","executionInfo":{"status":"ok","timestamp":1640719925301,"user_tz":-330,"elapsed":19,"user":{"displayName":"Diksha Jena (B20CS013)","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"03488940742474601522"}}},"execution_count":21,"outputs":[]},{"cell_type":"code","source":["def KLD(p, q):\n","\tp = normalize_metric(p, method='sum')\n","\tq = normalize_metric(q, method='sum')\n","\treturn np.sum(np.where(p != 0, p * np.log((p+EPSILON) / (q+EPSILON)), 0))"],"metadata":{"id":"7gFOWFL2FQds","executionInfo":{"status":"ok","timestamp":1640719925301,"user_tz":-330,"elapsed":19,"user":{"displayName":"Diksha Jena (B20CS013)","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"03488940742474601522"}}},"execution_count":22,"outputs":[]},{"cell_type":"code","source":["def CC(saliency_map1, saliency_map2):\n","\tmap1 = np.array(saliency_map1, copy=False)\n","\tmap2 = np.array(saliency_map2, copy=False)\n","\tif map1.shape != map2.shape:\n","\t\tmap1 = resize(map1, map2.shape, order=3, mode='constant') \n","\tmap1 = normalize_metric(map1, method='standard')\n","\tmap2 = normalize_metric(map2, method='standard')\n","\treturn np.corrcoef(map1.ravel(), map2.ravel())[0,1]"],"metadata":{"id":"itLvMxFMFSLO","executionInfo":{"status":"ok","timestamp":1640719925302,"user_tz":-330,"elapsed":20,"user":{"displayName":"Diksha Jena (B20CS013)","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"03488940742474601522"}}},"execution_count":23,"outputs":[]},{"cell_type":"code","source":["def SIM(saliency_map1, saliency_map2):\n","\tmap1 = np.array(saliency_map1, copy=False)\n","\tmap2 = np.array(saliency_map2, copy=False)\n","\tif map1.shape != map2.shape:\n","\t\tmap1 = resize(map1, map2.shape, order=3, mode='constant') \n","\tmap1 = normalize_metric(map1, method='range')\n","\tmap2 = normalize_metric(map2, method='range')\n","\tmap1 = normalize_metric(map1, method='sum')\n","\tmap2 = normalize_metric(map2, method='sum')\n","\tintersection = np.minimum(map1, map2)\n","\treturn np.sum(intersection)"],"metadata":{"id":"YssA1TV0FTtU","executionInfo":{"status":"ok","timestamp":1640719925304,"user_tz":-330,"elapsed":21,"user":{"displayName":"Diksha Jena (B20CS013)","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"03488940742474601522"}}},"execution_count":24,"outputs":[]},{"cell_type":"code","source":["def jsd(p, q, base=np.e):\n","\treturn sp.spatial.distance.jensenshannon(p.flatten(),q.flatten())"],"metadata":{"id":"yGSTrp5zFVNF","executionInfo":{"status":"ok","timestamp":1640719925305,"user_tz":-330,"elapsed":21,"user":{"displayName":"Diksha Jena (B20CS013)","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"03488940742474601522"}}},"execution_count":25,"outputs":[]},{"cell_type":"markdown","source":["### Main Function"],"metadata":{"id":"cd9liCtRFXcQ"}},{"cell_type":"code","source":["gaborparams = {\n","        'stddev': 2,\n","        'elongation': 2,\n","        'filterSize': -1,\n","        'filterPeriod': np.pi\n","}\n","\n","params = {\n","        'gaborparams': gaborparams,\n","        'sigma_frac_act': 0.15,\n","        'sigma_frac_norm': 0.06,\n","        'max_level': 4,\n","        'thetas': [0, 45, 90, 135]\n","}"],"metadata":{"id":"OBskhbDQFY9W","executionInfo":{"status":"ok","timestamp":1640719925305,"user_tz":-330,"elapsed":20,"user":{"displayName":"Diksha Jena (B20CS013)","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"03488940742474601522"}}},"execution_count":26,"outputs":[]},{"cell_type":"code","source":["def function(image, compare, params=params ,height=1024, width=2048):\n","\n","  cubemap = e2c(image, cube_format='list')\n","  front, right, bottom, left, up, down =cubemap\n","\n","  l=[ [front, \"Front\"] , [right, 'Right'] , [bottom, \"Bottom\"] , [left, \"Left\"] , [up, \"Up\"] , [down, \"Down\"] ]\n","  eqr=image\n","  \n","  flip=np.zeros([height, width, 3])\n","  flip[:,0:width//2,:] = eqr[:, width//2:,:]\n","  flip[:,width//2:,:] = eqr[:,0:width//2,:]\n","\n","  eqr_s=saliency(eqr, params)\n","\n","  temp=saliency(flip, params)\n","  flip_s=np.zeros([height, width])\n","  flip_s[:,0:width//2] = temp[:, width//2:]\n","  flip_s[:,width//2:] = temp[:,0:width//2]\n","\n","  face_weight=[0.70, 0.10, 0.10, 0.8, 0.015, 0.005]\n","  l_s=[ [\"\", \"Front\"] , [\"\", \"Right\"] , [\"\", \"Bottom\"] , [\"\", \"Left\"] , [\"\", \"Up\"] , [\"\", \"Down\"] ]\n","  for i in range(6):\n","    l_s[i][0]=saliency(l[i][0], params)*face_weight[i]\n","\n","  for i in l_s:\n","    i[0]=i[0][..., np.newaxis]\n","\n","    cube_list=[l_s[i][0] for i in range(6)]\n","\n","  cube_sal=np.concatenate(cube_list, axis=1)\n","\n","  cmpsal = cube_h2dice(cube_sal)\n","  cube_s = e2c(cmpsal,cube_format='extended_cutout')\n","  w=256\n","  cube_dice= np.zeros((w*3, w*4, cube_s.shape[2]), dtype=cube_s.dtype)\n","  # order : F R B L U D\n","  sxy = [(1,2, 0,1), (2,1 ,1,0), (2,2 ,1,1), (2,3 ,1,2), (2,4 ,1,3), (3,2 ,2,1)]\n","  for (sy,sx,cy,cx) in sxy:\n","      cube_dice[cy*w:(cy+1)*w , cx*w:(cx+1)*w] = cube_s[sy*w:(sy+1)*w, sx*w:(sx+1)*w]\n","\n","  face_s=NormalizeData(c2e(cube_dice,height,width,'bilinear','dice'))\n","\n","\n","  output1=np.squeeze(face_s,axis=(2,))\n","  output2=flip_s\n","  output3=eqr_s\n","\n","  output=np.zeros([height, width])\n","  for i in range(height):\n","    for j in range(width):\n","      output[i][j]=max(output1[i][j], output2[i][j], output2[i][j])\n","\n","  return (KLD(output,compare),CC(output,compare),SIM(output,compare),jsd(output,compare))"],"metadata":{"id":"XPug_ruQkKwv","executionInfo":{"status":"ok","timestamp":1640719925929,"user_tz":-330,"elapsed":644,"user":{"displayName":"Diksha Jena (B20CS013)","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"03488940742474601522"}}},"execution_count":27,"outputs":[]},{"cell_type":"markdown","source":["###Processing"],"metadata":{"id":"q1cTjbB4FdPU"}},{"cell_type":"code","source":["dataset_url = \"/dir/My Drive/Design_Credit/Data_Set/Sorted_Stimuli/*\"\n","salmap_url = \"/dir/My Drive/Design_Credit/Data_Set/Sorted_SalMap/*.png\""],"metadata":{"id":"fDA90v1zFfyd","executionInfo":{"status":"ok","timestamp":1640719925930,"user_tz":-330,"elapsed":5,"user":{"displayName":"Diksha Jena (B20CS013)","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"03488940742474601522"}}},"execution_count":28,"outputs":[]},{"cell_type":"code","source":["col1=[img for img in glob.glob(dataset_url) ]\n","col2=[map for map in glob.glob(salmap_url) ]\n","col1.sort()\n","col2.sort()"],"metadata":{"id":"_lmlXD5cFigh","executionInfo":{"status":"ok","timestamp":1640719925930,"user_tz":-330,"elapsed":5,"user":{"displayName":"Diksha Jena (B20CS013)","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"03488940742474601522"}}},"execution_count":29,"outputs":[]},{"cell_type":"code","source":["height=1024\n","width=2048"],"metadata":{"id":"DS_11c-ZFjVX","executionInfo":{"status":"ok","timestamp":1640719925930,"user_tz":-330,"elapsed":4,"user":{"displayName":"Diksha Jena (B20CS013)","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"03488940742474601522"}}},"execution_count":30,"outputs":[]},{"cell_type":"code","source":["output=[]\n","for i in range(85):\n","  image=np.asarray(PIL.Image.open(col1[i]))\n","  salMap=np.asarray(PIL.Image.open(col2[i]))\n","  array_input=((image - np.min(image)) / (np.max(image) - np.min(image)))\n","\n","  image=cv2.resize(array_input, dsize=(width, height))\n","  compare=cv2.cvtColor(salMap,cv2.COLOR_BGR2GRAY)\n","  result=function(image,compare, params)\n","  output.append(result)\n","  #print(\"KLD = \",result[0],end='\\t')\n","  #print(\"CC = \",result[1],end='\\t')\n","  #print(\"SIM = \",result[2],end='\\t')\n","  #print(\"jsd = \",result[3],end='\\t')\n","  #print()\n","\n","  #train_data.append([cv2.resize(array_input, dsize=(width, height), interpolation=cv2.INTER_CUBIC), cv2.cvtColor(salMap,cv2.COLOR_BGR2GRAY)])\n","#train_data=pd.DataFrame(train_data, columns=['image', 'output'], index=None)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"muiwh_n5FlIa","executionInfo":{"status":"ok","timestamp":1640724153886,"user_tz":-330,"elapsed":4157035,"user":{"displayName":"Diksha Jena (B20CS013)","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"03488940742474601522"}},"outputId":"0a9ef76e-274d-4b13-867c-e9a6732d87c0"},"execution_count":33,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/PIL/Image.py:2800: DecompressionBombWarning: Image size (128000000 pixels) exceeds limit of 89478485 pixels, could be decompression bomb DOS attack.\n","  DecompressionBombWarning,\n","/usr/local/lib/python3.7/dist-packages/PIL/Image.py:2800: DecompressionBombWarning: Image size (168031112 pixels) exceeds limit of 89478485 pixels, could be decompression bomb DOS attack.\n","  DecompressionBombWarning,\n","/usr/local/lib/python3.7/dist-packages/PIL/Image.py:2800: DecompressionBombWarning: Image size (166786848 pixels) exceeds limit of 89478485 pixels, could be decompression bomb DOS attack.\n","  DecompressionBombWarning,\n","/usr/local/lib/python3.7/dist-packages/PIL/Image.py:2800: DecompressionBombWarning: Image size (166348800 pixels) exceeds limit of 89478485 pixels, could be decompression bomb DOS attack.\n","  DecompressionBombWarning,\n","/usr/local/lib/python3.7/dist-packages/PIL/Image.py:2800: DecompressionBombWarning: Image size (134217728 pixels) exceeds limit of 89478485 pixels, could be decompression bomb DOS attack.\n","  DecompressionBombWarning,\n"]}]},{"cell_type":"code","source":["cell_list = worksheet.range('A1:D85')\n","i=0\n","j=0\n","for cell in cell_list:\n","  cell.value = output[i][j]\n","  j+=1\n","  if(j==4):\n","    i+=1\n","    j=0\n","  \n","worksheet.update_cells(cell_list)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"UYZP283zFnhR","executionInfo":{"status":"ok","timestamp":1640724254388,"user_tz":-330,"elapsed":1113,"user":{"displayName":"Diksha Jena (B20CS013)","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"03488940742474601522"}},"outputId":"c473ce22-47c7-4100-c0d5-2c474a14c3ed"},"execution_count":36,"outputs":[{"output_type":"execute_result","data":{"text/plain":["{'spreadsheetId': '1Uu1SG1jjtD9ZQNFEk_ye7in-yaW1ET12YFsXifK8uVI',\n"," 'updatedCells': 340,\n"," 'updatedColumns': 4,\n"," 'updatedRange': 'Sheet1!A1:D85',\n"," 'updatedRows': 85}"]},"metadata":{},"execution_count":36}]},{"cell_type":"code","source":["#end of it :)"],"metadata":{"id":"D4oylg2zFpKj","executionInfo":{"status":"aborted","timestamp":1640724154640,"user_tz":-330,"elapsed":762,"user":{"displayName":"Diksha Jena (B20CS013)","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"03488940742474601522"}}},"execution_count":null,"outputs":[]}]}