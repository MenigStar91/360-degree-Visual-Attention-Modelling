{"cells":[{"cell_type":"markdown","metadata":{"id":"Em-RhyrywCOg"},"source":["### ."]},{"cell_type":"code","execution_count":17,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"dnI-r1FGyywB","executionInfo":{"status":"ok","timestamp":1640935902152,"user_tz":-330,"elapsed":2995,"user":{"displayName":"Devansh Naresh Bansal (B20CS094)","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgwknbTyA9PljJtQ7GuHIIqKmktlNxn_2oAj1Mztg=s64","userId":"11670938873147803370"}},"outputId":"daad19d7-1bcc-433a-922a-0c1b1528fd9d"},"outputs":[{"output_type":"stream","name":"stdout","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"]}],"source":["import numpy as np\n","import pandas as pd\n","import matplotlib.pyplot as plt\n","from matplotlib.image import imread\n","import seaborn as sns\n","from operator import add \n","import pathlib\n","import os\n","import PIL\n","import PIL.Image\n","import tensorflow as tf\n","import tensorflow_datasets as tfds\n","import csv\n","import cv2\n","\n","%matplotlib inline \n","\n","from google.colab import drive\n","drive.mount(\"/content/drive\")"]},{"cell_type":"markdown","metadata":{"id":"XRTSCN8AfJ6z"},"source":["### **Utils**"]},{"cell_type":"code","execution_count":18,"metadata":{"id":"ycXBhcnvfMLH","executionInfo":{"status":"ok","timestamp":1640935905310,"user_tz":-330,"elapsed":1130,"user":{"displayName":"Devansh Naresh Bansal (B20CS094)","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgwknbTyA9PljJtQ7GuHIIqKmktlNxn_2oAj1Mztg=s64","userId":"11670938873147803370"}}},"outputs":[],"source":["from scipy.ndimage import map_coordinates\n","\n","\n","def xyzcube(face_w):\n","    '''\n","    Return the xyz cordinates of the unit cube in [F R B L U D] format.\n","    '''\n","    out = np.zeros((face_w, face_w * 6, 3), np.float32)\n","    rng = np.linspace(-0.5, 0.5, num=face_w, dtype=np.float32)\n","    grid = np.stack(np.meshgrid(rng, -rng), -1)\n","\n","    # Front face (z = 0.5)\n","    out[:, 0*face_w:1*face_w, [0, 1]] = grid\n","    out[:, 0*face_w:1*face_w, 2] = 0.5\n","\n","    # Right face (x = 0.5)\n","    out[:, 1*face_w:2*face_w, [2, 1]] = grid\n","    out[:, 1*face_w:2*face_w, 0] = 0.5\n","\n","    # Back face (z = -0.5)\n","    out[:, 2*face_w:3*face_w, [0, 1]] = grid\n","    out[:, 2*face_w:3*face_w, 2] = -0.5\n","\n","    # Left face (x = -0.5)\n","    out[:, 3*face_w:4*face_w, [2, 1]] = grid\n","    out[:, 3*face_w:4*face_w, 0] = -0.5\n","\n","    # Up face (y = 0.5)\n","    out[:, 4*face_w:5*face_w, [0, 2]] = grid\n","    out[:, 4*face_w:5*face_w, 1] = 0.5\n","\n","    # Down face (y = -0.5)\n","    out[:, 5*face_w:6*face_w, [0, 2]] = grid\n","    out[:, 5*face_w:6*face_w, 1] = -0.5\n","\n","    return out\n","\n","\n","def equirect_uvgrid(h, w):\n","    u = np.linspace(-np.pi, np.pi, num=w, dtype=np.float32)\n","    v = np.linspace(np.pi, -np.pi, num=h, dtype=np.float32) / 2\n","\n","    return np.stack(np.meshgrid(u, v), axis=-1)\n","\n","\n","def equirect_facetype(h, w):\n","    '''\n","    0F 1R 2B 3L 4U 5D\n","    '''\n","    tp = np.roll(np.arange(4).repeat(w // 4)[None, :].repeat(h, 0), 3 * w // 8, 1)\n","\n","    # Prepare ceil mask\n","    mask = np.zeros((h, w // 4), np.bool)\n","    idx = np.linspace(-np.pi, np.pi, w // 4) / 4\n","    idx = h // 2 - np.round(np.arctan(np.cos(idx)) * h / np.pi).astype(int)\n","    for i, j in enumerate(idx):\n","        mask[:j, i] = 1\n","    mask = np.roll(np.concatenate([mask] * 4, 1), 3 * w // 8, 1)\n","\n","    tp[mask] = 4\n","    tp[np.flip(mask, 0)] = 5\n","\n","    return tp.astype(np.int32)\n","\n","\n","def xyzpers(h_fov, v_fov, u, v, out_hw, in_rot):\n","    out = np.ones((*out_hw, 3), np.float32)\n","\n","    x_max = np.tan(h_fov / 2)\n","    y_max = np.tan(v_fov / 2)\n","    x_rng = np.linspace(-x_max, x_max, num=out_hw[1], dtype=np.float32)\n","    y_rng = np.linspace(-y_max, y_max, num=out_hw[0], dtype=np.float32)\n","    out[..., :2] = np.stack(np.meshgrid(x_rng, -y_rng), -1)\n","    Rx = rotation_matrix(v, [1, 0, 0])\n","    Ry = rotation_matrix(u, [0, 1, 0])\n","    Ri = rotation_matrix(in_rot, np.array([0, 0, 1.0]).dot(Rx).dot(Ry))\n","\n","    return out.dot(Rx).dot(Ry).dot(Ri)\n","\n","\n","def xyz2uv(xyz):\n","    '''\n","    xyz: ndarray in shape of [..., 3]\n","    '''\n","    x, y, z = np.split(xyz, 3, axis=-1)\n","    u = np.arctan2(x, z)\n","    c = np.sqrt(x**2 + z**2)\n","    v = np.arctan2(y, c)\n","\n","    return np.concatenate([u, v], axis=-1)\n","\n","\n","def uv2unitxyz(uv):\n","    u, v = np.split(uv, 2, axis=-1)\n","    y = np.sin(v)\n","    c = np.cos(v)\n","    x = c * np.sin(u)\n","    z = c * np.cos(u)\n","\n","    return np.concatenate([x, y, z], axis=-1)\n","\n","\n","def uv2coor(uv, h, w):\n","    '''\n","    uv: ndarray in shape of [..., 2]\n","    h: int, height of the equirectangular image\n","    w: int, width of the equirectangular image\n","    '''\n","    u, v = np.split(uv, 2, axis=-1)\n","    coor_x = (u / (2 * np.pi) + 0.5) * w - 0.5\n","    coor_y = (-v / np.pi + 0.5) * h - 0.5\n","\n","    return np.concatenate([coor_x, coor_y], axis=-1)\n","\n","\n","def coor2uv(coorxy, h, w):\n","    coor_x, coor_y = np.split(coorxy, 2, axis=-1)\n","    u = ((coor_x + 0.5) / w - 0.5) * 2 * np.pi\n","    v = -((coor_y + 0.5) / h - 0.5) * np.pi\n","\n","    return np.concatenate([u, v], axis=-1)\n","\n","\n","def sample_equirec(e_img, coor_xy, order):\n","    w = e_img.shape[1]\n","    coor_x, coor_y = np.split(coor_xy, 2, axis=-1)\n","    pad_u = np.roll(e_img[[0]], w // 2, 1)\n","    pad_d = np.roll(e_img[[-1]], w // 2, 1)\n","    e_img = np.concatenate([e_img, pad_d, pad_u], 0)\n","    return map_coordinates(e_img, [coor_y, coor_x],\n","                           order=order, mode='wrap')[..., 0]\n","\n","\n","def sample_cubefaces(cube_faces, tp, coor_y, coor_x, order):\n","    cube_faces = cube_faces.copy()\n","    cube_faces[1] = np.flip(cube_faces[1], 1)\n","    cube_faces[2] = np.flip(cube_faces[2], 1)\n","    cube_faces[4] = np.flip(cube_faces[4], 0)\n","\n","    # Pad up down\n","    pad_ud = np.zeros((6, 2, cube_faces.shape[2]))\n","    pad_ud[0, 0] = cube_faces[5, 0, :]\n","    pad_ud[0, 1] = cube_faces[4, -1, :]\n","    pad_ud[1, 0] = cube_faces[5, :, -1]\n","    pad_ud[1, 1] = cube_faces[4, ::-1, -1]\n","    pad_ud[2, 0] = cube_faces[5, -1, ::-1]\n","    pad_ud[2, 1] = cube_faces[4, 0, ::-1]\n","    pad_ud[3, 0] = cube_faces[5, ::-1, 0]\n","    pad_ud[3, 1] = cube_faces[4, :, 0]\n","    pad_ud[4, 0] = cube_faces[0, 0, :]\n","    pad_ud[4, 1] = cube_faces[2, 0, ::-1]\n","    pad_ud[5, 0] = cube_faces[2, -1, ::-1]\n","    pad_ud[5, 1] = cube_faces[0, -1, :]\n","    cube_faces = np.concatenate([cube_faces, pad_ud], 1)\n","\n","    # Pad left right\n","    pad_lr = np.zeros((6, cube_faces.shape[1], 2))\n","    pad_lr[0, :, 0] = cube_faces[1, :, 0]\n","    pad_lr[0, :, 1] = cube_faces[3, :, -1]\n","    pad_lr[1, :, 0] = cube_faces[2, :, 0]\n","    pad_lr[1, :, 1] = cube_faces[0, :, -1]\n","    pad_lr[2, :, 0] = cube_faces[3, :, 0]\n","    pad_lr[2, :, 1] = cube_faces[1, :, -1]\n","    pad_lr[3, :, 0] = cube_faces[0, :, 0]\n","    pad_lr[3, :, 1] = cube_faces[2, :, -1]\n","    pad_lr[4, 1:-1, 0] = cube_faces[1, 0, ::-1]\n","    pad_lr[4, 1:-1, 1] = cube_faces[3, 0, :]\n","    pad_lr[5, 1:-1, 0] = cube_faces[1, -2, :]\n","    pad_lr[5, 1:-1, 1] = cube_faces[3, -2, ::-1]\n","    cube_faces = np.concatenate([cube_faces, pad_lr], 2)\n","\n","    return map_coordinates(cube_faces, [tp, coor_y, coor_x], order=order, mode='wrap')\n","\n","\n","def cube_h2list(cube_h):\n","    assert cube_h.shape[0] * 6 == cube_h.shape[1]\n","    return np.split(cube_h, 6, axis=1)\n","\n","\n","def cube_list2h(cube_list):\n","    assert len(cube_list) == 6\n","    assert sum(face.shape == cube_list[0].shape for face in cube_list) == 6\n","    return np.concatenate(cube_list, axis=1)\n","\n","\n","def cube_h2dict(cube_h):\n","    cube_list = cube_h2list(cube_h)\n","    return dict([(k, cube_list[i])\n","                 for i, k in enumerate(['F', 'R', 'B', 'L', 'U', 'D'])])\n","\n","\n","def cube_dict2h(cube_dict, face_k=['F', 'R', 'B', 'L', 'U', 'D']):\n","    assert len(face_k) == 6\n","    return cube_list2h([cube_dict[k] for k in face_k])\n","\n","\n","def cube_h2dice(cube_h):\n","    assert cube_h.shape[0] * 6 == cube_h.shape[1]\n","    w = cube_h.shape[0]\n","    if(len(cube_h.shape)==3):\n","      cube_dice = np.zeros((w * 3, w * 4, cube_h.shape[2]), dtype=cube_h.dtype)\n","    else:\n","      cube_dice = np.zeros((w * 3, w * 4), dtype=cube_h.dtype)\n","    cube_list = cube_h2list(cube_h)\n","    # Order: F R B L U D\n","    sxy = [(1, 1), (2, 1), (3, 1), (0, 1), (1, 0), (1, 2)]\n","    for i, (sx, sy) in enumerate(sxy):\n","        face = cube_list[i]\n","        if i in [1, 2]:\n","            face = np.flip(face, axis=1)\n","        if i == 4:\n","            face = np.flip(face, axis=0)\n","        cube_dice[sy*w:(sy+1)*w, sx*w:(sx+1)*w] = face\n","    return cube_dice\n","\n","\n","def cube_dice2h(cube_dice):\n","    w = cube_dice.shape[0] // 3\n","    assert cube_dice.shape[0] == w * 3 and cube_dice.shape[1] == w * 4\n","    if(len(cube_dice.shape)==3):\n","      cube_h = np.zeros((w, w * 6, cube_dice.shape[2]), dtype=cube_dice.dtype)\n","    else:\n","      cube_h = np.zeros((w, w * 6), dtype=cube_dice.dtype)\n","    # Order: F R B L U D\n","    sxy = [(1, 1), (2, 1), (3, 1), (0, 1), (1, 0), (1, 2)]\n","    for i, (sx, sy) in enumerate(sxy):\n","        face = cube_dice[sy*w:(sy+1)*w, sx*w:(sx+1)*w]\n","        if i in [1, 2]:\n","            face = np.flip(face, axis=1)\n","        if i == 4:\n","            face = np.flip(face, axis=0)\n","        cube_h[:, i*w:(i+1)*w] = face\n","    return cube_h\n","\n","\n","def rotation_matrix(rad, ax):\n","    ax = np.array(ax)\n","    assert len(ax.shape) == 1 and ax.shape[0] == 3\n","    ax = ax / np.sqrt((ax**2).sum())\n","    R = np.diag([np.cos(rad)] * 3)\n","    R = R + np.outer(ax, ax) * (1.0 - np.cos(rad))\n","\n","    ax = ax * np.sin(rad)\n","    R = R + np.array([[0, -ax[2], ax[1]],\n","                      [ax[2], 0, -ax[0]],\n","                      [-ax[1], ax[0], 0]])\n","\n","    return R"]},{"cell_type":"markdown","metadata":{"id":"vT-qBLXue8td"},"source":["### **E2C**"]},{"cell_type":"code","execution_count":19,"metadata":{"id":"2ovNu1T1fCi_","executionInfo":{"status":"ok","timestamp":1640935909878,"user_tz":-330,"elapsed":519,"user":{"displayName":"Devansh Naresh Bansal (B20CS094)","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgwknbTyA9PljJtQ7GuHIIqKmktlNxn_2oAj1Mztg=s64","userId":"11670938873147803370"}}},"outputs":[],"source":["\n","def e2c(e_img, face_w, mode, cube_format):\n","    '''\n","    e_img:  ndarray in shape of [H, W, *]\n","    face_w: int, the length of each face of the cubemap\n","    '''\n","    assert len(e_img.shape) == 3\n","    h, w = e_img.shape[:2]\n","    if mode == 'bilinear':\n","        order = 1\n","    elif mode == 'nearest':\n","        order = 0\n","    else:\n","        raise NotImplementedError('unknown mode')\n","\n","    xyz = xyzcube(face_w)\n","    uv = xyz2uv(xyz)\n","    coor_xy = uv2coor(uv, h, w)\n","    cubemap = np.stack([\n","        sample_equirec(e_img[..., i], coor_xy, order=order)\n","        for i in range(e_img.shape[2])\n","    ], axis=-1)\n","    if cube_format == 'horizon':\n","        pass\n","    elif cube_format == 'list':\n","        cubemap = cube_h2list(cubemap)\n","    elif cube_format == 'dict':\n","        cubemap = cube_h2dict(cubemap)\n","    elif cube_format == 'dice':\n","        cubemap = cube_h2dice(cubemap)\n","    else:\n","        raise NotImplementedError()\n","\n","    return cubemap"]},{"cell_type":"markdown","metadata":{"id":"9fkNPS5PHSk6"},"source":["### **C2E**"]},{"cell_type":"code","execution_count":20,"metadata":{"id":"AxwfDnLPHVZv","executionInfo":{"status":"ok","timestamp":1640935912159,"user_tz":-330,"elapsed":364,"user":{"displayName":"Devansh Naresh Bansal (B20CS094)","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgwknbTyA9PljJtQ7GuHIIqKmktlNxn_2oAj1Mztg=s64","userId":"11670938873147803370"}}},"outputs":[],"source":["def c2e(cubemap, h, w, mode='bilinear', cube_format='dice'):\n","    if mode == 'bilinear':\n","        order = 1\n","    elif mode == 'nearest':\n","        order = 0\n","    else:\n","        raise NotImplementedError('unknown mode')\n","\n","    if cube_format == 'horizon':\n","        pass\n","    elif cube_format == 'list':\n","        cubemap = cube_list2h(cubemap)\n","    elif cube_format == 'dict':\n","        cubemap = cube_dict2h(cubemap)\n","    elif cube_format == 'dice':\n","        cubemap = cube_dice2h(cubemap)\n","    else:\n","        raise NotImplementedError('unknown cube_format')\n","    assert len(cubemap.shape) == 3\n","    assert cubemap.shape[0] * 6 == cubemap.shape[1]\n","    assert w % 8 == 0\n","    face_w = cubemap.shape[0]\n","\n","    uv = equirect_uvgrid(h, w)\n","    u, v = np.split(uv, 2, axis=-1)\n","    u = u[..., 0]\n","    v = v[..., 0]\n","    cube_faces = np.stack(np.split(cubemap, 6, 1), 0)\n","\n","    # Get face id to each pixel: 0F 1R 2B 3L 4U 5D\n","    tp = equirect_facetype(h, w)\n","    coor_x = np.zeros((h, w))\n","    coor_y = np.zeros((h, w))\n","\n","    for i in range(4):\n","        mask = (tp == i)\n","        coor_x[mask] = 0.5 * np.tan(u[mask] - np.pi * i / 2)\n","        coor_y[mask] = -0.5 * np.tan(v[mask]) / np.cos(u[mask] - np.pi * i / 2)\n","\n","    mask = (tp == 4)\n","    c = 0.5 * np.tan(np.pi / 2 - v[mask])\n","    coor_x[mask] = c * np.sin(u[mask])\n","    coor_y[mask] = c * np.cos(u[mask])\n","\n","    mask = (tp == 5)\n","    c = 0.5 * np.tan(np.pi / 2 - np.abs(v[mask]))\n","    coor_x[mask] = c * np.sin(u[mask])\n","    coor_y[mask] = -c * np.cos(u[mask])\n","\n","    # Final renormalize\n","    coor_x = (np.clip(coor_x, -0.5, 0.5) + 0.5) * face_w\n","    coor_y = (np.clip(coor_y, -0.5, 0.5) + 0.5) * face_w\n","\n","    equirec = np.stack([\n","        sample_cubefaces(cube_faces[..., i], tp, coor_y, coor_x, order=order)\n","        for i in range(cube_faces.shape[3])\n","    ], axis=-1)\n","\n","    return equirec\n","\n","def NormalizeData(data):\n","    if(np.amax(data)>255 or np.amin(data)<0):\n","      return ((data - np.min(data)) / (np.max(data) - np.min(data)))*255.0\n","    else:\n","      return data"]},{"cell_type":"markdown","metadata":{"id":"YIzc9WgzoU0z"},"source":["**Bilinear vs Nearest**"]},{"cell_type":"markdown","metadata":{"id":"4uMxmkMBfRA_"},"source":["### **GBVS**"]},{"cell_type":"code","execution_count":21,"metadata":{"id":"iw1lNNS7fcj9","executionInfo":{"status":"ok","timestamp":1640935913400,"user_tz":-330,"elapsed":6,"user":{"displayName":"Devansh Naresh Bansal (B20CS094)","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgwknbTyA9PljJtQ7GuHIIqKmktlNxn_2oAj1Mztg=s64","userId":"11670938873147803370"}}},"outputs":[],"source":["#prerequisites\n","\n","#Markov Chain\n","import numpy as np\n","\n","def solve(mat, tolerance):\n","    w,h = mat.shape\n","    diff = 1\n","    v = np.divide(np.ones((w, 1), dtype=np.float32), w)\n","    oldv = v\n","    oldoldv = v\n","\n","    while diff > tolerance :\n","        oldv = v\n","        oldoldv = oldv\n","        v = np.dot(mat,v)\n","        diff = np.linalg.norm(oldv - v, ord=2)\n","        s = sum(v)\n","        if s>=0 and s< np.inf:\n","            continue\n","        else:\n","            v = oldoldv\n","            break\n","\n","    v = np.divide(v, sum(v))\n","\n","    return v\n","\n","#Graph Based Activation\n","import numpy as np\n","import scipy.io\n","import sklearn.preprocessing\n","# from saliency_models.helpers import markovChain\n","\n","\n","def loadGraphDistanceMatrixFor28x32():\n","    f = scipy.io.loadmat(\"drive/MyDrive/Design Credit/Additional Files/28__32__m__2.mat\")\n","    distanceMat = np.array(f['grframe'])[0][0][0]\n","    lx = np.array(f['grframe'])[0][0][1]\n","    dim = np.array(f['grframe'])[0][0][2]\n","    return [distanceMat, lx, dim]\n","\n","def calculate(map, sigma):\n","    [distanceMat, _, _] = loadGraphDistanceMatrixFor28x32()\n","    denom = 2 * pow(sigma, 2)\n","    expr = -np.divide(distanceMat, denom)\n","    Fab = np.exp(expr)\n","\n","    map_linear = np.ravel(map, order='F')  # column major\n","\n","    state_transition_matrix = Fab * np.abs(\n","        (np.zeros((distanceMat.shape[0], distanceMat.shape[1])) + map_linear).T - map_linear\n","    ).T\n","\n","    # normalising outgoing weights of each node to sum to 1, using scikit normalize\n","    norm_STM = sklearn.preprocessing.normalize(state_transition_matrix, axis=0, norm='l1')\n","\n","    # caomputing equilibrium state of a markv chain is same as computing eigen vector of its weight matrix\n","    # https://lps.lexingtonma.org/cms/lib2/MA01001631/Centricity/Domain/955/EigenApplications%20to%20Markov%20Chains.pdf\n","    eVec = solve(norm_STM, 0.0001)\n","    processed_reshaped = np.reshape(eVec, map.shape, order='F')\n","\n","    return processed_reshaped\n","\n","def normalize_gbvs(map, sigma):\n","    [distanceMat, _, _] = loadGraphDistanceMatrixFor28x32()\n","    denom = 2 * pow(sigma, 2)\n","    expr = -np.divide(distanceMat, denom)\n","    Fab = np.exp(expr)\n","\n","    map_linear = np.ravel(map, order='F')  # column major\n","    # calculating STM : w = d*Fab\n","    state_transition_matrix = (Fab.T * np.abs(map_linear)).T\n","\n","    # normalising outgoing weights of each node to sum to 1, using scikit normalize\n","    norm_STM = sklearn.preprocessing.normalize(state_transition_matrix, axis=0, norm='l1')\n","\n","    # caomputing equilibrium state of a markv chain is same as computing eigen vector of its weight matrix\n","    # https://lps.lexingtonma.org/cms/lib2/MA01001631/Centricity/Domain/955/EigenApplications%20to%20Markov%20Chains.pdf\n","    eVec = solve(norm_STM, 0.0001)\n","    processed_reshaped = np.reshape(eVec, map.shape, order='F')\n","\n","    return processed_reshaped\n","\n","#Color Feature Maps\n","import numpy as np\n","def compute(r, g, b, L):\n","    # Input is the r, g, b channels of the image\n","\n","    #CBY Feature Map\n","    min_rg = np.minimum(r, g)\n","    b_min_rg = np.abs(np.subtract(b, min_rg))\n","    CBY = np.divide(b_min_rg, L, out=np.zeros_like(L), where=L != 0)\n","\n","    #CRG Feature Map\n","    r_g = np.abs(np.subtract(r,g))\n","    CRG = np.divide(r_g, L, out=np.zeros_like(L), where=L != 0)\n","\n","    featMaps = {}\n","    featMaps['CBY'] = CBY\n","    featMaps['CRG'] = CRG\n","    featMaps['L'] = L\n","    return featMaps\n","\n","#Get Kernal Calculator\n","import numpy as np\n","import numpy.matlib\n","import math\n","\n","\n","def getGaborKernel(gaborparams, angle, phase):\n","    gp = gaborparams\n","    major_sd = gp['stddev']\n","    minor_sd = major_sd * gp['elongation']\n","    max_sd = max(major_sd, minor_sd)\n","\n","    sz = gp['filterSize']\n","    if sz == -1:\n","        sz = math.ceil(max_sd * math.sqrt(10))\n","    else:\n","        sz = math.floor(sz / 2)\n","\n","    psi = np.pi / 180 * phase\n","    rtDeg = np.pi / 180 * angle\n","\n","    omega = 2 * np.pi / gp['filterPeriod']\n","    co = math.cos(rtDeg)\n","    si = -math.sin(rtDeg)\n","    major_sigq = 2 * pow(major_sd, 2)\n","    minor_sigq = 2 * pow(minor_sd, 2)\n","\n","    vec = range(-int(sz), int(sz) + 1)\n","    vlen = len(vec)\n","    vco = [i * co for i in vec]\n","    vsi = [i * si for i in vec]\n","\n","    # major = np.matlib.repmat(np.asarray(vco).transpose(), 1, vlen) + np.matlib.repmat(vsi, vlen, 1)\n","    a = np.tile(np.asarray(vco).transpose(), (vlen, 1)).transpose()\n","    b = np.matlib.repmat(vsi, vlen, 1)\n","    major = a + b\n","    major2 = np.power(major, 2)\n","\n","    # minor = np.matlib.repmat(np.asarray(vsi).transpose(), 1, vlen) - np.matlib.repmat(vco, vlen, 1)\n","    a = np.tile(np.asarray(vsi).transpose(), (vlen, 1)).transpose()\n","    b = np.matlib.repmat(vco, vlen, 1)\n","    minor = a + b\n","    minor2 = np.power(minor, 2)\n","\n","    a = np.cos(omega * major + psi)\n","    b = np.exp(-major2 / major_sigq - minor2 / minor_sigq)\n","    # result = np.cos(omega * major + psi) * exp(-major2/major_sigq - minor2/minor_sigq)\n","    result = np.multiply(a, b)\n","\n","    filter1 = np.subtract(result, np.mean(result.reshape(-1)))\n","    filter1 = np.divide(filter1, np.sqrt(np.sum(np.power(filter1.reshape(-1), 2))))\n","    return filter1\n","\n","\n","def getGaborKernels(gaborparams, thetas):\n","    gaborKernels = {}\n","    for th in thetas:\n","        gaborKernels[th] = {}\n","        gaborKernels[th]['0'] = getGaborKernel(gaborparams, th, 0)\n","        gaborKernels[th]['90'] = getGaborKernel(gaborparams, th, 90)\n","\n","    return gaborKernels\n","    \n","#Orientation Feature Maps\n","# from saliency_models.helpers.gaborKernelCalculator import getGaborKernels\n","import cv2\n","import numpy as np\n","\n","def orientcompute(L, gaborparams, thetas):\n","    # L = Intensity Map\n","    # L = np.maximum(np.maximum(r, g), b)\n","\n","    kernels = getGaborKernels(gaborparams, thetas)\n","    featMaps = []\n","    for th in thetas:\n","        kernel_0  = kernels[th]['0']\n","        kernel_90 = kernels[th]['90']\n","        o1 = cv2.filter2D(L, -1, kernel_0, borderType=cv2.BORDER_REPLICATE)\n","        o2 = cv2.filter2D(L, -1, kernel_90, borderType=cv2.BORDER_REPLICATE)\n","        o = np.add(abs(o1), abs(o2))\n","        featMaps.append(o)\n","\n","    return featMaps\n"]},{"cell_type":"code","execution_count":22,"metadata":{"id":"BIIPs3HafQLO","executionInfo":{"status":"ok","timestamp":1640935917700,"user_tz":-330,"elapsed":721,"user":{"displayName":"Devansh Naresh Bansal (B20CS094)","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgwknbTyA9PljJtQ7GuHIIqKmktlNxn_2oAj1Mztg=s64","userId":"11670938873147803370"}}},"outputs":[],"source":["import time\n","import cv2\n","# from saliency_models.helpers import colorFeatureMaps, graphBasedActivation, orientationFeatureMaps\n","import numpy as np\n","from matplotlib import pyplot as plt\n","\n","def calculateFeatureMaps(r, g, b, L, params):\n","    colorMaps = compute(r, g, b, L)\n","    orientationMaps = orientcompute(L, params['gaborparams'], params['thetas'])\n","    allFeatureMaps = {\n","        0: colorMaps['CBY'],\n","        1: colorMaps['CRG'],\n","        2: colorMaps['L'],\n","        3: orientationMaps\n","    }\n","    return allFeatureMaps\n","\n","def getPyramids(image, max_level):\n","    imagePyr = [cv2.pyrDown(image)]\n","    for i in range(1, max_level):\n","        # imagePyr.append(cv2.resize(p, (32, 28), interpolation=cv2.INTER_CUBIC))\n","        imagePyr.append(cv2.pyrDown(imagePyr[i-1]))\n","    return imagePyr[1:]\n","\n","def run(image, params):\n","    b = image[:,:,0]\n","    g = image[:,:,1]\n","    r = image[:,:,2]\n","    L = np.maximum(np.maximum(r, g), b)\n","\n","    b_pyr = getPyramids(b, params['max_level'])\n","    g_pyr = getPyramids(g, params['max_level'])\n","    r_pyr = getPyramids(r, params['max_level'])\n","    L_pyr = getPyramids(L, params['max_level'])\n","\n","    featMaps = {\n","        0: [],\n","        1: [],\n","        2: [],\n","        3: []\n","    }\n","\n","    # calculating feature maps\n","\n","    for i in range(0, len(b_pyr)):\n","        p_r = r_pyr[i]\n","        p_g = g_pyr[i]\n","        p_b = b_pyr[i]\n","        p_L = L_pyr[i]\n","\n","        maps = calculateFeatureMaps(p_r, p_g, p_b, p_L, params)\n","        # we calculate feature maps and then resize\n","        for i in range(0,3):\n","            resized_m = cv2.resize(maps[i], (32, 28), interpolation=cv2.INTER_CUBIC)\n","            featMaps[i].append(resized_m)\n","\n","        for m in maps[3]:\n","            resized_m = cv2.resize(m, (32, 28), interpolation=cv2.INTER_CUBIC)\n","            featMaps[3].append(resized_m)\n","        # featMaps[0].append(maps[0])\n","        # featMaps[1].append(maps[1])\n","        # featMaps[2].append(maps[2])\n","\n","    # calculating activation maps\n","\n","    activationMaps = []\n","    activation_sigma = params['sigma_frac_act']*np.mean([32, 28]) # the shape of map\n","\n","    for i in range(0,4):\n","        for map in featMaps[i]:\n","            activationMaps.append(calculate(map, activation_sigma))\n","\n","\n","    # normalizing activation maps\n","\n","    normalisedActivationMaps = []\n","    normalisation_sigma = params['sigma_frac_norm']*np.mean([32, 28])\n","\n","    for map in activationMaps:\n","        normalisedActivationMaps.append(normalize_gbvs(map, normalisation_sigma))\n","\n","\n","    # combine normalised maps\n","\n","    mastermap = normalisedActivationMaps[0]\n","    for i in range(1, len(normalisedActivationMaps)):\n","        mastermap = np.add(normalisedActivationMaps[i], mastermap)\n","\n","\n","    # post process\n","\n","    gray = cv2.normalize(mastermap, None, alpha=0, beta=1, norm_type=cv2.NORM_MINMAX, dtype=cv2.CV_32F)\n","    # blurred = cv2.GaussianBlur(gray,(4,4), 4)\n","    # gray2 = cv2.normalize(blurred, None, alpha=0, beta=1, norm_type=cv2.NORM_MINMAX, dtype=cv2.CV_32F)\n","    mastermap_res = cv2.resize(gray, (image.shape[1], image.shape[0]), interpolation=cv2.INTER_CUBIC)\n","\n","    return mastermap_res\n","\n","def setupParams():\n","    gaborparams = {\n","        'stddev': 2,\n","        'elongation': 2,\n","        'filterSize': -1,\n","        'filterPeriod': np.pi\n","    }\n","\n","    params = {\n","        'gaborparams': gaborparams,\n","        'sigma_frac_act': 0.15,\n","        'sigma_frac_norm': 0.06,\n","        'max_level': 4,\n","        'thetas': [0, 45, 90, 135]\n","    }\n","\n","    return params\n","\n","def compute_saliency(input_image):\n","    if type(input_image) is str:\n","        input_image = cv2.imread(input_image)\n","\n","    params = setupParams()\n","    return (run(image=input_image / 255.0, params=params) * 255.0)\n","\n","def fliprgb(img):\n","  h,w=np.shape(img)[:2]\n","  left=np.zeros([h,w//2,3])\n","  right=np.zeros([h,w//2,3])\n","  oup=np.zeros([h,w,3])\n","  left=img[:,0:w//2,:]\n","  right=img[:,(w//2):1+w,:]\n","  oup[:,0:w//2,:]=right\n","  oup[:,(w//2):1+w,:]=left\n","  return oup\n","def flipgray(img):\n","  h,w=np.shape(img)[:2]\n","  # print(h,w)\n","  left=np.zeros([h,w//2])\n","  right=np.zeros([h,w//2])\n","  oup=np.zeros([h,w])\n","  left=img[:,0:w//2]\n","  right=img[:,(w//2):1+w]\n","  oup[:,0:w//2]=right\n","  oup[:,(w//2):1+w]=left\n","  return oup\n","def max_of_flip(unimg,unflip_img):\n","  img=NormalizeData(unimg)\n","  flip_img=NormalizeData(unflip_img)\n","  h,w=np.shape(img)[:2]\n","  oup=np.zeros([h,w])\n","  for i in range(h):\n","    for j in range(w):\n","      oup[i][j]=max(img[i][j],flip_img[i][j])\n","  return oup\n","\n","def process(img):\n","  sal=compute_saliency(img)\n","  normalsal=NormalizeData(sal)\n","  return normalsal\n","\n","def process_wo_sal(img):\n","  normalsal=NormalizeData(img)\n","  flipsal=flipgray(normalsal)\n","  maximg=max_of_flip(normalsal,flipsal)\n","  res=NormalizeData(maximg)\n","  return res\n","\n","def flip_sal_flip(img):\n","  normimg=NormalizeData(img)\n","  normflip=fliprgb(normimg)\n","  flipsal=compute_saliency(normflip)\n","  normflipsal=NormalizeData(flipsal)\n","  res=flipgray(normflipsal)\n","  return res\n","\n","def centre_region(img):\n","  centresal=compute_saliency(NormalizeData(img))\n","  centresalflip=flip_sal_flip(img)\n","  res=max_of_flip(centresal,centresalflip)\n","  return res\n","\n","def rgb_to_gray(img):\n","  return (0.2126*img[:,:,0])+(0.7152*img[:,:,1])+(0.0722*img[:,:,2])"]},{"cell_type":"code","execution_count":23,"metadata":{"id":"IYDvXggHodIv","executionInfo":{"status":"ok","timestamp":1640935920426,"user_tz":-330,"elapsed":396,"user":{"displayName":"Devansh Naresh Bansal (B20CS094)","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgwknbTyA9PljJtQ7GuHIIqKmktlNxn_2oAj1Mztg=s64","userId":"11670938873147803370"}}},"outputs":[],"source":["#! /usr/bin/env python3\n","'''\n","Implemented by Erwan DAVID (IPI, LS2N, Nantes, France), 2018\n","\n","E. DAVID, J. Guttiérez, A Coutrot, M. Perreira Da Silva, P. Le Callet (...). A Dataset of Head and Eye Movements for 360° Videos. ACM MMSys18, dataset and toolbox track\n","'''\n","\n","from functools import partial\n","import numpy as np\n","from numpy import random\n","from skimage import exposure\n","from skimage import img_as_float\n","from skimage.transform import resize\n","import matplotlib.pyplot as plt\n","import scipy as sp\n","import re, os, glob\n","\n","EPSILON = np.finfo('float').eps\n","\n","#### METRICS --\n","'''\n","Commonly used metrics for evaluating saliency map performance.\n","\n","Most metrics are ported from Matlab implementation provided by http://saliency.mit.edu/\n","Bylinskii, Z., Judd, T., Durand, F., Oliva, A., & Torralba, A. (n.d.). MIT Saliency Benchmark.\n","\n","Python implementation: Chencan Qian, Sep 2014\n","\n","[1] Bylinskii, Z., Judd, T., Durand, F., Oliva, A., & Torralba, A. (n.d.). MIT Saliency Benchmark.\n","[repo] https://github.com/herrlich10/saliency\n","'''\n","def normalize_metric(x, method='standard', axis=None):\n","\tx = np.array(x, copy=False)\n","\tif axis is not None:\n","\t\ty = np.rollaxis(x, axis).reshape([x.shape[axis], -1])\n","\t\tshape = np.ones(len(x.shape))\n","\t\tshape[axis] = x.shape[axis]\n","\t\tif method == 'standard':\n","\t\t\tres = (x - np.mean(y, axis=1).reshape(shape)) / np.std(y, axis=1).reshape(shape)\n","\t\telif method == 'range':\n","\t\t\tres = (x - np.min(y, axis=1).reshape(shape)) / (np.max(y, axis=1) - np.min(y, axis=1)).reshape(shape)\n","\t\telif method == 'sum':\n","\t\t\tres = x / np.float_(np.sum(y, axis=1).reshape(shape))\n","\t\telse:\n","\t\t\traise ValueError('method not in {\"standard\", \"range\", \"sum\"}')\n","\telse:\n","\t\tif method == 'standard':\n","\t\t\tres = (x - np.mean(x)) / np.std(x)\n","\t\telif method == 'range':\n","\t\t\tres = (x - np.min(x)) / (np.max(x) - np.min(x))\n","\t\telif method == 'sum':\n","\t\t\tres = x / float(np.sum(x))\n","\t\telse:\n","\t\t\traise ValueError('method not in {\"standard\", \"range\", \"sum\"}')\n","\treturn res\n","\n","def KLD(p, q):\n","\tp = normalize_metric(p, method='sum')\n","\tq = normalize_metric(q, method='sum')\n","\treturn np.sum(np.where(p != 0, p * np.log((p+EPSILON) / (q+EPSILON)), 0))\n","\n","\n","def CC(saliency_map1, saliency_map2):\n","\tmap1 = np.array(saliency_map1, copy=False)\n","\tmap2 = np.array(saliency_map2, copy=False)\n","\tif map1.shape != map2.shape:\n","\t\tmap1 = resize(map1, map2.shape, order=3, mode='constant') # bi-cubic/nearest is what Matlab imresize() does by default\n","\t# Normalize the two maps to have zero mean and unit std\n","\tmap1 = normalize_metric(map1, method='standard')\n","\tmap2 = normalize_metric(map2, method='standard')\n","\t# Compute correlation coefficient\n","\treturn np.corrcoef(map1.ravel(), map2.ravel())[0,1]\n","\n","\n","def SIM(saliency_map1, saliency_map2):\n","\tmap1 = np.array(saliency_map1, copy=False)\n","\tmap2 = np.array(saliency_map2, copy=False)\n","\tif map1.shape != map2.shape:\n","\t\tmap1 = resize(map1, map2.shape, order=3, mode='constant') # bi-cubic/nearest is what Matlab imresize() does by default\n","\t# Normalize the two maps to have values between [0,1] and sum up to 1\n","\tmap1 = normalize_metric(map1, method='range')\n","\tmap2 = normalize_metric(map2, method='range')\n","\tmap1 = normalize_metric(map1, method='sum')\n","\tmap2 = normalize_metric(map2, method='sum')\n","\t# Compute histogram intersection\n","\tintersection = np.minimum(map1, map2)\n","\treturn np.sum(intersection)\n","#### METRICS --\n","\n","# Name: func, symmetric?, second map should be saliency or fixation?\n","metrics = {\n","\t\"CC\": [CC, False, 'sal'], # Saliency map\n","\t\"SIM\": [SIM, False, 'sal'], # Saliency map\n","\t\"KLD\": [KLD, False, 'sal'] } # Saliency map\n","\n","# Possible float precision of bin files\n","dtypes = {16: np.float16,\n","\t\t  32: np.float32,\n","\t\t  64: np.float64}\n","\n","get_binsalmap_infoRE = re.compile(\"(\\w+_\\d{1,2})_(\\d+)x(\\d+)_(\\d+)b\")\n","def get_binsalmap_info(filename):\n","\tname, width, height, dtype = get_binsalmap_infoRE.findall(filename.split(os.sep)[-1])[0]\n","\twidth, height, dtype = int(width), int(height), int(dtype)\n","\treturn name, width, height\n","\n","def uniformSphereSampling(N):\n","\tgr = (1 + np.sqrt(5))/2\n","\tga = 2 * np.pi * (1 - 1/gr)\n","\n","\tix = iy = np.arange(N)\n","\n","\tlat = np.arccos(1 - 2*ix/(N-1))\n","\tlon = iy * ga\n","\tlon %= 2*np.pi\n","\n","\treturn np.concatenate([lat[:, None], lon[:, None]], axis=1)\n","\n","def jsd(p, q, base=np.e):\n","\treturn sp.spatial.distance.jensenshannon(p,q)\n","    "]},{"cell_type":"markdown","metadata":{"id":"7NBgVGifcyy8"},"source":["### Final Executable Code"]},{"cell_type":"code","execution_count":25,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":380},"executionInfo":{"elapsed":3696,"status":"error","timestamp":1640936026762,"user":{"displayName":"Devansh Naresh Bansal (B20CS094)","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgwknbTyA9PljJtQ7GuHIIqKmktlNxn_2oAj1Mztg=s64","userId":"11670938873147803370"},"user_tz":-330},"id":"a-WEuBIMc8NF","outputId":"9da001b8-fa60-417e-d07c-1f3c12497cc1"},"outputs":[{"output_type":"error","ename":"TypeError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-25-503039323995>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     26\u001b[0m   \u001b[0mrightface\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mcmpimgdict\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'R'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     27\u001b[0m   \u001b[0mleftface\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mcmpimgdict\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'L'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 28\u001b[0;31m   \u001b[0mcentralsal\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mcentre_region\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mequiimg\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     29\u001b[0m   \u001b[0;31m#0.140,0.226,0.169,0.105,0.107,0.253\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     30\u001b[0m   \u001b[0mfrontfacesal\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mprocess\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfrontface\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m0.140\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-22-e7de97ff2a05>\u001b[0m in \u001b[0;36mcentre_region\u001b[0;34m(img)\u001b[0m\n\u001b[1;32m    174\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    175\u001b[0m \u001b[0;32mdef\u001b[0m \u001b[0mcentre_region\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mimg\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 176\u001b[0;31m   \u001b[0mcentresal\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mcompute_saliency\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mNormalizeData\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mimg\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    177\u001b[0m   \u001b[0mcentresalflip\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mflip_sal_flip\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mimg\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    178\u001b[0m   \u001b[0mres\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mmax_of_flip\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcentresal\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mcentresalflip\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-22-e7de97ff2a05>\u001b[0m in \u001b[0;36mcompute_saliency\u001b[0;34m(input_image)\u001b[0m\n\u001b[1;32m    120\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    121\u001b[0m     \u001b[0mparams\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0msetupParams\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 122\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mrun\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mimage\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0minput_image\u001b[0m \u001b[0;34m/\u001b[0m \u001b[0;36m255.0\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mparams\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mparams\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m*\u001b[0m \u001b[0;36m255.0\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    123\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    124\u001b[0m \u001b[0;32mdef\u001b[0m \u001b[0mfliprgb\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mimg\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-22-e7de97ff2a05>\u001b[0m in \u001b[0;36mrun\u001b[0;34m(image, params)\u001b[0m\n\u001b[1;32m     69\u001b[0m     \u001b[0;32mfor\u001b[0m \u001b[0mi\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mrange\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m4\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     70\u001b[0m         \u001b[0;32mfor\u001b[0m \u001b[0mmap\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mfeatMaps\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 71\u001b[0;31m             \u001b[0mactivationMaps\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mappend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcalculate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmap\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mactivation_sigma\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     72\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     73\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-21-51ebf67378a2>\u001b[0m in \u001b[0;36mcalculate\u001b[0;34m(map, sigma)\u001b[0m\n\u001b[1;32m     58\u001b[0m     \u001b[0;31m# caomputing equilibrium state of a markv chain is same as computing eigen vector of its weight matrix\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     59\u001b[0m     \u001b[0;31m# https://lps.lexingtonma.org/cms/lib2/MA01001631/Centricity/Domain/955/EigenApplications%20to%20Markov%20Chains.pdf\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 60\u001b[0;31m     \u001b[0meVec\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0msolve\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnorm_STM\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m0.0001\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     61\u001b[0m     \u001b[0mprocessed_reshaped\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mreshape\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0meVec\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmap\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshape\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0morder\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'F'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     62\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-21-51ebf67378a2>\u001b[0m in \u001b[0;36msolve\u001b[0;34m(mat, tolerance)\u001b[0m\n\u001b[1;32m     16\u001b[0m         \u001b[0mv\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdot\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmat\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mv\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     17\u001b[0m         \u001b[0mdiff\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlinalg\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mnorm\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0moldv\u001b[0m \u001b[0;34m-\u001b[0m \u001b[0mv\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mord\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m2\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 18\u001b[0;31m         \u001b[0ms\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0msum\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mv\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     19\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0ms\u001b[0m\u001b[0;34m>=\u001b[0m\u001b[0;36m0\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0ms\u001b[0m\u001b[0;34m<\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0minf\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     20\u001b[0m             \u001b[0;32mcontinue\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mTypeError\u001b[0m: 'numpy.float64' object is not callable"]}],"source":["dataset_url = \"drive/MyDrive/Design Credit/Data_Set/Stimuli\"\n","imgdirectory = \"/content/drive/.shortcut-targets-by-id/1mbvURF9YJfww0V7YmjAOrvDejHMG4eTN/Design_Credit/Data_Set/Sorted_Stimuli\"\n","saldirectory = \"/content/drive/.shortcut-targets-by-id/1mbvURF9YJfww0V7YmjAOrvDejHMG4eTN/Design_Credit/Data_Set/Sorted_SalMap\"\n","imgarr=[]\n","salarr=[]\n","for filename in os.listdir(imgdirectory):\n","\timgarr.append(filename)\n","for filename in os.listdir(saldirectory):\n","\tsalarr.append(filename)\n","imgarr.sort()\n","salarr.sort()\n","csvlist=[]\n","for i in range(len(imgarr)):\n","  imgpath=\"drive/.shortcut-targets-by-id/1mbvURF9YJfww0V7YmjAOrvDejHMG4eTN/Design_Credit/Data_Set/Sorted_Stimuli/\"+imgarr[i]\n","  salpath=\"drive/.shortcut-targets-by-id/1mbvURF9YJfww0V7YmjAOrvDejHMG4eTN/Design_Credit/Data_Set/Sorted_SalMap/\"+salarr[i]\n","  imgdata=NormalizeData(np.asarray(PIL.Image.open(imgpath),dtype=\"uint8\"))\n","  saldata=NormalizeData(np.asarray(PIL.Image.open(salpath),dtype=\"uint8\"))\n","  h,w=saldata.shape[:2]\n","  cmpimg=(e2c(imgdata,256,'bilinear','dice'))\n","  cmpimgdict=e2c(imgdata,256,'bilinear','dict')\n","  equiimg=NormalizeData(c2e(cmpimg,h,w,'bilinear','dice'))\n","  frontface=cmpimgdict['F']\n","  backface=cmpimgdict['B']\n","  upface=cmpimgdict['U']\n","  downface=cmpimgdict['D']\n","  rightface=cmpimgdict['R']\n","  leftface=cmpimgdict['L']\n","  centralsal=centre_region(equiimg)\n","  frontfacesal=process(frontface)*(0.55)\n","  backfacesal=process(backface)*(0.01)\n","  upfacesal=process(upface)*(0.02)\n","  downfacesal=process(downface)*(0.02)\n","  leftfacesal=process(leftface)*(0.2)\n","  rightfacesal=process(rightface)*(0.2)\n","  threedffsal=frontfacesal[...,np.newaxis]\n","  threedbfsal=backfacesal[...,np.newaxis]\n","  threedlfsal=leftfacesal[...,np.newaxis]\n","  threedrfsal=rightfacesal[...,np.newaxis]\n","  threedufsal=upfacesal[...,np.newaxis]\n","  threeddfsal=downfacesal[...,np.newaxis]\n","  cubesaldict={'F':threedffsal,'U':threedufsal,'D':threeddfsal,'R':threedrfsal,'L':threedlfsal,'B':threedbfsal}\n","  cmpsal=cube_h2dice(cube_dict2h(cubesaldict,['F', 'R', 'B', 'L', 'U', 'D']))\n","  threedequisal=c2e(cmpsal,h,w,'bilinear','dice')\n","  equisal=np.squeeze(threedequisal,axis=(2,))\n","  normalequisal=NormalizeData(equisal)\n","  oup=max_of_flip(centralsal,normalequisal)\n","  print(\"oup\",imgarr[i],np.amin(oup),np.amax(oup),end='\\t')\n","  graygroundtruth=(rgb_to_gray(saldata))\n","  print(\"ggtruth\",imgarr[i],np.amin(graygroundtruth),np.amax(graygroundtruth))\n","  csvlist.append(imgarr[i])\n","  csvlist.append(KLD(graygroundtruth,oup))\n","  csvlist.append(CC(graygroundtruth,oup))\n","  csvlist.append(SIM(graygroundtruth,oup))\n","  csvlist.append(jsd(graygroundtruth.flatten(),oup.flatten()))"]},{"cell_type":"code","source":[""],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":380},"id":"zy9akVUics4Z","executionInfo":{"status":"error","timestamp":1640936697204,"user_tz":-330,"elapsed":5142,"user":{"displayName":"Devansh Naresh Bansal (B20CS094)","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgwknbTyA9PljJtQ7GuHIIqKmktlNxn_2oAj1Mztg=s64","userId":"11670938873147803370"}},"outputId":"32273bba-0f20-4712-8eff-c6d6b04866bc"},"execution_count":26,"outputs":[{"output_type":"error","ename":"TypeError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-26-8762d5e3d380>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     26\u001b[0m   \u001b[0mrightface\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mcmpimgdict\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'R'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     27\u001b[0m   \u001b[0mleftface\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mcmpimgdict\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'L'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 28\u001b[0;31m   \u001b[0mcentralsal\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mcentre_region\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mequiimg\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     29\u001b[0m   \u001b[0;31m# 0.213,0.201,0.077,0.097,0.158,0.254\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     30\u001b[0m   \u001b[0mfrontfacesal\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mprocess\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfrontface\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m0.213\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-22-e7de97ff2a05>\u001b[0m in \u001b[0;36mcentre_region\u001b[0;34m(img)\u001b[0m\n\u001b[1;32m    174\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    175\u001b[0m \u001b[0;32mdef\u001b[0m \u001b[0mcentre_region\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mimg\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 176\u001b[0;31m   \u001b[0mcentresal\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mcompute_saliency\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mNormalizeData\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mimg\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    177\u001b[0m   \u001b[0mcentresalflip\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mflip_sal_flip\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mimg\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    178\u001b[0m   \u001b[0mres\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mmax_of_flip\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcentresal\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mcentresalflip\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-22-e7de97ff2a05>\u001b[0m in \u001b[0;36mcompute_saliency\u001b[0;34m(input_image)\u001b[0m\n\u001b[1;32m    120\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    121\u001b[0m     \u001b[0mparams\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0msetupParams\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 122\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mrun\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mimage\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0minput_image\u001b[0m \u001b[0;34m/\u001b[0m \u001b[0;36m255.0\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mparams\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mparams\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m*\u001b[0m \u001b[0;36m255.0\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    123\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    124\u001b[0m \u001b[0;32mdef\u001b[0m \u001b[0mfliprgb\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mimg\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-22-e7de97ff2a05>\u001b[0m in \u001b[0;36mrun\u001b[0;34m(image, params)\u001b[0m\n\u001b[1;32m     69\u001b[0m     \u001b[0;32mfor\u001b[0m \u001b[0mi\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mrange\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m4\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     70\u001b[0m         \u001b[0;32mfor\u001b[0m \u001b[0mmap\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mfeatMaps\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 71\u001b[0;31m             \u001b[0mactivationMaps\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mappend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcalculate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmap\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mactivation_sigma\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     72\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     73\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-21-51ebf67378a2>\u001b[0m in \u001b[0;36mcalculate\u001b[0;34m(map, sigma)\u001b[0m\n\u001b[1;32m     58\u001b[0m     \u001b[0;31m# caomputing equilibrium state of a markv chain is same as computing eigen vector of its weight matrix\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     59\u001b[0m     \u001b[0;31m# https://lps.lexingtonma.org/cms/lib2/MA01001631/Centricity/Domain/955/EigenApplications%20to%20Markov%20Chains.pdf\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 60\u001b[0;31m     \u001b[0meVec\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0msolve\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnorm_STM\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m0.0001\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     61\u001b[0m     \u001b[0mprocessed_reshaped\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mreshape\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0meVec\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmap\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshape\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0morder\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'F'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     62\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-21-51ebf67378a2>\u001b[0m in \u001b[0;36msolve\u001b[0;34m(mat, tolerance)\u001b[0m\n\u001b[1;32m     16\u001b[0m         \u001b[0mv\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdot\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmat\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mv\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     17\u001b[0m         \u001b[0mdiff\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlinalg\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mnorm\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0moldv\u001b[0m \u001b[0;34m-\u001b[0m \u001b[0mv\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mord\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m2\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 18\u001b[0;31m         \u001b[0ms\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0msum\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mv\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     19\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0ms\u001b[0m\u001b[0;34m>=\u001b[0m\u001b[0;36m0\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0ms\u001b[0m\u001b[0;34m<\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0minf\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     20\u001b[0m             \u001b[0;32mcontinue\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mTypeError\u001b[0m: 'numpy.float64' object is not callable"]}]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":24487,"status":"ok","timestamp":1640331946042,"user":{"displayName":"Devansh Naresh Bansal (B20CS094)","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgwknbTyA9PljJtQ7GuHIIqKmktlNxn_2oAj1Mztg=s64","userId":"11670938873147803370"},"user_tz":-330},"id":"nZ4VzEczrlNn","outputId":"9c4e8493-4b6b-42bf-f4b7-c83267fc54eb"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["{'spreadsheetId': '1ox2MKGIndYrJWN3L_4B3hT4Ma6qRitLrobo0GLomjY8',\n"," 'updatedCells': 425,\n"," 'updatedColumns': 5,\n"," 'updatedRange': 'Sheet1!A1:E85',\n"," 'updatedRows': 85}"]},"metadata":{},"execution_count":28}],"source":["from google.colab import auth\n","auth.authenticate_user()\n","\n","import gspread\n","from oauth2client.client import GoogleCredentials\n","\n","gc = gspread.authorize(GoogleCredentials.get_application_default())\n","sh = gc.create('Result_GBVS_Final')\n","\n","# Open our new sheet and add some data.\n","worksheet = gc.open('Result_GBVS_Final').sheet1\n","cell_list = worksheet.range('A1:E85')\n","i=0\n","j=0\n","# print(len(cell_list))\n","for cell in cell_list:\n","  cell.value =csvlist[i]\n","  i+=1\n","  \n","  \n","worksheet.update_cells(cell_list)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"7IyEn651AwwA"},"outputs":[],"source":["def NormalizeData(data):\n","    if(np.amax(data)>255 or np.amin(data)<0):\n","      return ((data - np.min(data)) / (np.max(data) - np.min(data)))\n","    else:\n","      return data"]},{"cell_type":"markdown","metadata":{"id":"DlWq2Z_XcxGm"},"source":["### **Itti-Koch**"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"cZBQhb_Gcwks"},"outputs":[],"source":["import time\n","import cv2\n","import numpy as np\n","from matplotlib import pyplot as plt\n","from scipy.ndimage.filters import maximum_filter\n","from numpy import matlib\n","import cv2\n","from scipy.ndimage.filters import maximum_filter\n","import cv2\n","import numpy as np\n","import math\n","\n","def NormalizeData(data):\n","    if(np.amax(data)>255 or np.amin(data)<0):\n","      return ((data - np.min(data)) / (np.max(data) - np.min(data)))\n","    else:\n","      return data\n","    \n","def getGaborKernel(gaborparams, angle, phase):\n","    gp = gaborparams\n","    major_sd = gp['stddev']\n","    minor_sd = major_sd * gp['elongation']\n","    max_sd = max(major_sd, minor_sd)\n","\n","    sz = gp['filterSize']\n","    if sz == -1:\n","        sz = math.ceil(max_sd * math.sqrt(10))\n","    else:\n","        sz = math.floor(sz / 2)\n","\n","    psi = np.pi / 180 * phase\n","    rtDeg = np.pi / 180 * angle\n","\n","    omega = 2 * np.pi / gp['filterPeriod']\n","    co = math.cos(rtDeg)\n","    si = -math.sin(rtDeg)\n","    major_sigq = 2 * pow(major_sd, 2)\n","    minor_sigq = 2 * pow(minor_sd, 2)\n","\n","    vec = range(-int(sz), int(sz) + 1)\n","    vlen = len(vec)\n","    vco = [i * co for i in vec]\n","    vsi = [i * si for i in vec]\n","\n","    # major = np.matlib.repmat(np.asarray(vco).transpose(), 1, vlen) + np.matlib.repmat(vsi, vlen, 1)\n","    a = np.tile(np.asarray(vco).transpose(), (vlen, 1)).transpose()\n","    b = np.matlib.repmat(vsi, vlen, 1)\n","    major = a + b\n","    major2 = np.power(major, 2)\n","\n","    # minor = np.matlib.repmat(np.asarray(vsi).transpose(), 1, vlen) - np.matlib.repmat(vco, vlen, 1)\n","    a = np.tile(np.asarray(vsi).transpose(), (vlen, 1)).transpose()\n","    b = np.matlib.repmat(vco, vlen, 1)\n","    minor = a + b\n","    minor2 = np.power(minor, 2)\n","\n","    a = np.cos(omega * major + psi)\n","    b = np.exp(-major2 / major_sigq - minor2 / minor_sigq)\n","    # result = np.cos(omega * major + psi) * exp(-major2/major_sigq - minor2/minor_sigq)\n","    result = np.multiply(a, b)\n","\n","    filter1 = np.subtract(result, np.mean(result.reshape(-1)))\n","    filter1 = np.divide(filter1, np.sqrt(np.sum(np.power(filter1.reshape(-1), 2))))\n","    return filter1\n","\n","\n","def getGaborKernels(gaborparams, thetas):\n","    gaborKernels = {}\n","    for th in thetas:\n","        gaborKernels[th] = {}\n","        gaborKernels[th]['0'] = getGaborKernel(gaborparams, th, 0)\n","        gaborKernels[th]['90'] = getGaborKernel(gaborparams, th, 90)\n","\n","    return gaborKernels\n","\n","def orientcompute(L, gaborparams, thetas):\n","    # L = Intensity Map\n","    # L = np.maximum(np.maximum(r, g), b)\n","\n","    kernels = getGaborKernels(gaborparams, thetas)\n","    featMaps = []\n","    for th in thetas:\n","        kernel_0  = kernels[th]['0']\n","        kernel_90 = kernels[th]['90']\n","        o1 = cv2.filter2D(L, -1, kernel_0, borderType=cv2.BORDER_REPLICATE)\n","        o2 = cv2.filter2D(L, -1, kernel_90, borderType=cv2.BORDER_REPLICATE)\n","        o = np.add(abs(o1), abs(o2))\n","        featMaps.append(o)\n","\n","    return featMaps\n","\n","def centre_surround_featurecompute(feature_pyramids):\n","    center_levels = [2, 3, 4]\n","    delta = [2, 3]\n","    Ccs_array = {\n","        0:[], 1:[]\n","    }\n","    Ics_array =[]\n","    Ocs_array = []\n","    for c in center_levels:\n","        for d in delta:\n","            s = c+d\n","            for i in range(0,2): # For calculating RG and BY channels\n","                Cc = feature_pyramids[c][i]\n","                Cs = -feature_pyramids[s][i]\n","                # to allow for chromatic opponency\n","\n","                Cs_scaled = cv2.resize(Cs, (Cc.shape[1], Cc.shape[0]), interpolation=cv2.INTER_CUBIC)\n","                Ccs = (Cc - Cs_scaled) ** 2\n","                Ccs_array[i].append(Ccs)\n","\n","            Ic = feature_pyramids[c][2]\n","            Is = feature_pyramids[s][2]\n","\n","            Is_scaled = cv2.resize(Is, (Ic.shape[1], Ic.shape[0]), interpolation=cv2.INTER_CUBIC)\n","            Ics = (Ic - Is_scaled)**2\n","            Ics_array.append(Ics)\n","\n","            for idx in range(0, len(feature_pyramids[c][3])):\n","                Oc = feature_pyramids[c][3][idx]\n","                Os = feature_pyramids[s][3][idx]\n","\n","                Os_scaled = cv2.resize(Os, (Oc.shape[1], Oc.shape[0]), interpolation=cv2.INTER_CUBIC)\n","                Ocs = (Oc - Os_scaled) ** 2\n","                Ocs_array.append(Ocs)\n","\n","    final_Feature_Array = {\n","        0:Ccs_array[0],\n","        1:Ccs_array[1],\n","        2:Ics_array,\n","        3:Ocs_array\n","    }\n","    return final_Feature_Array\n","\n","def calculate(mat, thresh):\n","    (w,h) = mat.shape\n","    sum_local_max = mat[0][0]\n","    count_local_max = 0\n","    global_max = mat[0][0]\n","    for i in range(1, w-1):\n","        for j in range(1, h-1):\n","            if mat[i][j] > max(mat[i-1][j-1],mat[i-1][j],mat[i-1][j+1],\n","                               mat[i][j-1],              mat[i][j+1],\n","                               mat[i+1][j-1],mat[i+1][j],mat[i+1][j+1]) and mat[i,j]>thresh:\n","                if mat[i][j] > global_max:\n","                    global_max = mat[i][j]\n","\n","                sum_local_max += mat[i][j]\n","                count_local_max +=1\n","\n","    if count_local_max > 0:\n","        local_max_avg = float(sum_local_max)/float(count_local_max)\n","    else:\n","        local_max_avg = 0.0\n","    return global_max, count_local_max, local_max_avg\n","\n","def processNormalization(mat):\n","    M = 10\n","    thresh  = M/10\n","    mat = cv2.normalize(mat, None, alpha=0, beta=1, norm_type=cv2.NORM_MINMAX, dtype=cv2.CV_32F)\n","    mat = mat*M\n","    g_max, c_max, l_max_avg = calculate(mat, thresh)\n","    # print g_max, c_max, l_max_avg\n","    if c_max>1:\n","        res = mat* (M-l_max_avg)**2\n","    elif c_max == 1:\n","        res = mat * M**2\n","    else:\n","        res = mat\n","\n","    return res\n","\n","def process2(mat):\n","     M = 8.0 # an arbitrary global maxima for which the image is scaled\n","     mat = cv2.convertScaleAbs(mat, alpha=M/mat.max(), beta = 0.0)\n","     w, h = mat.shape\n","     maxima = maximum_filter(mat, size=(1, 1))\n","     maxima = (mat == maxima)\n","     mnum = maxima.sum()\n","     maxima = np.multiply(maxima, mat)\n","     mbar = float(maxima.sum()) / mnum\n","     return mat * (M-mbar)**2\n","\n","def calculate(mat, thresh):\n","    (w,h) = mat.shape\n","    sum_local_max = mat[0][0]\n","    count_local_max = 0\n","    global_max = mat[0][0]\n","    for i in range(1, w-1):\n","        for j in range(1, h-1):\n","            if mat[i][j] > max(mat[i-1][j-1],mat[i-1][j],mat[i-1][j+1],\n","                               mat[i][j-1],              mat[i][j+1],\n","                               mat[i+1][j-1],mat[i+1][j],mat[i+1][j+1]) and mat[i,j]>thresh:\n","                if mat[i][j] > global_max:\n","                    global_max = mat[i][j]\n","\n","                sum_local_max += mat[i][j]\n","                count_local_max +=1\n","\n","    if count_local_max > 0:\n","        local_max_avg = float(sum_local_max)/float(count_local_max)\n","    else:\n","        local_max_avg = 0.0\n","    return global_max, count_local_max, local_max_avg\n","\n","def processNormalization(mat):\n","    M = 10\n","    thresh  = M/10\n","    mat = cv2.normalize(mat, None, alpha=0, beta=1, norm_type=cv2.NORM_MINMAX, dtype=cv2.CV_32F)\n","    mat = mat*M\n","    g_max, c_max, l_max_avg = calculate(mat, thresh)\n","    # print g_max, c_max, l_max_avg\n","    if c_max>1:\n","        res = mat* (M-l_max_avg)**2\n","    elif c_max == 1:\n","        res = mat * M**2\n","    else:\n","        res = mat\n","\n","    return res\n","\n","def process2(mat):\n","     M = 8.0 # an arbitrary global maxima for which the image is scaled\n","     mat = cv2.convertScaleAbs(mat, alpha=M/mat.max(), beta = 0.0)\n","     w, h = mat.shape\n","     maxima = maximum_filter(mat, size=(1, 1))\n","     maxima = (mat == maxima)\n","     mnum = maxima.sum()\n","     maxima = np.multiply(maxima, mat)\n","     mbar = float(maxima.sum()) / mnum\n","     return mat * (M-mbar)**2\n","\n","def compute(r, g, b, I):\n","    # intensity I is (r+g+b)/3\n","\n","    max_I = I.max()\n","    # normalisation, for decoupling hue from intensity #ittikoch98pami\n","    r = np.divide(r, I, out=np.zeros_like(r), where=I>max_I/10.)\n","    g = np.divide(g, I, out=np.zeros_like(g), where=I>max_I/10.)\n","    b = np.divide(b, I, out=np.zeros_like(b), where=I>max_I/10.)\n","\n","    # calculating broadly-tuned  color channels\n","    R = r - (g+b)/2.\n","    R = R*(R>=0)\n","\n","    G = g - (r+b)/2.\n","    G = G*(G>=0)\n","\n","    B = b - (r+g)/2.\n","    B = B*(B>=0)\n","\n","    Y = (r+g)/2 - cv2.absdiff(r, g)/2. - b\n","    Y = Y*(Y>=0)\n","\n","    RG = cv2.absdiff(R, G)\n","    BY = cv2.absdiff(B, Y)\n","\n","    featMaps = {\n","        0: RG,\n","        1: BY,\n","        2: I\n","    }\n","    return featMaps\n","\n","def norm01(mat):\n","    return cv2.normalize(mat, None, alpha=0., beta=1., norm_type=cv2.NORM_MINMAX, dtype=cv2.CV_32F)\n","\n","\n","def calculateFeatureMaps(r, g, b, L, params):\n","    colorMaps = compute(r, g, b, L)\n","    orientationMaps = orientcompute(L, params['gaborparams'], params['thetas'])\n","    allFeatureMaps = {\n","        0: colorMaps[0],\n","        1: colorMaps[1],\n","        2: colorMaps[2],\n","        3: orientationMaps\n","    }\n","    return allFeatureMaps\n","\n","def getPyramid(image, max_level):\n","    imagePyramid = {\n","        0: image\n","    } # scale zero = 1:1\n","\n","    for i in range(1, max_level):\n","        imagePyramid[i] = cv2.pyrDown(imagePyramid[i-1])\n","\n","    return imagePyramid\n","\n","def run(image, params):\n","    b = image[:,:,0]/255.\n","    g = image[:,:,1]/255.\n","    r = image[:,:,2]/255.\n","    I = rgb_to_gray(image)/255.\n","\n","    b_pyr = getPyramid(b, params['max_level'])\n","    g_pyr = getPyramid(g, params['max_level'])\n","    r_pyr = getPyramid(r, params['max_level'])\n","    I_pyr = getPyramid(I, params['max_level'])\n","\n","    # calculating scale-wise feature maps\n","    scaledFeaturePyramids = {}\n","\n","    for i in range(2, len(b_pyr)):\n","        p_r = r_pyr[i]\n","        p_g = g_pyr[i]\n","        p_b = b_pyr[i]\n","        p_L = I_pyr[i]\n","\n","        maps = calculateFeatureMaps(p_r, p_g, p_b, p_L, params)\n","\n","        scaledFeaturePyramids[i] = maps\n","\n","\n","    # calculating center surround feature maps\n","\n","    centerSurroundFeatureMaps = centre_surround_featurecompute(scaledFeaturePyramids)\n","\n","\n","    # normalizing activation maps\n","    normalised_maps =[]\n","    norm_maps = centerSurroundFeatureMaps.copy()\n","    for i in range(0,4):\n","        for mat in norm_maps[i]:\n","            # Resizing to sigma = 4 maps\n","            nmap = processNormalization(mat)\n","            nmap = cv2.resize(nmap, (b_pyr[4].shape[1], b_pyr[4].shape[0]), interpolation=cv2.INTER_CUBIC)\n","            normalised_maps.append(nmap)\n","\n","\n","    # combine normalised maps\n","    comb_maps = []\n","    cfn = len(norm_maps[0])+len(norm_maps[1])\n","    ifn = len(norm_maps[2])\n","    ofn = len(norm_maps[3])\n","\n","    comb_maps.append(normalised_maps[0])\n","    for i in range(1, cfn):\n","        comb_maps[0] = np.add(comb_maps[0], normalised_maps[i])\n","\n","    comb_maps.append(normalised_maps[cfn])\n","    for i in range(cfn+1, cfn + ifn):\n","        comb_maps[1] = np.add(comb_maps[1], normalised_maps[i])\n","\n","    comb_maps.append(normalised_maps[cfn + ifn])\n","    for i in range(cfn + ifn + 1, cfn + ifn + ofn):\n","        comb_maps[2] = np.add(comb_maps[2], normalised_maps[i])\n","\n","\n","    # normlaise top channle maps\n","    ntcmaps = [None]*3\n","    for i in range(0,3):\n","        ntcmaps[i] = processNormalization(comb_maps[i])\n","\n","    # add all of them\n","    mastermap = (ntcmaps[0] + ntcmaps[1] + ntcmaps[2])/3.0\n","\n","    #post processing\n","    gray = norm01(mastermap)\n","    # blurred = cv2.GaussianBlur(gray,(3,3), 4)\n","    # gray = norm01(blurred)\n","    mastermap_res = cv2.resize(gray, (image.shape[1], image.shape[0]), interpolation=cv2.INTER_CUBIC)\n","\n","\n","    return mastermap_res\n","\n","def setupParams():\n","    gaborparams = {\n","        'stddev': 2,\n","        'elongation': 2,\n","        'filterSize': -1,\n","        'filterPeriod': np.pi\n","    }\n","\n","    params = {\n","        'gaborparams': gaborparams,\n","        'sigma_frac_act': 0.15,\n","        'sigma_frac_norm': 0.06,\n","        'max_level': 9,\n","        'thetas': [0, 45, 90, 135]\n","    }\n","\n","    return params\n","\n","\n","def compute_saliency(input_image):\n","    if type(input_image) is str:\n","        input_image = cv2.imread(input_image)\n","\n","    params = setupParams()\n","    return run(image=input_image, params=params) * 255.0\n","  \n","def fliprgb(img):\n","  h,w=np.shape(img)[:2]\n","  left=np.zeros([h,w//2,3])\n","  right=np.zeros([h,w//2,3])\n","  oup=np.zeros([h,w,3])\n","  left=img[:,0:w//2,:]\n","  right=img[:,(w//2):1+w,:]\n","  oup[:,0:w//2,:]=right\n","  oup[:,(w//2):1+w,:]=left\n","  return oup\n","def flipgray(img):\n","  h,w=np.shape(img)[:2]\n","  # print(h,w)\n","  left=np.zeros([h,w//2])\n","  right=np.zeros([h,w//2])\n","  oup=np.zeros([h,w])\n","  left=img[:,0:w//2]\n","  right=img[:,(w//2):1+w]\n","  oup[:,0:w//2]=right\n","  oup[:,(w//2):1+w]=left\n","  return oup\n","def max_of_flip(unimg,unflip_img):\n","  img=NormalizeData(unimg)\n","  flip_img=NormalizeData(unflip_img)\n","  h,w=np.shape(img)[:2]\n","  oup=np.zeros([h,w])\n","  for i in range(h):\n","    for j in range(w):\n","      oup[i][j]=max(img[i][j],flip_img[i][j])\n","  return oup\n","\n","def process(img):\n","  sal=compute_saliency(img)\n","  normalsal=NormalizeData(sal)\n","  return normalsal\n","\n","def process_wo_sal(img):\n","  normalsal=NormalizeData(img)\n","  flipsal=flipgray(normalsal)\n","  maximg=max_of_flip(normalsal,flipsal)\n","  res=NormalizeData(maximg)\n","  return res\n","\n","def flip_sal_flip(img):\n","  normimg=NormalizeData(img)\n","  normflip=fliprgb(normimg)\n","  flipsal=compute_saliency(normflip)\n","  normflipsal=NormalizeData(flipsal)\n","  res=flipgray(normflipsal)\n","  return res\n","\n","def centre_region(img):\n","  centresal=compute_saliency(NormalizeData(img))\n","  centresalflip=flip_sal_flip(img)\n","  res=max_of_flip(centresal,centresalflip)\n","  return res\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"AgrJDcQ-guGD"},"outputs":[],"source":["def rgb_to_gray(img):\n","  return (0.2126*img[:,:,0])+(0.7152*img[:,:,1])+(0.0722*img[:,:,2])"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":2853606,"status":"ok","timestamp":1640269077354,"user":{"displayName":"Devansh Naresh Bansal (B20CS094)","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgwknbTyA9PljJtQ7GuHIIqKmktlNxn_2oAj1Mztg=s64","userId":"11670938873147803370"},"user_tz":-330},"id":"KwliV5iad5jN","outputId":"9f2a9983-6712-4fbe-f835-4d4497460d67"},"outputs":[{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.7/dist-packages/PIL/Image.py:2800: DecompressionBombWarning: Image size (128000000 pixels) exceeds limit of 89478485 pixels, could be decompression bomb DOS attack.\n","  DecompressionBombWarning,\n","/usr/local/lib/python3.7/dist-packages/PIL/Image.py:2800: DecompressionBombWarning: Image size (168031112 pixels) exceeds limit of 89478485 pixels, could be decompression bomb DOS attack.\n","  DecompressionBombWarning,\n","/usr/local/lib/python3.7/dist-packages/PIL/Image.py:2800: DecompressionBombWarning: Image size (166786848 pixels) exceeds limit of 89478485 pixels, could be decompression bomb DOS attack.\n","  DecompressionBombWarning,\n","/usr/local/lib/python3.7/dist-packages/PIL/Image.py:2800: DecompressionBombWarning: Image size (166348800 pixels) exceeds limit of 89478485 pixels, could be decompression bomb DOS attack.\n","  DecompressionBombWarning,\n","/usr/local/lib/python3.7/dist-packages/PIL/Image.py:2800: DecompressionBombWarning: Image size (134217728 pixels) exceeds limit of 89478485 pixels, could be decompression bomb DOS attack.\n","  DecompressionBombWarning,\n"]}],"source":["dataset_url = \"drive/MyDrive/Design Credit/Data_Set/Stimuli\"\n","imgdirectory = \"/content/drive/.shortcut-targets-by-id/1mbvURF9YJfww0V7YmjAOrvDejHMG4eTN/Design_Credit/Data_Set/Sorted_Stimuli\"\n","saldirectory = \"/content/drive/.shortcut-targets-by-id/1mbvURF9YJfww0V7YmjAOrvDejHMG4eTN/Design_Credit/Data_Set/Sorted_SalMap\"\n","imgarr=[]\n","salarr=[]\n","for filename in os.listdir(imgdirectory):\n","\timgarr.append(filename)\n","for filename in os.listdir(saldirectory):\n","\tsalarr.append(filename)\n","imgarr.sort()\n","salarr.sort()\n","csvlist=[]\n","for i in range(len(imgarr)):\n","  imgpath=\"drive/.shortcut-targets-by-id/1mbvURF9YJfww0V7YmjAOrvDejHMG4eTN/Design_Credit/Data_Set/Sorted_Stimuli/\"+imgarr[i]\n","  salpath=\"drive/.shortcut-targets-by-id/1mbvURF9YJfww0V7YmjAOrvDejHMG4eTN/Design_Credit/Data_Set/Sorted_SalMap/\"+salarr[i]\n","  imgdata=NormalizeData(np.asarray(PIL.Image.open(imgpath),dtype=\"uint8\"))\n","  saldata=NormalizeData(np.asarray(PIL.Image.open(salpath),dtype=\"uint8\"))\n","  h,w=saldata.shape[:2]\n","  cmpimg=NormalizeData(e2c(imgdata,256,'bilinear','dice'))\n","  cmpimgdict=e2c(imgdata,256,'bilinear','dict')\n","  equiimg=NormalizeData(c2e(cmpimg,h,w,'bilinear','dice'))\n","  frontface=cmpimgdict['F']\n","  backface=cmpimgdict['B']\n","  upface=cmpimgdict['U']\n","  downface=cmpimgdict['D']\n","  rightface=cmpimgdict['R']\n","  leftface=cmpimgdict['L']\n","  centralsal=centre_region(equiimg)\n","  frontfacesal=process(frontface)*(0.55)\n","  backfacesal=process(backface)*(0.01)\n","  upfacesal=process(upface)*(0.02)\n","  downfacesal=process(downface)*(0.02)\n","  leftfacesal=process(leftface)*(0.2)\n","  rightfacesal=process(rightface)*(0.2)\n","  threedffsal=frontfacesal[...,np.newaxis]\n","  threedbfsal=backfacesal[...,np.newaxis]\n","  threedlfsal=leftfacesal[...,np.newaxis]\n","  threedrfsal=rightfacesal[...,np.newaxis]\n","  threedufsal=upfacesal[...,np.newaxis]\n","  threeddfsal=downfacesal[...,np.newaxis]\n","  cubesaldict={'F':threedffsal,'U':threedufsal,'D':threeddfsal,'R':threedrfsal,'L':threedlfsal,'B':threedbfsal}\n","  cmpsal=cube_h2dice(cube_dict2h(cubesaldict,['F', 'R', 'B', 'L', 'U', 'D']))\n","  threedequisal=c2e(cmpsal,h,w,'bilinear','dice')\n","  equisal=np.squeeze(threedequisal,axis=(2,))\n","  normalequisal=NormalizeData(equisal)\n","  oup=max_of_flip(centralsal,normalequisal)\n","  graygroundtruth=NormalizeData(rgb_to_gray(saldata))\n","  csvlist.append(imgarr[i])\n","  csvlist.append(KLD(graygroundtruth,oup))\n","  csvlist.append(CC(graygroundtruth,oup))\n","  csvlist.append(SIM(graygroundtruth,oup))\n","  csvlist.append(jsd(graygroundtruth.flatten(),oup.flatten()))"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":3542,"status":"ok","timestamp":1640269123818,"user":{"displayName":"Devansh Naresh Bansal (B20CS094)","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgwknbTyA9PljJtQ7GuHIIqKmktlNxn_2oAj1Mztg=s64","userId":"11670938873147803370"},"user_tz":-330},"id":"_rjAqa5ceCGe","outputId":"3b2d6bff-a084-4411-fa1b-28d1f9f712aa"},"outputs":[{"data":{"text/plain":["{'spreadsheetId': '1REg3E2sd_qZ94vlLygbpaCsZJvYIKqxIzZAZ0NpWdxk',\n"," 'updatedCells': 425,\n"," 'updatedColumns': 5,\n"," 'updatedRange': 'Sheet1!A1:E85',\n"," 'updatedRows': 85}"]},"execution_count":18,"metadata":{},"output_type":"execute_result"}],"source":["from google.colab import auth\n","auth.authenticate_user()\n","\n","import gspread\n","from oauth2client.client import GoogleCredentials\n","\n","gc = gspread.authorize(GoogleCredentials.get_application_default())\n","sh = gc.create('Result_ITTI-KOCH_Final')\n","\n","# Open our new sheet and add some data.\n","worksheet = gc.open('Result_ITTI-KOCH_Final').sheet1\n","cell_list = worksheet.range('A1:E85')\n","i=0\n","j=0\n","# print(len(cell_list))\n","for cell in cell_list:\n","  cell.value =csvlist[i]\n","  i+=1\n","  \n","  \n","worksheet.update_cells(cell_list)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":96382,"status":"ok","timestamp":1640275871789,"user":{"displayName":"Devansh Naresh Bansal (B20CS094)","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgwknbTyA9PljJtQ7GuHIIqKmktlNxn_2oAj1Mztg=s64","userId":"11670938873147803370"},"user_tz":-330},"id":"W74foA23fG_z","outputId":"2c0efdc6-998b-4b28-9cd1-c12ee7db3da8"},"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/PIL/Image.py:2800: DecompressionBombWarning: Image size (128000000 pixels) exceeds limit of 89478485 pixels, could be decompression bomb DOS attack.\n","  DecompressionBombWarning,\n","/usr/local/lib/python3.7/dist-packages/PIL/Image.py:2800: DecompressionBombWarning: Image size (168031112 pixels) exceeds limit of 89478485 pixels, could be decompression bomb DOS attack.\n","  DecompressionBombWarning,\n","/usr/local/lib/python3.7/dist-packages/PIL/Image.py:2800: DecompressionBombWarning: Image size (166786848 pixels) exceeds limit of 89478485 pixels, could be decompression bomb DOS attack.\n","  DecompressionBombWarning,\n","/usr/local/lib/python3.7/dist-packages/PIL/Image.py:2800: DecompressionBombWarning: Image size (166348800 pixels) exceeds limit of 89478485 pixels, could be decompression bomb DOS attack.\n","  DecompressionBombWarning,\n","/usr/local/lib/python3.7/dist-packages/PIL/Image.py:2800: DecompressionBombWarning: Image size (134217728 pixels) exceeds limit of 89478485 pixels, could be decompression bomb DOS attack.\n","  DecompressionBombWarning,\n"]}],"source":["dataset_url = \"drive/MyDrive/Design Credit/Data_Set/Stimuli\"\n","salmapdir = \"/content/drive/.shortcut-targets-by-id/1mbvURF9YJfww0V7YmjAOrvDejHMG4eTN/Design_Credit/Data_Set/GBVS360_SalMap_Output\"\n","gtruthdir = \"/content/drive/.shortcut-targets-by-id/1mbvURF9YJfww0V7YmjAOrvDejHMG4eTN/Design_Credit/Data_Set/Sorted_SalMap\"\n","salarr=[]\n","gtrutharr=[]\n","for filename in os.listdir(salmapdir):\n","\tsalarr.append(filename)\n","for filename in os.listdir(gtruthdir):\n","\tgtrutharr.append(filename)\n","salarr.sort()\n","gtrutharr.sort()\n","csvlist=[]\n","# print(salarr)\n","# print(gtrutharr)\n","for i in range(len(salarr)):\n","  salpath=\"drive/.shortcut-targets-by-id/1mbvURF9YJfww0V7YmjAOrvDejHMG4eTN/Design_Credit/Data_Set/GBVS360_SalMap_Output/\"+salarr[i]\n","  gtruthpath=\"drive/.shortcut-targets-by-id/1mbvURF9YJfww0V7YmjAOrvDejHMG4eTN/Design_Credit/Data_Set/Sorted_SalMap/\"+gtrutharr[i]\n","  saldata=NormalizeData(np.asarray(PIL.Image.open(salpath),dtype=\"uint8\"))\n","  gtruthdata=NormalizeData(np.asarray(PIL.Image.open(gtruthpath),dtype=\"uint8\"))\n","  ggtruth=NormalizeData(rgb_to_gray(gtruthdata))\n","  # h,w=finalsaldata.shape[:2]\n","  h1,w1=saldata.shape[:2]\n","  h2,w2=ggtruth.shape[:2]\n","  if((h1*w1)<(h2*w2)):\n","    h,w=h1,w1\n","  else:\n","    h,w=h2,w2\n","  finalggtruth=NormalizeData(cv2.resize(ggtruth,dsize=(w,h),interpolation=cv2.INTER_CUBIC))\n","  finalsaldata=NormalizeData(cv2.resize(saldata,dsize=(w,h),interpolation=cv2.INTER_CUBIC))\n","  # print(finalsaldata.shape)\n","  # print(finalggtruth.shape)\n","  # print(i,end='\\t')\n","  csvlist.append(salarr[i])\n","  csvlist.append(KLD(finalsaldata,finalggtruth))\n","  # print(KLD(finalsaldata,finalggtruth),end='\\t')\n","  csvlist.append(CC(finalsaldata,finalggtruth))\n","  # print(CC(finalsaldata,finalggtruth),end='\\t')\n","  csvlist.append(SIM(finalsaldata,finalggtruth))\n","  # print(SIM(finalsaldata,finalggtruth),end='\\t')\n","  csvlist.append(jsd(finalsaldata.flatten(),finalggtruth.flatten()))\n","  # print(jsd(finalsaldata.flatten(),finalggtruth.flatten()))"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":145258,"status":"ok","timestamp":1640276032989,"user":{"displayName":"Devansh Naresh Bansal (B20CS094)","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgwknbTyA9PljJtQ7GuHIIqKmktlNxn_2oAj1Mztg=s64","userId":"11670938873147803370"},"user_tz":-330},"id":"w_36CWGkzrT8","outputId":"3de7b0c7-e810-493b-b9f1-7ddc8eeaa199"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["{'spreadsheetId': '1Za2MDboP5lHYVRSBEo7BIbG5QaQ5hgLHqH6yuU57Kz8',\n"," 'updatedCells': 425,\n"," 'updatedColumns': 5,\n"," 'updatedRange': 'Sheet1!A1:E85',\n"," 'updatedRows': 85}"]},"metadata":{},"execution_count":17}],"source":["from google.colab import auth\n","auth.authenticate_user()\n","\n","import gspread\n","from oauth2client.client import GoogleCredentials\n","\n","gc = gspread.authorize(GoogleCredentials.get_application_default())\n","sh = gc.create('Result_GBVS360_Final')\n","\n","# Open our new sheet and add some data.\n","worksheet = gc.open('Result_GBVS360_Final').sheet1\n","cell_list = worksheet.range('A1:E85')\n","i=0\n","j=0\n","# print(len(cell_list))\n","for cell in cell_list:\n","  cell.value =csvlist[i]\n","  i+=1\n","  \n","  \n","worksheet.update_cells(cell_list)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":556},"executionInfo":{"elapsed":60278,"status":"error","timestamp":1640208815225,"user":{"displayName":"Diksha Jena (B20CS013)","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"03488940742474601522"},"user_tz":-330},"id":"T88IagTm__tW","outputId":"10fedc58-b9ae-4c4a-ad6c-88635b6352ae"},"outputs":[{"name":"stdout","output_type":"stream","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.7/dist-packages/PIL/Image.py:2800: DecompressionBombWarning: Image size (128000000 pixels) exceeds limit of 89478485 pixels, could be decompression bomb DOS attack.\n","  DecompressionBombWarning,\n","/usr/local/lib/python3.7/dist-packages/PIL/Image.py:2800: DecompressionBombWarning: Image size (168031112 pixels) exceeds limit of 89478485 pixels, could be decompression bomb DOS attack.\n","  DecompressionBombWarning,\n","/usr/local/lib/python3.7/dist-packages/PIL/Image.py:2800: DecompressionBombWarning: Image size (166786848 pixels) exceeds limit of 89478485 pixels, could be decompression bomb DOS attack.\n","  DecompressionBombWarning,\n","/usr/local/lib/python3.7/dist-packages/PIL/Image.py:2800: DecompressionBombWarning: Image size (166348800 pixels) exceeds limit of 89478485 pixels, could be decompression bomb DOS attack.\n","  DecompressionBombWarning,\n","/usr/local/lib/python3.7/dist-packages/PIL/Image.py:2800: DecompressionBombWarning: Image size (134217728 pixels) exceeds limit of 89478485 pixels, could be decompression bomb DOS attack.\n","  DecompressionBombWarning,\n"]},{"ename":"TypeError","evalue":"ignored","output_type":"error","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-12-7b1735395040>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     76\u001b[0m     \u001b[0mj\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     77\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 78\u001b[0;31m \u001b[0mworksheet\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mupdate_cells\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcell_list\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/gspread/models.py\u001b[0m in \u001b[0;36mupdate_cells\u001b[0;34m(self, cell_list, value_input_option)\u001b[0m\n\u001b[1;32m    607\u001b[0m             },\n\u001b[1;32m    608\u001b[0m             body={\n\u001b[0;32m--> 609\u001b[0;31m                 \u001b[0;34m'values'\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mvalues_rect\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    610\u001b[0m             }\n\u001b[1;32m    611\u001b[0m         )\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/gspread/models.py\u001b[0m in \u001b[0;36mvalues_update\u001b[0;34m(self, range, params, body)\u001b[0m\n\u001b[1;32m    113\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mvalues_update\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mrange\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mparams\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mbody\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    114\u001b[0m         \u001b[0murl\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mSPREADSHEET_VALUES_URL\u001b[0m \u001b[0;34m%\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mid\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mquote\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrange\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msafe\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m''\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 115\u001b[0;31m         \u001b[0mr\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mclient\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrequest\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'put'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0murl\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mparams\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mparams\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mjson\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mbody\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    116\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mr\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mjson\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    117\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/gspread/client.py\u001b[0m in \u001b[0;36mrequest\u001b[0;34m(self, method, endpoint, params, data, json, files, headers)\u001b[0m\n\u001b[1;32m     71\u001b[0m             \u001b[0mdata\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     72\u001b[0m             \u001b[0mfiles\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mfiles\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 73\u001b[0;31m             \u001b[0mheaders\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mheaders\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     74\u001b[0m         )\n\u001b[1;32m     75\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/requests/sessions.py\u001b[0m in \u001b[0;36mput\u001b[0;34m(self, url, data, **kwargs)\u001b[0m\n\u001b[1;32m    588\u001b[0m         \"\"\"\n\u001b[1;32m    589\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 590\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrequest\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'PUT'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0murl\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdata\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    591\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    592\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mpatch\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0murl\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdata\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/requests/sessions.py\u001b[0m in \u001b[0;36mrequest\u001b[0;34m(self, method, url, params, data, headers, cookies, files, auth, timeout, allow_redirects, proxies, hooks, stream, verify, cert, json)\u001b[0m\n\u001b[1;32m    514\u001b[0m             \u001b[0mhooks\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mhooks\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    515\u001b[0m         )\n\u001b[0;32m--> 516\u001b[0;31m         \u001b[0mprep\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mprepare_request\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mreq\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    517\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    518\u001b[0m         \u001b[0mproxies\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mproxies\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0;34m{\u001b[0m\u001b[0;34m}\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/requests/sessions.py\u001b[0m in \u001b[0;36mprepare_request\u001b[0;34m(self, request)\u001b[0m\n\u001b[1;32m    457\u001b[0m             \u001b[0mauth\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mmerge_setting\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mauth\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mauth\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    458\u001b[0m             \u001b[0mcookies\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mmerged_cookies\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 459\u001b[0;31m             \u001b[0mhooks\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mmerge_hooks\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrequest\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mhooks\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mhooks\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    460\u001b[0m         )\n\u001b[1;32m    461\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mp\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/requests/models.py\u001b[0m in \u001b[0;36mprepare\u001b[0;34m(self, method, url, headers, files, data, params, auth, cookies, hooks, json)\u001b[0m\n\u001b[1;32m    315\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mprepare_headers\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mheaders\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    316\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mprepare_cookies\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcookies\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 317\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mprepare_body\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfiles\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mjson\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    318\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mprepare_auth\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mauth\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0murl\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    319\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/requests/models.py\u001b[0m in \u001b[0;36mprepare_body\u001b[0;34m(self, data, files, json)\u001b[0m\n\u001b[1;32m    465\u001b[0m             \u001b[0;31m# provides this natively, but Python 3 gives a Unicode string.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    466\u001b[0m             \u001b[0mcontent_type\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m'application/json'\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 467\u001b[0;31m             \u001b[0mbody\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcomplexjson\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdumps\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mjson\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    468\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mbody\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mbytes\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    469\u001b[0m                 \u001b[0mbody\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mbody\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mencode\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'utf-8'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.7/json/__init__.py\u001b[0m in \u001b[0;36mdumps\u001b[0;34m(obj, skipkeys, ensure_ascii, check_circular, allow_nan, cls, indent, separators, default, sort_keys, **kw)\u001b[0m\n\u001b[1;32m    229\u001b[0m         \u001b[0mcls\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mNone\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0mindent\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mNone\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0mseparators\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mNone\u001b[0m \u001b[0;32mand\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    230\u001b[0m         default is None and not sort_keys and not kw):\n\u001b[0;32m--> 231\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0m_default_encoder\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mencode\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mobj\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    232\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mcls\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    233\u001b[0m         \u001b[0mcls\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mJSONEncoder\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.7/json/encoder.py\u001b[0m in \u001b[0;36mencode\u001b[0;34m(self, o)\u001b[0m\n\u001b[1;32m    197\u001b[0m         \u001b[0;31m# exceptions aren't as detailed.  The list call should be roughly\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    198\u001b[0m         \u001b[0;31m# equivalent to the PySequence_Fast that ''.join() would do.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 199\u001b[0;31m         \u001b[0mchunks\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0miterencode\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mo\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0m_one_shot\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    200\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mchunks\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mlist\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtuple\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    201\u001b[0m             \u001b[0mchunks\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mlist\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mchunks\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.7/json/encoder.py\u001b[0m in \u001b[0;36miterencode\u001b[0;34m(self, o, _one_shot)\u001b[0m\n\u001b[1;32m    255\u001b[0m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mkey_separator\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mitem_separator\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msort_keys\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    256\u001b[0m                 self.skipkeys, _one_shot)\n\u001b[0;32m--> 257\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0m_iterencode\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mo\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    258\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    259\u001b[0m def _make_iterencode(markers, _default, _encoder, _indent, _floatstr,\n","\u001b[0;32m/usr/lib/python3.7/json/encoder.py\u001b[0m in \u001b[0;36mdefault\u001b[0;34m(self, o)\u001b[0m\n\u001b[1;32m    177\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    178\u001b[0m         \"\"\"\n\u001b[0;32m--> 179\u001b[0;31m         raise TypeError(f'Object of type {o.__class__.__name__} '\n\u001b[0m\u001b[1;32m    180\u001b[0m                         f'is not JSON serializable')\n\u001b[1;32m    181\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mTypeError\u001b[0m: Object of type ndarray is not JSON serializable"]}],"source":["'''\n","from google.colab import drive\n","drive.mount(\"/content/drive\")\n","from google.colab import auth\n","auth.authenticate_user()\n","\n","import gspread\n","import numpy as np\n","import pandas as pd\n","\n","import PIL\n","import matplotlib.pyplot as plt\n","\n","from scipy.ndimage import map_coordinates\n","import scipy.io\n","import scipy as sp\n","import sklearn.preprocessing\n","from skimage.transform import resize\n","import numpy.matlib\n","import math\n","\n","import cv2\n","import os,re, glob\n","from functools import partial\n","\n","EPSILON = np.finfo('float').eps\n","%matplotlib inline\n","\n","from oauth2client.client import GoogleCredentials\n","\n","gc = gspread.authorize(GoogleCredentials.get_application_default())\n","\n","sh = gc.create('GBVS360 trial Result')\n","\n","# Open our new sheet and add some data.\n","worksheet = gc.open('GBVS360 trial Result').sheet1\n","\n","salmapdir = \"/content/drive/My Drive/Design_Credit/Data_Set/GBVS360_SalMap_Output\"\n","gthuthdir = \"/content/drive/My Drive/Design_Credit/Data_Set/Sorted_SalMap\"\n","col1=[]\n","col2=[]\n","for filename in os.listdir(salmapdir):\n","\tcol1.append(filename)\n","for filename in os.listdir(gtruthdir):\n","\tcol2.append(filename)\n","col1.sort()\n","col2.sort()\n","output=[]\n","# print(salarr)\n","# print(gtrutharr)\n","\n","for i in range(85):\n","  \n","  image=np.asarray(PIL.Image.open(salmapdir+\"/\"+col1[i]))\n","  salMap=np.asarray(PIL.Image.open(gthuthdir+\"/\"+col2[i]))\n","\n","  x1,y1=image.shape\n","  x2,y2,z2=salMap.shape\n","\n","  height , width = min(x1,x2), min(y1,y2)\n","  image=cv2.resize(image, dsize=(width, height))\n","  salMap=cv2.resize(salMap, dsize=(width, height))\n","  compare=cv2.cvtColor(salMap,cv2.COLOR_BGR2GRAY)\n","\n","  \n","  result = (KLD(image,compare),CC(image,compare),SIM(image,compare),jsd(image,compare))\n","  output.append(result)\n","\n","cell_list = worksheet.range('A1:D85')\n","i=0\n","j=0\n","for cell in cell_list:\n","  cell.value = output[i][j]\n","  j+=1\n","  if(j==4):\n","    i+=1\n","    j=0\n","  \n","worksheet.update_cells(cell_list)\n","'''"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":346},"executionInfo":{"elapsed":1163,"status":"error","timestamp":1640209180471,"user":{"displayName":"Diksha Jena (B20CS013)","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"03488940742474601522"},"user_tz":-330},"id":"dU9PSIk6C_tt","outputId":"f956cbe2-78e3-4289-cbef-4b1137eb896a"},"outputs":[{"ename":"TypeError","evalue":"ignored","output_type":"error","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-15-42ff0eeb8ede>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      9\u001b[0m   \u001b[0mi\u001b[0m\u001b[0;34m+=\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     10\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 11\u001b[0;31m \u001b[0mworksheet\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mupdate_cells\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcell_list\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/gspread/models.py\u001b[0m in \u001b[0;36mupdate_cells\u001b[0;34m(self, cell_list, value_input_option)\u001b[0m\n\u001b[1;32m    607\u001b[0m             },\n\u001b[1;32m    608\u001b[0m             body={\n\u001b[0;32m--> 609\u001b[0;31m                 \u001b[0;34m'values'\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mvalues_rect\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    610\u001b[0m             }\n\u001b[1;32m    611\u001b[0m         )\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/gspread/models.py\u001b[0m in \u001b[0;36mvalues_update\u001b[0;34m(self, range, params, body)\u001b[0m\n\u001b[1;32m    113\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mvalues_update\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mrange\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mparams\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mbody\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    114\u001b[0m         \u001b[0murl\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mSPREADSHEET_VALUES_URL\u001b[0m \u001b[0;34m%\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mid\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mquote\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrange\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msafe\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m''\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 115\u001b[0;31m         \u001b[0mr\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mclient\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrequest\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'put'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0murl\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mparams\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mparams\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mjson\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mbody\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    116\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mr\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mjson\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    117\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/gspread/client.py\u001b[0m in \u001b[0;36mrequest\u001b[0;34m(self, method, endpoint, params, data, json, files, headers)\u001b[0m\n\u001b[1;32m     71\u001b[0m             \u001b[0mdata\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     72\u001b[0m             \u001b[0mfiles\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mfiles\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 73\u001b[0;31m             \u001b[0mheaders\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mheaders\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     74\u001b[0m         )\n\u001b[1;32m     75\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/requests/sessions.py\u001b[0m in \u001b[0;36mput\u001b[0;34m(self, url, data, **kwargs)\u001b[0m\n\u001b[1;32m    588\u001b[0m         \"\"\"\n\u001b[1;32m    589\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 590\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrequest\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'PUT'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0murl\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdata\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    591\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    592\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mpatch\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0murl\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdata\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/requests/sessions.py\u001b[0m in \u001b[0;36mrequest\u001b[0;34m(self, method, url, params, data, headers, cookies, files, auth, timeout, allow_redirects, proxies, hooks, stream, verify, cert, json)\u001b[0m\n\u001b[1;32m    514\u001b[0m             \u001b[0mhooks\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mhooks\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    515\u001b[0m         )\n\u001b[0;32m--> 516\u001b[0;31m         \u001b[0mprep\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mprepare_request\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mreq\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    517\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    518\u001b[0m         \u001b[0mproxies\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mproxies\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0;34m{\u001b[0m\u001b[0;34m}\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/requests/sessions.py\u001b[0m in \u001b[0;36mprepare_request\u001b[0;34m(self, request)\u001b[0m\n\u001b[1;32m    457\u001b[0m             \u001b[0mauth\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mmerge_setting\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mauth\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mauth\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    458\u001b[0m             \u001b[0mcookies\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mmerged_cookies\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 459\u001b[0;31m             \u001b[0mhooks\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mmerge_hooks\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrequest\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mhooks\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mhooks\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    460\u001b[0m         )\n\u001b[1;32m    461\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mp\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/requests/models.py\u001b[0m in \u001b[0;36mprepare\u001b[0;34m(self, method, url, headers, files, data, params, auth, cookies, hooks, json)\u001b[0m\n\u001b[1;32m    315\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mprepare_headers\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mheaders\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    316\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mprepare_cookies\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcookies\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 317\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mprepare_body\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfiles\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mjson\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    318\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mprepare_auth\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mauth\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0murl\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    319\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/requests/models.py\u001b[0m in \u001b[0;36mprepare_body\u001b[0;34m(self, data, files, json)\u001b[0m\n\u001b[1;32m    465\u001b[0m             \u001b[0;31m# provides this natively, but Python 3 gives a Unicode string.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    466\u001b[0m             \u001b[0mcontent_type\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m'application/json'\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 467\u001b[0;31m             \u001b[0mbody\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcomplexjson\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdumps\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mjson\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    468\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mbody\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mbytes\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    469\u001b[0m                 \u001b[0mbody\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mbody\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mencode\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'utf-8'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.7/json/__init__.py\u001b[0m in \u001b[0;36mdumps\u001b[0;34m(obj, skipkeys, ensure_ascii, check_circular, allow_nan, cls, indent, separators, default, sort_keys, **kw)\u001b[0m\n\u001b[1;32m    229\u001b[0m         \u001b[0mcls\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mNone\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0mindent\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mNone\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0mseparators\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mNone\u001b[0m \u001b[0;32mand\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    230\u001b[0m         default is None and not sort_keys and not kw):\n\u001b[0;32m--> 231\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0m_default_encoder\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mencode\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mobj\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    232\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mcls\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    233\u001b[0m         \u001b[0mcls\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mJSONEncoder\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.7/json/encoder.py\u001b[0m in \u001b[0;36mencode\u001b[0;34m(self, o)\u001b[0m\n\u001b[1;32m    197\u001b[0m         \u001b[0;31m# exceptions aren't as detailed.  The list call should be roughly\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    198\u001b[0m         \u001b[0;31m# equivalent to the PySequence_Fast that ''.join() would do.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 199\u001b[0;31m         \u001b[0mchunks\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0miterencode\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mo\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0m_one_shot\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    200\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mchunks\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mlist\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtuple\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    201\u001b[0m             \u001b[0mchunks\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mlist\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mchunks\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.7/json/encoder.py\u001b[0m in \u001b[0;36miterencode\u001b[0;34m(self, o, _one_shot)\u001b[0m\n\u001b[1;32m    255\u001b[0m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mkey_separator\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mitem_separator\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msort_keys\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    256\u001b[0m                 self.skipkeys, _one_shot)\n\u001b[0;32m--> 257\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0m_iterencode\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mo\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    258\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    259\u001b[0m def _make_iterencode(markers, _default, _encoder, _indent, _floatstr,\n","\u001b[0;32m/usr/lib/python3.7/json/encoder.py\u001b[0m in \u001b[0;36mdefault\u001b[0;34m(self, o)\u001b[0m\n\u001b[1;32m    177\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    178\u001b[0m         \"\"\"\n\u001b[0;32m--> 179\u001b[0;31m         raise TypeError(f'Object of type {o.__class__.__name__} '\n\u001b[0m\u001b[1;32m    180\u001b[0m                         f'is not JSON serializable')\n\u001b[1;32m    181\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mTypeError\u001b[0m: Object of type ndarray is not JSON serializable"]}],"source":["'''\n","worksheet = gc.open('GBVS360 trial Result').sheet1\n","#cell_list = worksheet.range('A1:D85')\n","cell_list = worksheet.range('A1:A85')\n","i=0\n","j=0\n","# print(len(cell_list))\n","for cell in cell_list:\n","  cell.value =output[i]\n","  i+=1\n","\n","worksheet.update_cells(cell_list)\n","'''"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":531,"status":"ok","timestamp":1640209215994,"user":{"displayName":"Diksha Jena (B20CS013)","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"03488940742474601522"},"user_tz":-330},"id":"V7QFPIw0FEKz","outputId":"f344eae9-0b12-4b28-fe3b-cca6412f18c6"},"outputs":[{"data":{"text/plain":["list"]},"execution_count":17,"metadata":{},"output_type":"execute_result"}],"source":["#type(output)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"QUqQ2e2pFi48"},"outputs":[],"source":[""]}],"metadata":{"colab":{"collapsed_sections":["7NBgVGifcyy8"],"name":"design_credit_trial","provenance":[]},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}